{
  "address": "0x764E4a1cb5C6Db0A2b4a456A33ADD76A9cff4661",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proofZero",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "publicKeyBytes",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "launchpadTokenId",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "launchpadTokensPerWinningTicket",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "ticketPaymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nrWinningTickets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "confirmationPeriodStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "winnerSelectionStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimStartTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "ClaimStartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "ConfirmationPeriodStartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "CreatedNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "LaunchpadTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "LaunchpadTokensDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LaunchpadTokensPerWinningTicketSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomSeed",
          "type": "uint256"
        }
      ],
      "name": "ShufflerInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedTicketPayment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "extraLaunchpadTokens",
          "type": "uint256"
        }
      ],
      "name": "TicketPaymentClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TicketPriceSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TicketTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "uniqueAddressesAddedCount",
          "type": "uint256"
        }
      ],
      "name": "TicketsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketsConfirmed",
          "type": "uint256"
        }
      ],
      "name": "TicketsConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "progress",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "name": "TicketsFiltered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemableTickets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundedTickets",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "UsersBlacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "UsersRemovedFromBlacklist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "WinnerSelectionStartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "progress",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "name": "WinnersSelected",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "buyers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "confirmableTickets",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "guaranteedWinning",
          "type": "uint256[]"
        }
      ],
      "name": "addTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "usersList",
          "type": "address[]"
        }
      ],
      "name": "addUsersToBlacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimLaunchpadTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTicketPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nrTicketsToConfirm",
          "type": "uint256"
        }
      ],
      "name": "confirmTickets",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "extraWinningTickets",
          "type": "uint256"
        }
      ],
      "name": "depositExtraLaunchpadTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositInitialLaunchpadTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchSize",
          "type": "uint256"
        }
      ],
      "name": "filterTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddTicketsPeriodEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClaimStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClaimableTicketPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTicketId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLaunchStage",
      "outputs": [
        {
          "internalType": "enum LaunchStageModule.LaunchStage",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLaunchpadStageFlags",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "hasWinnerSelectionProcessStarted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "wereTicketsFiltered",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "winnersSelected",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "launchpadNfts",
              "type": "bool"
            }
          ],
          "internalType": "struct LaunchpadStorage.Flags",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLaunchpadTokenId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLaunchpadTokensPerWinningTicket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getNftLaunchpadInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "numberOfWinningTickets",
              "type": "uint256"
            }
          ],
          "internalType": "struct NFT.LaunchpadNftMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getNumberOfConfirmedTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getNumberOfWinningPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfWinningTickets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum LaunchpadStorage.NumberOfWinningTicketsType",
              "name": "ticketType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct LaunchpadStorage.NumberOfWinningTickets",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNumberOfWinningTicketsForAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getShufflerSeed",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketPos",
          "type": "uint256"
        }
      ],
      "name": "getTicketIdFromPos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTicketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getTicketRangeForAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "firstId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "guaranteedWinners",
              "type": "uint256"
            }
          ],
          "internalType": "struct LaunchpadStorage.TicketRange",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimeline",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "confirmationPeriodStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "winnerSelectionStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimStartTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct LaunchpadStorage.Timeline",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalConfirmedTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalNumberOfTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getTotalNumberOfTicketsForAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinnerSelectionStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getWinningTicketIdsForAddress",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasUserClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof_bytes",
          "type": "bytes"
        }
      ],
      "name": "initShuffler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isUserBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "isWinningTicket",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "usersList",
          "type": "address[]"
        }
      ],
      "name": "removeUsersFromBlacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchSize",
          "type": "uint256"
        }
      ],
      "name": "selectWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newStartTime",
          "type": "uint256"
        }
      ],
      "name": "setClaimStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newStartTime",
          "type": "uint256"
        }
      ],
      "name": "setConfirmationPeriodStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLaunchpadToken",
          "type": "address"
        }
      ],
      "name": "setLaunchpadToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setLaunchpadTokensPerWinningTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setNftLaunchpad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setTicketPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTicketToken",
          "type": "address"
        }
      ],
      "name": "setTicketToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newStartTime",
          "type": "uint256"
        }
      ],
      "name": "setWinnerSelectionStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wereLaunchpadTokensDeposited",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8434a1b31baf92e667c03e203399a466a9dd19b6d4f9e5f8e9f74d2cebe214ef",
  "receipt": {
    "to": null,
    "from": "0xbF9f1CA6dEaA8fB1B33f72218fbfD405Cdd450Af",
    "contractAddress": "0x764E4a1cb5C6Db0A2b4a456A33ADD76A9cff4661",
    "transactionIndex": 5,
    "gasUsed": "18912233",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000800000000400000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000001000000000000000000020000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0e4d381fae00c015d986e84e7e35e490415fe81533ff3733b9938aa9a358435d",
    "transactionHash": "0x8434a1b31baf92e667c03e203399a466a9dd19b6d4f9e5f8e9f74d2cebe214ef",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 269293984,
        "transactionHash": "0x8434a1b31baf92e667c03e203399a466a9dd19b6d4f9e5f8e9f74d2cebe214ef",
        "address": "0x764E4a1cb5C6Db0A2b4a456A33ADD76A9cff4661",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bf9f1ca6deaa8fb1b33f72218fbfd405cdd450af"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x0e4d381fae00c015d986e84e7e35e490415fe81533ff3733b9938aa9a358435d"
      }
    ],
    "blockNumber": 269293984,
    "cumulativeGasUsed": "20194962",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x022b6bd6a8b84c38f95970fc7538ff1c9fd15b7e64142d7100572acd63fa500cfd563caf79fc555cf10264310b5d043dcf1b77a424bba150290b545f3400ce99b201b8913d6ea70969e2ba48c6a1e3a240",
    "0x035206f5bad784ae06a16da9e0d47e762a4abfe658f74db40bdfcef72368957891",
    "0x7c720C88Ac55865Eb3B0D8AaC5C24133Ace3309f",
    1,
    "0x0000000000000000000000000000000000000000",
    1,
    1000,
    1730308873,
    1730308953,
    1730309113
  ],
  "numDeployments": 16,
  "solcInputHash": "2838e75cd3203e0771d8a453a2cb14f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proofZero\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKeyBytes\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"launchpadTokenId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchpadTokensPerWinningTicket\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ticketPaymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nrWinningTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmationPeriodStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerSelectionStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimStartTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"ClaimStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"ConfirmationPeriodStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CreatedNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"LaunchpadTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"LaunchpadTokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LaunchpadTokensPerWinningTicketSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomSeed\",\"type\":\"uint256\"}],\"name\":\"ShufflerInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedTicketPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extraLaunchpadTokens\",\"type\":\"uint256\"}],\"name\":\"TicketPaymentClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TicketPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TicketTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueAddressesAddedCount\",\"type\":\"uint256\"}],\"name\":\"TicketsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketsConfirmed\",\"type\":\"uint256\"}],\"name\":\"TicketsConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"progress\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TicketsFiltered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemableTickets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedTickets\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"UsersBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"UsersRemovedFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"WinnerSelectionStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"progress\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"WinnersSelected\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"confirmableTickets\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"guaranteedWinning\",\"type\":\"uint256[]\"}],\"name\":\"addTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"usersList\",\"type\":\"address[]\"}],\"name\":\"addUsersToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLaunchpadTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTicketPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nrTicketsToConfirm\",\"type\":\"uint256\"}],\"name\":\"confirmTickets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extraWinningTickets\",\"type\":\"uint256\"}],\"name\":\"depositExtraLaunchpadTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositInitialLaunchpadTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"}],\"name\":\"filterTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddTicketsPeriodEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimableTicketPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTicketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLaunchStage\",\"outputs\":[{\"internalType\":\"enum LaunchStageModule.LaunchStage\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLaunchpadStageFlags\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasWinnerSelectionProcessStarted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"wereTicketsFiltered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"winnersSelected\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"launchpadNfts\",\"type\":\"bool\"}],\"internalType\":\"struct LaunchpadStorage.Flags\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLaunchpadTokenId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLaunchpadTokensPerWinningTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getNftLaunchpadInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"numberOfWinningTickets\",\"type\":\"uint256\"}],\"internalType\":\"struct NFT.LaunchpadNftMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getNumberOfConfirmedTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getNumberOfWinningPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfWinningTickets\",\"outputs\":[{\"components\":[{\"internalType\":\"enum LaunchpadStorage.NumberOfWinningTicketsType\",\"name\":\"ticketType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpadStorage.NumberOfWinningTickets\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNumberOfWinningTicketsForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShufflerSeed\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketPos\",\"type\":\"uint256\"}],\"name\":\"getTicketIdFromPos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTicketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTicketRangeForAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"firstId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteedWinners\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpadStorage.TicketRange\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeline\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"confirmationPeriodStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerSelectionStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimStartTime\",\"type\":\"uint256\"}],\"internalType\":\"struct LaunchpadStorage.Timeline\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalConfirmedTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalNumberOfTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTotalNumberOfTicketsForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnerSelectionStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWinningTicketIdsForAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasUserClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof_bytes\",\"type\":\"bytes\"}],\"name\":\"initShuffler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"isWinningTicket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"usersList\",\"type\":\"address[]\"}],\"name\":\"removeUsersFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"}],\"name\":\"selectWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStartTime\",\"type\":\"uint256\"}],\"name\":\"setClaimStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStartTime\",\"type\":\"uint256\"}],\"name\":\"setConfirmationPeriodStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLaunchpadToken\",\"type\":\"address\"}],\"name\":\"setLaunchpadToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLaunchpadTokensPerWinningTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setNftLaunchpad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTicketToken\",\"type\":\"address\"}],\"name\":\"setTicketToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStartTime\",\"type\":\"uint256\"}],\"name\":\"setWinnerSelectionStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wereLaunchpadTokensDeposited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Launchpad.sol\":\"Launchpad\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Blacklist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./LaunchpadStorage.sol\\\";\\nimport \\\"./Setup.sol\\\";\\nimport \\\"./WinnerSelection.sol\\\";\\nimport \\\"./Tickets.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract Blacklist is LaunchpadStorage, Ownable, SetupModule, WinnerSelection {\\n    using SafeERC20 for IERC20;\\n\\n    event UsersBlacklisted(address[] users);\\n    event UsersRemovedFromBlacklist(address[] users);\\n\\n    function addUsersToBlacklist(address[] memory usersList) public onlyOwner beforeWinnerSelection {\\n\\n        require(usersList.length > 0, \\\"User list cannot be empty\\\");\\n\\n        for (uint256 i = 0; i < usersList.length; i++) {\\n            address user = usersList[i];\\n            _processRefund(user);\\n            state.blacklist[user] = true;\\n        }\\n\\n        emit UsersBlacklisted(usersList);\\n    }\\n\\n    function removeUsersFromBlacklist(address[] memory usersList) public onlyOwner beforeWinnerSelection {\\n\\n        require(usersList.length > 0, \\\"User list cannot be empty\\\");\\n\\n        for (uint256 i = 0; i < usersList.length; i++) {\\n            address user = usersList[i];\\n            delete state.blacklist[user];\\n        }\\n\\n        emit UsersRemovedFromBlacklist(usersList);\\n    }\\n\\n    function _processRefund(address user) internal {\\n        uint256 confirmedTickets = getNumberOfConfirmedTickets(user);\\n        if (confirmedTickets > 0) {\\n            uint256 refundAmount = confirmedTickets * (state.configuration.ticketPrice);\\n            delete state.confirmedTicketsForAddress[user];\\n            if (state.configuration.ticketToken == address(0)) {\\n                (bool sent,) = user.call{value: refundAmount}(\\\"\\\");\\n                require(sent, \\\"Failed to send native coin\\\");\\n            } else {\\n                IERC20(state.configuration.ticketToken).transfer(user, refundAmount);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x1b1387d5693e920b2fc327e9f1b776f0ecea7d225de6f627f78dd6f5525e94f3\",\"license\":\"MIT\"},\"contracts/Config.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LaunchpadStorage.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nabstract contract ConfigurationModule is LaunchpadStorage {\\n\\n    function getTimeline() public view returns (Timeline memory) {\\n        return state.configuration.timeline;\\n    }\\n\\n    function getShufflerSeed() public view returns (string memory) {\\n        return Strings.toString(uint256(state.seed));\\n    }\\n\\n    function wereLaunchpadTokensDeposited() public view returns (bool) {\\n        return state.configuration.launchpadTokensDeposited;\\n    }\\n\\n    function getLaunchpadTokenId() public view returns (address) {\\n        return state.configuration.launchpadToken;\\n    }\\n\\n    function getLaunchpadTokensPerWinningTicket() public view returns (uint256) {\\n        return state.configuration.launchpadTokensPerWinningTicket;\\n    }\\n\\n    function getTicketPrice() public view returns (uint256) {\\n        require(state.configuration.ticketPrice != 0, \\\"Ticket price not set\\\");\\n        return state.configuration.ticketPrice;\\n    }\\n\\n    function getNumberOfWinningTickets() public view returns (NumberOfWinningTickets memory) {\\n        return state.configuration.numberOfWinningTickets;\\n    }\\n\\n    function setClaimableTicketPayment(uint256 ticketPayment) internal {\\n        state.configuration.claimableTicketPayment = ticketPayment;\\n    }\\n\\n    function getClaimableTicketPayment() public view returns (uint256) {\\n        return state.configuration.claimableTicketPayment;\\n    }\\n}\",\"keccak256\":\"0xb9ffd58af1267ef2c864edd5c22f0ccc95c40c14144a9adb9d7bed636bcca742\",\"license\":\"MIT\"},\"contracts/EllipticCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n ** @title Elliptic Curve Library\\n ** @dev Library providing arithmetic operations over elliptic curves.\\n ** This library does not check whether the inserted points belong to the curve\\n ** `isOnCurve` function should be used by the library user to check the aforementioned statement.\\n ** @author Witnet Foundation\\n */\\nlibrary EllipticCurve {\\n    // Pre-computed constant for 2 ** 255\\n    uint256 private constant U255_MAX_PLUS_1 =\\n    57896044618658097711785492504343953926634992332820282019728792003956564819968;\\n\\n    /// @dev Modular euclidean inverse of a number (mod p).\\n    /// @param _x The number\\n    /// @param _pp The modulus\\n    /// @return q such that x*q = 1 (mod _pp)\\n    function invMod(uint256 _x, uint256 _pp) internal pure returns (uint256) {\\n        require(_x != 0 && _x != _pp && _pp != 0, \\\"Invalid number\\\");\\n        uint256 q = 0;\\n        uint256 newT = 1;\\n        uint256 r = _pp;\\n        uint256 t;\\n        while (_x != 0) {\\n            t = r / _x;\\n            (q, newT) = (newT, addmod(q, (_pp - mulmod(t, newT, _pp)), _pp));\\n            (r, _x) = (_x, r - t * _x);\\n        }\\n\\n        return q;\\n    }\\n\\n    /// @dev Modular exponentiation, b^e % _pp.\\n    /// Source: https://github.com/androlo/standard-contracts/blob/master/contracts/src/crypto/ECCMath.sol\\n    /// @param _base base\\n    /// @param _exp exponent\\n    /// @param _pp modulus\\n    /// @return r such that r = b**e (mod _pp)\\n    function expMod(\\n        uint256 _base,\\n        uint256 _exp,\\n        uint256 _pp\\n    )\\n    internal pure\\n    returns (uint256)\\n    {\\n        require(_pp != 0, \\\"EllipticCurve: modulus is zero\\\");\\n\\n        if (_base == 0) return 0;\\n        if (_exp == 0) return 1;\\n\\n        uint256 r = 1;\\n        uint256 bit = U255_MAX_PLUS_1;\\n        assembly {\\n            for {\\n\\n            } gt(bit, 0) {\\n\\n            } {\\n                r := mulmod(\\n                    mulmod(r, r, _pp),\\n                    exp(_base, iszero(iszero(and(_exp, bit)))),\\n                    _pp\\n                )\\n                r := mulmod(\\n                    mulmod(r, r, _pp),\\n                    exp(_base, iszero(iszero(and(_exp, div(bit, 2))))),\\n                    _pp\\n                )\\n                r := mulmod(\\n                    mulmod(r, r, _pp),\\n                    exp(_base, iszero(iszero(and(_exp, div(bit, 4))))),\\n                    _pp\\n                )\\n                r := mulmod(\\n                    mulmod(r, r, _pp),\\n                    exp(_base, iszero(iszero(and(_exp, div(bit, 8))))),\\n                    _pp\\n                )\\n                bit := div(bit, 16)\\n            }\\n        }\\n\\n        return r;\\n    }\\n\\n    /// @dev Converts a point (x, y, z) expressed in Jacobian coordinates to affine coordinates (x', y', 1).\\n    /// @param _x coordinate x\\n    /// @param _y coordinate y\\n    /// @param _z coordinate z\\n    /// @param _pp the modulus\\n    /// @return (x', y') affine coordinates\\n    function toAffine(\\n        uint256 _x,\\n        uint256 _y,\\n        uint256 _z,\\n        uint256 _pp\\n    )\\n    internal pure\\n    returns (uint256, uint256)\\n    {\\n        uint256 zInv = invMod(_z, _pp);\\n        uint256 zInv2 = mulmod(zInv, zInv, _pp);\\n        uint256 x2 = mulmod(_x, zInv2, _pp);\\n        uint256 y2 = mulmod(_y, mulmod(zInv, zInv2, _pp), _pp);\\n\\n        return (x2, y2);\\n    }\\n\\n    /// @dev Derives the y coordinate from a compressed-format point x [[SEC-1]](https://www.secg.org/SEC1-Ver-1.0.pdf).\\n    /// @param _prefix parity byte (0x02 even, 0x03 odd)\\n    /// @param _x coordinate x\\n    /// @param _aa constant of curve\\n    /// @param _bb constant of curve\\n    /// @param _pp the modulus\\n    /// @return y coordinate y\\n    function deriveY(\\n        uint8 _prefix,\\n        uint256 _x,\\n        uint256 _aa,\\n        uint256 _bb,\\n        uint256 _pp\\n    )\\n    internal pure\\n    returns (uint256)\\n    {\\n        require(\\n            _prefix == 0x02 || _prefix == 0x03,\\n            \\\"EllipticCurve:innvalid compressed EC point prefix\\\"\\n        );\\n\\n        // x^3 + ax + b\\n        uint256 y2 = addmod(\\n            mulmod(_x, mulmod(_x, _x, _pp), _pp),\\n            addmod(mulmod(_x, _aa, _pp), _bb, _pp),\\n            _pp\\n        );\\n        y2 = expMod(y2, (_pp + 1) / 4, _pp);\\n        // uint256 cmp = yBit ^ y_ & 1;\\n        uint256 y = (y2 + _prefix) % 2 == 0 ? y2 : _pp - y2;\\n\\n        return y;\\n    }\\n\\n    /// @dev Check whether point (x,y) is on curve defined by a, b, and _pp.\\n    /// @param _x coordinate x of P1\\n    /// @param _y coordinate y of P1\\n    /// @param _aa constant of curve\\n    /// @param _bb constant of curve\\n    /// @param _pp the modulus\\n    /// @return true if x,y in the curve, false else\\n    function isOnCurve(\\n        uint _x,\\n        uint _y,\\n        uint _aa,\\n        uint _bb,\\n        uint _pp\\n    )\\n    internal pure\\n    returns (bool)\\n    {\\n        if (0 == _x || _x >= _pp || 0 == _y || _y >= _pp) {\\n            return false;\\n        }\\n        // y^2\\n        uint lhs = mulmod(_y, _y, _pp);\\n        // x^3\\n        uint rhs = mulmod(mulmod(_x, _x, _pp), _x, _pp);\\n        if (_aa != 0) {\\n            // x^3 + a*x\\n            rhs = addmod(rhs, mulmod(_x, _aa, _pp), _pp);\\n        }\\n        if (_bb != 0) {\\n            // x^3 + a*x + b\\n            rhs = addmod(rhs, _bb, _pp);\\n        }\\n\\n        return lhs == rhs;\\n    }\\n\\n    /// @dev Calculate inverse (x, -y) of point (x, y).\\n    /// @param _x coordinate x of P1\\n    /// @param _y coordinate y of P1\\n    /// @param _pp the modulus\\n    /// @return (x, -y)\\n    function ecInv(\\n        uint256 _x,\\n        uint256 _y,\\n        uint256 _pp\\n    )\\n    internal pure\\n    returns (uint256, uint256)\\n    {\\n        return (_x, (_pp - _y) % _pp);\\n    }\\n\\n    /// @dev Add two points (x1, y1) and (x2, y2) in affine coordinates.\\n    /// @param _x1 coordinate x of P1\\n    /// @param _y1 coordinate y of P1\\n    /// @param _x2 coordinate x of P2\\n    /// @param _y2 coordinate y of P2\\n    /// @param _aa constant of the curve\\n    /// @param _pp the modulus\\n    /// @return (qx, qy) = P1+P2 in affine coordinates\\n    function ecAdd(\\n        uint256 _x1,\\n        uint256 _y1,\\n        uint256 _x2,\\n        uint256 _y2,\\n        uint256 _aa,\\n        uint256 _pp\\n    )\\n    internal pure\\n    returns (uint256, uint256)\\n    {\\n        uint x = 0;\\n        uint y = 0;\\n        uint z = 0;\\n\\n        // Double if x1==x2 else add\\n        if (_x1 == _x2) {\\n            // y1 = -y2 mod p\\n            if (addmod(_y1, _y2, _pp) == 0) {\\n                return (0, 0);\\n            } else {\\n                // P1 = P2\\n                (x, y, z) = jacDouble(_x1, _y1, 1, _aa, _pp);\\n            }\\n        } else {\\n            (x, y, z) = jacAdd(_x1, _y1, 1, _x2, _y2, 1, _pp);\\n        }\\n        // Get back to affine\\n        return toAffine(x, y, z, _pp);\\n    }\\n\\n    /// @dev Substract two points (x1, y1) and (x2, y2) in affine coordinates.\\n    /// @param _x1 coordinate x of P1\\n    /// @param _y1 coordinate y of P1\\n    /// @param _x2 coordinate x of P2\\n    /// @param _y2 coordinate y of P2\\n    /// @param _aa constant of the curve\\n    /// @param _pp the modulus\\n    /// @return (qx, qy) = P1-P2 in affine coordinates\\n    function ecSub(\\n        uint256 _x1,\\n        uint256 _y1,\\n        uint256 _x2,\\n        uint256 _y2,\\n        uint256 _aa,\\n        uint256 _pp\\n    )\\n    internal pure\\n    returns (uint256, uint256)\\n    {\\n        // invert square\\n        (uint256 x, uint256 y) = ecInv(_x2, _y2, _pp);\\n        // P1-square\\n        return ecAdd(_x1, _y1, x, y, _aa, _pp);\\n    }\\n\\n    /// @dev Multiply point (x1, y1, z1) times d in affine coordinates.\\n    /// @param _k scalar to multiply\\n    /// @param _x coordinate x of P1\\n    /// @param _y coordinate y of P1\\n    /// @param _aa constant of the curve\\n    /// @param _pp the modulus\\n    /// @return (qx, qy) = d*P in affine coordinates\\n    function ecMul(\\n        uint256 _k,\\n        uint256 _x,\\n        uint256 _y,\\n        uint256 _aa,\\n        uint256 _pp\\n    )\\n    internal pure\\n    returns (uint256, uint256)\\n    {\\n        // Jacobian multiplication\\n        (uint256 x1, uint256 y1, uint256 z1) = jacMul(_k, _x, _y, 1, _aa, _pp);\\n        // Get back to affine\\n        return toAffine(x1, y1, z1, _pp);\\n    }\\n\\n    /// @dev Adds two points (x1, y1, z1) and (x2 y2, z2).\\n    /// @param _x1 coordinate x of P1\\n    /// @param _y1 coordinate y of P1\\n    /// @param _z1 coordinate z of P1\\n    /// @param _x2 coordinate x of square\\n    /// @param _y2 coordinate y of square\\n    /// @param _z2 coordinate z of square\\n    /// @param _pp the modulus\\n    /// @return (qx, qy, qz) P1+square in Jacobian\\n    function jacAdd(\\n        uint256 _x1,\\n        uint256 _y1,\\n        uint256 _z1,\\n        uint256 _x2,\\n        uint256 _y2,\\n        uint256 _z2,\\n        uint256 _pp\\n    )\\n    internal pure\\n    returns (uint256, uint256, uint256)\\n    {\\n        if (_x1 == 0 && _y1 == 0) return (_x2, _y2, _z2);\\n        if (_x2 == 0 && _y2 == 0) return (_x1, _y1, _z1);\\n\\n        // We follow the equations described in https://pdfs.semanticscholar.org/5c64/29952e08025a9649c2b0ba32518e9a7fb5c2.pdf Section 5\\n        uint[4] memory zs; // z1^2, z1^3, z2^2, z2^3\\n        zs[0] = mulmod(_z1, _z1, _pp);\\n        zs[1] = mulmod(_z1, zs[0], _pp);\\n        zs[2] = mulmod(_z2, _z2, _pp);\\n        zs[3] = mulmod(_z2, zs[2], _pp);\\n\\n        // u1, s1, u2, s2\\n        zs = [\\n                        mulmod(_x1, zs[2], _pp),\\n                        mulmod(_y1, zs[3], _pp),\\n                        mulmod(_x2, zs[0], _pp),\\n                        mulmod(_y2, zs[1], _pp)\\n            ];\\n\\n        // In case of zs[0] == zs[2] && zs[1] == zs[3], double function should be used\\n        require(\\n            zs[0] != zs[2] || zs[1] != zs[3],\\n            \\\"Use jacDouble function instead\\\"\\n        );\\n\\n        uint[4] memory hr;\\n        //h\\n        hr[0] = addmod(zs[2], _pp - zs[0], _pp);\\n        //r\\n        hr[1] = addmod(zs[3], _pp - zs[1], _pp);\\n        //h^2\\n        hr[2] = mulmod(hr[0], hr[0], _pp);\\n        // h^3\\n        hr[3] = mulmod(hr[2], hr[0], _pp);\\n        // qx = -h^3  -2u1h^2+r^2\\n        uint256 qx = addmod(mulmod(hr[1], hr[1], _pp), _pp - hr[3], _pp);\\n        qx = addmod(qx, _pp - mulmod(2, mulmod(zs[0], hr[2], _pp), _pp), _pp);\\n        // qy = -s1*z1*h^3+r(u1*h^2 -x^3)\\n        uint256 qy = mulmod(\\n            hr[1],\\n            addmod(mulmod(zs[0], hr[2], _pp), _pp - qx, _pp),\\n            _pp\\n        );\\n        qy = addmod(qy, _pp - mulmod(zs[1], hr[3], _pp), _pp);\\n        // qz = h*z1*z2\\n        uint256 qz = mulmod(hr[0], mulmod(_z1, _z2, _pp), _pp);\\n        return (qx, qy, qz);\\n    }\\n\\n    /// @dev Doubles a points (x, y, z).\\n    /// @param _x coordinate x of P1\\n    /// @param _y coordinate y of P1\\n    /// @param _z coordinate z of P1\\n    /// @param _aa the a scalar in the curve equation\\n    /// @param _pp the modulus\\n    /// @return (qx, qy, qz) 2P in Jacobian\\n    function jacDouble(\\n        uint256 _x,\\n        uint256 _y,\\n        uint256 _z,\\n        uint256 _aa,\\n        uint256 _pp\\n    )\\n    internal pure\\n    returns (uint256, uint256, uint256)\\n    {\\n        if (_z == 0) return (_x, _y, _z);\\n\\n        // We follow the equations described in https://pdfs.semanticscholar.org/5c64/29952e08025a9649c2b0ba32518e9a7fb5c2.pdf Section 5\\n        // Note: there is a bug in the paper regarding the m parameter, M=3*(x1^2)+a*(z1^4)\\n        // x, y, z at this point represent the squares of _x, _y, _z\\n        uint256 x = mulmod(_x, _x, _pp); //x1^2\\n        uint256 y = mulmod(_y, _y, _pp); //y1^2\\n        uint256 z = mulmod(_z, _z, _pp); //z1^2\\n\\n        // s\\n        uint s = mulmod(4, mulmod(_x, y, _pp), _pp);\\n        // m\\n        uint m = addmod(\\n            mulmod(3, x, _pp),\\n            mulmod(_aa, mulmod(z, z, _pp), _pp),\\n            _pp\\n        );\\n\\n        // x, y, z at this point will be reassigned and rather represent qx, qy, qz from the paper\\n        // This allows to reduce the gas cost and stack footprint of the algorithm\\n        // qx\\n        x = addmod(mulmod(m, m, _pp), _pp - addmod(s, s, _pp), _pp);\\n        // qy = -8*y1^4 + M(S-T)\\n        y = addmod(\\n            mulmod(m, addmod(s, _pp - x, _pp), _pp),\\n            _pp - mulmod(8, mulmod(y, y, _pp), _pp),\\n            _pp\\n        );\\n        // qz = 2*y1*z1\\n        z = mulmod(2, mulmod(_y, _z, _pp), _pp);\\n\\n        return (x, y, z);\\n    }\\n\\n    /// @dev Multiply point (x, y, z) times d.\\n    /// @param _d scalar to multiply\\n    /// @param _x coordinate x of P1\\n    /// @param _y coordinate y of P1\\n    /// @param _z coordinate z of P1\\n    /// @param _aa constant of curve\\n    /// @param _pp the modulus\\n    /// @return (qx, qy, qz) d*P1 in Jacobian\\n    function jacMul(\\n        uint256 _d,\\n        uint256 _x,\\n        uint256 _y,\\n        uint256 _z,\\n        uint256 _aa,\\n        uint256 _pp\\n    )\\n    internal pure\\n    returns (uint256, uint256, uint256)\\n    {\\n        // Early return in case that `_d == 0`\\n        if (_d == 0) {\\n            return (_x, _y, _z);\\n        }\\n\\n        uint256 remaining = _d;\\n        uint256 qx = 0;\\n        uint256 qy = 0;\\n        uint256 qz = 1;\\n\\n        // Double and add algorithm\\n        while (remaining != 0) {\\n            if ((remaining & 1) != 0) {\\n                (qx, qy, qz) = jacAdd(qx, qy, qz, _x, _y, _z, _pp);\\n            }\\n            remaining = remaining / 2;\\n            (_x, _y, _z) = jacDouble(_x, _y, _z, _aa, _pp);\\n        }\\n        return (qx, qy, qz);\\n    }\\n}\",\"keccak256\":\"0x19c9c072430c119f21f4568f472a696ea186e24dc1fbed508d00bef188af9efa\",\"license\":\"MIT\"},\"contracts/LaunchStage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./LaunchpadStorage.sol\\\";\\n\\nabstract contract LaunchStageModule is LaunchpadStorage {\\n\\n     enum LaunchStage {\\n        AddTickets,\\n        Confirm,\\n        WinnerSelection,\\n        Claim\\n    }\\n\\n    function getLaunchStage() public view returns (LaunchStage) {\\n        uint256 currentTime = block.timestamp;\\n        Timeline memory timeline = state.configuration.timeline;\\n\\n        // Determine the launch stage based on the current time and timeline\\n        if (currentTime < timeline.confirmationPeriodStartTime) {\\n            // Before confirmation period starts\\n            return LaunchStage.AddTickets;\\n        }\\n\\n        if (currentTime < timeline.winnerSelectionStartTime) {\\n            // During confirmation period\\n            return LaunchStage.Confirm;\\n        }\\n\\n        if (currentTime < timeline.claimStartTime) {\\n            // Before claim start time\\n            return LaunchStage.WinnerSelection;\\n        }\\n\\n        // After claim start time\\n        return LaunchStage.Claim;\\n    }\\n\\n    modifier requireAddTicketsPeriod() {\\n        LaunchStage currentStage = getLaunchStage();\\n        require(currentStage == LaunchStage.AddTickets, \\\"Add tickets period has passed\\\");\\n        _;\\n    }\\n\\n    modifier requireConfirmationPeriod() {\\n        LaunchStage currentStage = getLaunchStage();\\n        require(currentStage == LaunchStage.Confirm, \\\"Not in confirmation period\\\");\\n        _;\\n    }\\n\\n    modifier requireBeforeWinnerSelectionPeriod() {\\n        LaunchStage currentStage = getLaunchStage();\\n        require(currentStage < LaunchStage.WinnerSelection, \\\"Add tickets period has passed\\\");\\n        _;\\n    }\\n\\n    modifier requireWinnerSelectionPeriod() {\\n        LaunchStage currentStage = getLaunchStage();\\n        require(currentStage == LaunchStage.WinnerSelection, \\\"Not in winner selection period\\\");\\n        _;\\n    }\\n\\n    modifier requireClaimPeriod() {\\n        LaunchStage currentStage = getLaunchStage();\\n        require(currentStage == LaunchStage.Claim, \\\"Not in claim period\\\");\\n        require(state.flags.winnersSelected, \\\"Winners not selected yet\\\");\\n        _;\\n    }\\n\\n    function getLaunchpadStageFlags() public view returns (Flags memory) {\\n        return state.flags;\\n    }\\n}\",\"keccak256\":\"0x4a19116e35b9889c826220217668dd79e2959e72867d62dcf2d29fd63f730e09\",\"license\":\"MIT\"},\"contracts/Launchpad.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./VRF.sol\\\";\\n\\n\\nimport \\\"./LaunchpadStorage.sol\\\";\\nimport \\\"./Config.sol\\\";\\nimport \\\"./Tickets.sol\\\";\\nimport \\\"./UserInteractions.sol\\\";\\nimport \\\"./Blacklist.sol\\\";\\nimport \\\"./Nfts.sol\\\";\\n\\ncontract Launchpad is LaunchpadStorage, Ownable, ConfigurationModule, Tickets, UserInteractions, Blacklist, NFT {\\n    using SafeERC20 for IERC20;\\n\\n    uint32 constant callbackGasLimit = 40000;\\n    uint16 constant requestConfirmations = 3;\\n    uint32 constant numWords = 1;\\n\\n    uint256 constant FIRST_TICKET_ID = 1;\\n    bool constant WINNING_TICKET = true;\\n\\n    event ShufflerInitialized(uint256 randomSeed);\\n\\n    function initShuffler(bytes memory proof_bytes) public {\\n        require(state.publicKey[0] != 0 && state.publicKey[1] != 0, \\\"Public key not set\\\");\\n        uint256[4] memory proof = VRF.decodeProof(proof_bytes);\\n        require(VRF.verify(state.publicKey, proof, bytes(getShufflerSeed())), \\\"Invalid proof\\\");\\n        state.proof = uint256(bytes32(proof_bytes));\\n        emit ShufflerInitialized(state.proof);\\n    }\\n\\n    constructor(\\n        bytes memory proofZero,\\n        bytes memory publicKeyBytes,\\n        address launchpadTokenId,\\n        uint256 launchpadTokensPerWinningTicket,\\n        address ticketPaymentToken,\\n        uint256 ticketPrice,\\n        uint256 nrWinningTickets,\\n        uint256 confirmationPeriodStartTime,\\n        uint256 winnerSelectionStartTime,\\n        uint256 claimStartTime\\n    ) Ownable(msg.sender) NFT() {\\n        require(nrWinningTickets > 0, \\\"Number of winning tickets must be greater than zero\\\");\\n        uint256[2] memory publicKey = VRF.decodePoint(publicKeyBytes);\\n        state.publicKey = publicKey;\\n        require(VRF.verify(publicKey, VRF.decodeProof(proofZero), bytes(\\\"0\\\")), \\\"Invalid proof\\\");\\n        state.configuration = ConfigModule({\\n            timeline: Timeline({\\n            confirmationPeriodStartTime: confirmationPeriodStartTime,\\n            winnerSelectionStartTime: winnerSelectionStartTime,\\n            claimStartTime: claimStartTime\\n        }),\\n            launchpadToken: launchpadTokenId,\\n            launchpadTokensPerWinningTicket: launchpadTokensPerWinningTicket,\\n            ticketToken: ticketPaymentToken,\\n            ticketPrice: ticketPrice,\\n            numberOfWinningTickets: NumberOfWinningTickets({\\n            ticketType: NumberOfWinningTicketsType.BeforeFiltering,\\n            value: nrWinningTickets\\n        }),\\n            launchpadTokensDeposited: false,\\n            claimableTicketPayment: 0\\n        });\\n\\n        state.flags = Flags({\\n            hasWinnerSelectionProcessStarted: false,\\n            wereTicketsFiltered: false,\\n            winnersSelected: false,\\n            launchpadNfts: false\\n        });\\n\\n        state.lastTicketId = 0;\\n\\n        require(\\n            confirmationPeriodStartTime < winnerSelectionStartTime &&\\n            winnerSelectionStartTime < claimStartTime &&\\n            confirmationPeriodStartTime > block.timestamp,\\n            \\\"Invalid time periods\\\"\\n        );\\n    }\\n}\",\"keccak256\":\"0xdbe7412c79fb3b07a5cb6a13a370c940aae92cd18a57c863c0bf06f425be1b69\"},\"contracts/LaunchpadStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract LaunchpadStorage {\\n\\n    struct Flags {\\n        bool hasWinnerSelectionProcessStarted;\\n        bool wereTicketsFiltered;\\n        bool winnersSelected;\\n        bool launchpadNfts;\\n    }\\n\\n    struct Timeline {\\n        uint256 confirmationPeriodStartTime;\\n        uint256 winnerSelectionStartTime;\\n        uint256 claimStartTime;\\n    }\\n\\n    enum NumberOfWinningTicketsType {BeforeFiltering, AfterFiltering}\\n\\n    struct NumberOfWinningTickets {\\n        NumberOfWinningTicketsType ticketType;\\n        uint256 value;\\n    }\\n\\n    struct ConfigModule {\\n        Timeline timeline;\\n        address ticketToken;\\n        address launchpadToken;\\n        uint256 launchpadTokensPerWinningTicket;\\n        uint256 ticketPrice;\\n        NumberOfWinningTickets numberOfWinningTickets;\\n        bool launchpadTokensDeposited;\\n        uint256 claimableTicketPayment;\\n    }\\n\\n    struct TicketBatch {\\n        address addr;\\n        uint256 nrTickets;\\n    }\\n\\n    struct TicketRange {\\n        uint256 firstId;\\n        uint256 lastId;\\n        uint256 guaranteedWinners;\\n    }\\n\\n    struct LaunchpadState {\\n        Flags flags;\\n        ConfigModule configuration;\\n        uint256 lastTicketId;\\n        uint256 totalLaunchpadTokens;\\n        mapping(uint256 => bool) winningTickets;\\n        uint256 confirmedGuaranteedTickets;\\n        bool ownerPaymentClaimed;\\n        mapping(uint256 => TicketBatch) ticketBatch;\\n        mapping(address => TicketRange) ticketRangeForAddress;\\n        mapping(address => uint256) confirmedTicketsForAddress;\\n        mapping(uint256 => uint256) ticketPositionForTicketId;\\n        mapping(address => bool) blacklist;\\n        uint256 totalGuaranteedWinningTickets;\\n        uint256 selectWinnersProgress;\\n        uint256 filterTicketsProgressStart;\\n        uint256 filterTicketsProgressEnd;\\n        mapping(address => bool) claimList;\\n        mapping(address => uint256) numberOfWinningTicketsPerUser;\\n        uint256[2] publicKey;\\n        bytes32 seed;\\n        uint256 proof;\\n    }\\n\\n    LaunchpadState internal state;\\n}\",\"keccak256\":\"0x2272f2e865d3ffed761d49c9f246f059138ab588eb19a5cdf9664522eed1f545\",\"license\":\"MIT\"},\"contracts/Nfts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./LaunchpadStorage.sol\\\";\\nimport \\\"./WinnerSelection.sol\\\";\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract NFT is ERC721, LaunchStageModule, WinnerSelection{\\n\\n    struct LaunchpadNftMetadata {\\n        uint256 numberOfWinningTickets;\\n    }\\n\\n    uint256 private tokenCounter;\\n    mapping(uint256 => LaunchpadNftMetadata) private tokenIdToState;\\n    mapping(address => uint256) private addressToTokenId;\\n\\n    event CreatedNFT(uint256 tokenId);\\n\\n    constructor() ERC721(\\\"Launchpad NFT\\\", \\\"LNFT\\\") {\\n        tokenCounter = 0;\\n    }\\n\\n    function claimNft() public\\n        requireClaimPeriod \\n        requireNftLaunchpadEnabled\\n        requireTokensClaimed \\n    {\\n   \\n        uint256 tokenId = tokenCounter;\\n        _safeMint(msg.sender, tokenId);\\n\\n        uint256 winningTicketsPerUser = getNumberOfWinningPerUser(msg.sender);\\n\\n        tokenIdToState[tokenId] = LaunchpadNftMetadata(winningTicketsPerUser);\\n\\n        tokenCounter ++;\\n        emit CreatedNFT(tokenCounter);\\n    }\\n\\n    function getTokenCounter() public view returns (uint256) {\\n        return tokenCounter;\\n    }\\n\\n    function setNftLaunchpad() public onlyOwner {\\n         state.flags.launchpadNfts = true;\\n    }\\n\\n    function getNftLaunchpadInfo(address owner) public view returns (LaunchpadNftMetadata memory) {\\n        uint256 tokenId = addressToTokenId[owner];\\n        return tokenIdToState[tokenId];\\n    }\\n\\n    modifier requireNftLaunchpadEnabled() {\\n        require(state.flags.launchpadNfts, \\\"NFT launchpad is not enabled\\\");\\n        _;\\n    }\\n\\n    modifier requireTokensClaimed() {\\n        require(state.claimList[msg.sender], \\\"Tokens not claimed yet\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x3660259082f1e508ef54275356d6e5daa5afb88d3808ccc6700335da2509973b\",\"license\":\"MIT\"},\"contracts/Setup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./LaunchpadStorage.sol\\\";\\nimport \\\"./LaunchStage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract SetupModule is LaunchpadStorage, Ownable, LaunchStageModule {\\n    using SafeERC20 for IERC20;\\n\\n    event LaunchpadTokensDeposited(uint256 amount, address token);\\n    event TicketPriceSet(uint256 amount, address token);\\n    event LaunchpadTokensPerWinningTicketSet(uint256 amount);\\n    event TicketTokenSet(address token);\\n    event LaunchpadTokenSet(address token);\\n    event ConfirmationPeriodStartTimeSet(uint256 startTime);\\n    event WinnerSelectionStartTimeSet(uint256 startTime);\\n    event ClaimStartTimeSet(uint256 startTime);\\n\\n    function depositInitialLaunchpadTokens() public onlyOwner beforeWinnerSelection {\\n        depositLaunchpadTokens(state.configuration.numberOfWinningTickets.value, false);\\n    }\\n\\n    function depositExtraLaunchpadTokens(uint256 extraWinningTickets) public onlyOwner beforeWinnerSelection {\\n        depositLaunchpadTokens(extraWinningTickets, true);\\n    }\\n\\n    function depositLaunchpadTokens(uint256 totalWinningTickets, bool extra) internal onlyOwner beforeWinnerSelection {\\n        require(!state.configuration.launchpadTokensDeposited || extra, \\\"Tokens already deposited\\\");\\n        require(state.configuration.launchpadTokensDeposited || !extra, \\\"Deposit initial launchpad tokens before adding extra\\\");\\n\\n        if (!extra) {\\n            require(totalWinningTickets == state.configuration.numberOfWinningTickets.value, \\\"Incorrect deposit amount\\\");\\n        }\\n\\n        uint256 amountPerTicket = state.configuration.launchpadTokensPerWinningTicket;\\n        uint256 amountNeeded = amountPerTicket * totalWinningTickets;\\n\\n        IERC20 launchpadToken = IERC20(state.configuration.launchpadToken);\\n        uint256 balanceBefore = launchpadToken.balanceOf(address(this));\\n        launchpadToken.transferFrom(msg.sender, address(this), amountNeeded);\\n        uint256 balanceAfter = launchpadToken.balanceOf(address(this));\\n        uint256 amountDeposited = balanceAfter - balanceBefore;\\n\\n        state.totalLaunchpadTokens = state.totalLaunchpadTokens + amountDeposited;\\n\\n        if (extra) {\\n            state.configuration.numberOfWinningTickets = addToNumberOfWinningTickets(\\n                state.configuration.numberOfWinningTickets,\\n                totalWinningTickets\\n            );\\n        }\\n\\n        state.configuration.launchpadTokensDeposited = true;\\n\\n        emit LaunchpadTokensDeposited(amountDeposited, address(launchpadToken));\\n    }\\n\\n    function setTicketPrice(uint256 amount) public onlyOwner requireAddTicketsPeriod {\\n        require(amount > 0, \\\"Ticket price must be higher than 0\\\");\\n        state.configuration.ticketPrice = amount;\\n        emit TicketPriceSet(amount, state.configuration.ticketToken);\\n    }\\n\\n    function setLaunchpadTokensPerWinningTicket(uint256 amount) public onlyOwner requireAddTicketsPeriod {\\n        require(amount > 0, \\\"Launchpad tokens per winning ticket cannot be set to zero\\\");\\n        state.configuration.launchpadTokensPerWinningTicket = amount;\\n        emit LaunchpadTokensPerWinningTicketSet(amount);\\n    }\\n\\n    function setTicketToken(address newTicketToken) public onlyOwner requireAddTicketsPeriod {\\n        require(newTicketToken != address(0), \\\"Invalid token address\\\");\\n        state.configuration.ticketToken = newTicketToken;\\n        emit TicketTokenSet(newTicketToken);\\n    }\\n\\n    function setLaunchpadToken(address newLaunchpadToken) public onlyOwner requireAddTicketsPeriod {\\n        require(newLaunchpadToken != address(0), \\\"Invalid token address\\\");\\n        state.configuration.launchpadToken = newLaunchpadToken;\\n        emit LaunchpadTokenSet(newLaunchpadToken);\\n    }\\n\\n    function setConfirmationPeriodStartTime(uint256 newStartTime) public onlyOwner {\\n        require(newStartTime > block.timestamp, \\\"New start time must be in the future\\\");\\n        require(newStartTime < state.configuration.timeline.winnerSelectionStartTime, \\\"Must be before winner selection\\\");\\n        state.configuration.timeline.confirmationPeriodStartTime = newStartTime;\\n        emit ConfirmationPeriodStartTimeSet(newStartTime);\\n    }\\n\\n    function setWinnerSelectionStartTime(uint256 newStartTime) public onlyOwner {\\n        require(newStartTime > block.timestamp, \\\"New start time must be in the future\\\");\\n        require(newStartTime > state.configuration.timeline.confirmationPeriodStartTime, \\\"Must be after confirmation period\\\");\\n        require(newStartTime < state.configuration.timeline.claimStartTime, \\\"Must be before claim period\\\");\\n        state.configuration.timeline.winnerSelectionStartTime = newStartTime;\\n        emit WinnerSelectionStartTimeSet(newStartTime);\\n    }\\n\\n    function setClaimStartTime(uint256 newStartTime) public onlyOwner {\\n        require(newStartTime > block.timestamp, \\\"New start time must be in the future\\\");\\n        require(newStartTime > state.configuration.timeline.winnerSelectionStartTime, \\\"Must be after winner selection\\\");\\n        state.configuration.timeline.claimStartTime = newStartTime;\\n        emit ClaimStartTimeSet(newStartTime);\\n    }\\n\\n    modifier beforeWinnerSelection() {\\n        require(getLaunchStage() < LaunchStage.WinnerSelection, \\\"Winner selection has already started\\\");\\n        _;\\n    }\\n\\n    function addToNumberOfWinningTickets(NumberOfWinningTickets memory nwt, uint256 value) internal pure returns (NumberOfWinningTickets memory) {\\n        return NumberOfWinningTickets({\\n            ticketType: nwt.ticketType,\\n            value: nwt.value + value\\n        });\\n    }\\n}\",\"keccak256\":\"0x9964374659ab399b7392931729e30ab29f9739903693eaee6233fc862b0d9d57\",\"license\":\"MIT\"},\"contracts/Tickets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./LaunchpadStorage.sol\\\";\\nimport \\\"./LaunchStage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract Tickets is LaunchpadStorage, Ownable, LaunchStageModule {\\n    using SafeERC20 for IERC20;\\n\\n    event TicketsAdded(uint256 uniqueAddressesAddedCount);\\n    event TicketPaymentClaimed(uint256 claimedTicketPayment, uint256 extraLaunchpadTokens);\\n\\n    function addTickets(address[] memory buyers, uint256[] memory confirmableTickets, uint256[] memory guaranteedWinning)\\n    public onlyOwner requireBeforeWinnerSelectionPeriod\\n    {\\n        require(buyers.length == confirmableTickets.length && buyers.length == guaranteedWinning.length, \\\"Input arrays must have the same length\\\");\\n\\n        uint256 uniqueCount = 0;\\n        uint256 totalWinning = state.totalGuaranteedWinningTickets;\\n        uint256 maxWinning = state.configuration.numberOfWinningTickets.value;\\n\\n        for (uint256 i = 0; i < buyers.length; i++) {\\n            if (tryCreateTickets(buyers[i], confirmableTickets[i], guaranteedWinning[i])) {\\n                require(confirmableTickets[i] >= guaranteedWinning[i], \\\"Can't add more guaranteed winning than confirmable tickets\\\");\\n                uniqueCount++;\\n                totalWinning += guaranteedWinning[i];\\n                require(totalWinning <= maxWinning, \\\"Attempted to add too many guaranteed winning tickets\\\");\\n            }\\n        }\\n\\n        require(uniqueCount > 0, \\\"All input addresses have already been added to the launchpad\\\");\\n\\n        state.totalGuaranteedWinningTickets = totalWinning;\\n\\n        emit TicketsAdded(uniqueCount);\\n    }\\n\\n    function tryCreateTickets(address buyer, uint256 nrTickets, uint256 guaranteedWinners) internal returns (bool) {\\n        if (state.ticketRangeForAddress[buyer].lastId != 0) {\\n            return false;\\n        }\\n\\n        uint256 firstTicketId = state.lastTicketId + 1;\\n        uint256 lastTicketId = firstTicketId + nrTickets - 1;\\n\\n        state.ticketRangeForAddress[buyer] = TicketRange({\\n            firstId: firstTicketId,\\n            lastId: lastTicketId,\\n            guaranteedWinners: guaranteedWinners\\n        });\\n\\n        state.ticketBatch[firstTicketId] = TicketBatch({\\n            addr: buyer,\\n            nrTickets: nrTickets\\n        });\\n\\n        state.lastTicketId = lastTicketId;\\n\\n        return true;\\n    }\\n\\n    function claimTicketPayment() public onlyOwner requireClaimPeriod {\\n        require(!state.ownerPaymentClaimed, \\\"Ticket payment + leftover launchpad token refund for owner already claimed\\\");\\n        state.ownerPaymentClaimed = true;\\n\\n        uint256 claimableTicketPayment = state.configuration.claimableTicketPayment;\\n        uint256 extraLaunchpadTokens = 0;\\n\\n        if (claimableTicketPayment > 0 && state.flags.winnersSelected) {\\n            // Transfer ticket payment to owner\\n            if (state.configuration.ticketToken == address(0)) {\\n                (bool sent,) = owner().call{value: claimableTicketPayment}(\\\"\\\");\\n                require(sent, \\\"Failed to send native coin\\\");\\n            } else {\\n                IERC20(state.configuration.ticketToken).transfer(owner(), claimableTicketPayment);\\n            }\\n        }\\n\\n        uint256 launchpadTokensBalance = state.totalLaunchpadTokens;\\n        uint256 numberOfWinningTickets = state.flags.winnersSelected ?\\n            state.configuration.numberOfWinningTickets.value : 0;\\n        uint256 launchpadTokensNeeded = state.configuration.launchpadTokensPerWinningTicket * numberOfWinningTickets;\\n\\n        if (launchpadTokensBalance > launchpadTokensNeeded) {\\n            extraLaunchpadTokens = launchpadTokensBalance - launchpadTokensNeeded;\\n            // Transfer extra launchpad tokens to owner\\n            // Assuming launchpadToken is an ERC20 token\\n            IERC20(state.configuration.launchpadToken).transfer(owner(), extraLaunchpadTokens);\\n        }\\n\\n        emit TicketPaymentClaimed(claimableTicketPayment, extraLaunchpadTokens);\\n    }\\n\\n    function getTotalNumberOfTicketsForAddress(address addr) public view returns (uint256) {\\n        TicketRange memory range = state.ticketRangeForAddress[addr];\\n        if (range.lastId == 0) return 0;\\n        return range.lastId - range.firstId + 1;\\n    }\\n\\n    function getTotalNumberOfTickets() public view returns (uint256) {\\n        return state.lastTicketId;\\n    }\\n\\n    function clearTicketPos(uint256 ticketPos) internal {\\n        delete state.ticketPositionForTicketId[ticketPos];\\n    }\\n\\n    function getTotalConfirmedTickets() public view returns (uint256) {\\n        return state.lastTicketId;\\n    }\\n\\n    function removeWinningTicket(uint256 ticketId) internal {\\n        delete state.winningTickets[ticketId];\\n    }\\n\\n    function setNumberOfConfirmedTickets(address addr, uint256 tickets) internal {\\n        state.confirmedTicketsForAddress[addr] = tickets;\\n    }\\n\\n    function getLastTicketId() public view returns (uint256) {\\n        return state.lastTicketId;\\n    }\\n\\n    function getAddTicketsPeriodEndTime() public view returns (uint256) {\\n        return state.configuration.timeline.confirmationPeriodStartTime;\\n    }\\n\\n    function getWinnerSelectionStartTime() public view returns (uint256) {\\n        return state.configuration.timeline.winnerSelectionStartTime;\\n    }\\n\\n    function getClaimStartTime() public view returns (uint256) {\\n        return state.configuration.timeline.claimStartTime;\\n    }\\n\\n    function numberOfWinningTicketsToUint256(NumberOfWinningTickets memory nwt) internal pure returns (uint256) {\\n        return nwt.value;\\n    }\\n\\n    function clearTickets(address addr) internal {\\n        delete state.confirmedTicketsForAddress[addr];\\n    }\\n}\",\"keccak256\":\"0xfcd8c39c4b3d7b9a3dc3864cf13847122e27a55888ea6a404e4cdb3ea959a4a0\",\"license\":\"MIT\"},\"contracts/UserInteractions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./LaunchpadStorage.sol\\\";\\nimport \\\"./LaunchStage.sol\\\";\\nimport \\\"./Tickets.sol\\\";\\nimport \\\"./WinnerSelection.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract UserInteractions is LaunchpadStorage, Ownable, LaunchStageModule, Tickets, WinnerSelection {\\n    using SafeERC20 for IERC20;\\n\\n     event TicketsConfirmed(address indexed user, uint256 ticketsConfirmed);\\n     event TokensClaimed(address indexed user, uint256 redeemableTickets, uint256 refundedTickets);\\n\\n    function confirmTickets(uint256 nrTicketsToConfirm) payable public requireConfirmationPeriod {\\n        require(state.configuration.launchpadTokensDeposited, \\\"Launchpad tokens not deposited yet\\\");\\n        requireUserIsNotBlacklisted(msg.sender);\\n\\n        uint256 totalTickets = getTotalNumberOfTicketsForAddress(msg.sender);\\n        uint256 nrConfirmed = getNumberOfConfirmedTickets(msg.sender);\\n        uint256 totalConfirmed = nrConfirmed + nrTicketsToConfirm;\\n        require(totalConfirmed <= totalTickets, \\\"Trying to confirm too many tickets\\\");\\n\\n        uint256 ticketPrice = state.configuration.ticketPrice;\\n        uint256 totalPrice = ticketPrice * nrTicketsToConfirm;\\n\\n        // Native token transfer\\n        if (state.configuration.ticketToken == address(0)) {\\n            require(msg.value == totalPrice, \\\"Funds in message should match total required price\\\");\\n        } else {\\n            IERC20(state.configuration.ticketToken).transferFrom(msg.sender, address(this), totalPrice);\\n        }\\n\\n        setNumberOfConfirmedTickets(msg.sender, totalConfirmed);\\n\\n        state.seed = keccak256(bytes.concat(state.seed, keccak256(bytes.concat(bytes32(totalConfirmed)))));\\n\\n        emit TicketsConfirmed(msg.sender, nrTicketsToConfirm);\\n    }\\n\\n    function requireUserIsNotBlacklisted(address user) internal view {\\n        require(!state.blacklist[user], \\\"User is blacklisted and may not confirm tickets\\\");\\n    }\\n\\n    function claimLaunchpadTokens() public requireClaimPeriod {\\n        require(!state.claimList[msg.sender], \\\"Already claimed\\\");\\n\\n        TicketRange memory ticketRange = getTicketRangeForAddress(msg.sender);\\n        uint256 nrConfirmedTickets = ticketRange.guaranteedWinners;\\n        uint256 nrRedeemableTickets = ticketRange.guaranteedWinners;\\n\\n        state.claimList[msg.sender] = true;\\n\\n        if (!state.flags.winnersSelected) {\\n            uint256 confirmed = getNumberOfConfirmedTickets(msg.sender);\\n            uint256 refundAmount = state.configuration.ticketPrice * confirmed;\\n            if (state.configuration.ticketToken == address(0)) {\\n                (bool sent,) = msg.sender.call{value: refundAmount}(\\\"\\\");\\n                require(sent, \\\"Failed to send native coin\\\");\\n            } else {\\n                IERC20(state.configuration.ticketToken).transfer(msg.sender, refundAmount);\\n            }\\n            emit TokensClaimed(msg.sender, 0, confirmed);\\n        } else {\\n            for (uint256 ticketId = ticketRange.firstId; ticketId <= ticketRange.lastId; ticketId++) {\\n                nrConfirmedTickets = nrConfirmedTickets + 1;\\n                if (isWinningTicket(ticketId)) {\\n                    removeWinningTicket(ticketId);\\n                    nrRedeemableTickets = nrRedeemableTickets + 1;\\n                }\\n                clearTicketPos(ticketId);\\n            }\\n\\n            state.numberOfWinningTicketsPerUser[msg.sender] = nrRedeemableTickets;\\n            clearTickets(msg.sender);\\n\\n            uint256 nrTicketsToRefund = nrConfirmedTickets - nrRedeemableTickets;\\n            uint256 ticketPaymentRefundAmount = state.configuration.ticketPrice * nrTicketsToRefund;\\n\\n            if (state.configuration.ticketToken == address(0)) {\\n                (bool sent,) = msg.sender.call{value: ticketPaymentRefundAmount}(\\\"\\\");\\n                require(sent, \\\"Failed to send native coin\\\");\\n            } else {\\n                IERC20(state.configuration.ticketToken).transfer(msg.sender, ticketPaymentRefundAmount);\\n            }\\n\\n            uint256 tokensPerWinningTicket = state.configuration.launchpadTokensPerWinningTicket;\\n            uint256 launchpadTokensAmountToSend = nrRedeemableTickets * tokensPerWinningTicket;\\n\\n            if (launchpadTokensAmountToSend > 0) {\\n                IERC20(state.configuration.launchpadToken).transfer(msg.sender, launchpadTokensAmountToSend);\\n            }\\n\\n            emit TokensClaimed(msg.sender, nrRedeemableTickets, nrTicketsToRefund);\\n        }\\n    }\\n\\n    function hasUserClaimed(address user) public view returns (bool) {\\n        return state.claimList[user];\\n    }\\n}\",\"keccak256\":\"0xd510f33cb8868ba11c0d2944cd58150fdca441a26cbe81595a79a7d19e8f53ad\",\"license\":\"MIT\"},\"contracts/VRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.3;\\n\\nimport \\\"./EllipticCurve.sol\\\";\\n\\n\\n/**\\n * @title Verifiable Random Functions (VRF)\\n * @notice Library verifying VRF proofs using the `Secp256k1` curve and the `SHA256` hash function.\\n * @dev This library follows the algorithms described in [VRF-draft-04](https://tools.ietf.org/pdf/draft-irtf-cfrg-vrf-04) and [RFC6979](https://tools.ietf.org/html/rfc6979).\\n * It supports the _SECP256K1_SHA256_TAI_ cipher suite, i.e. the aforementioned algorithms using `SHA256` and the `Secp256k1` curve.\\n * @author Witnet Foundation\\n */\\nlibrary VRF {\\n\\n    /**\\n     * Secp256k1 parameters\\n     */\\n\\n    // Generator coordinate `x` of the EC curve\\n    uint256 public constant GX = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798;\\n    // Generator coordinate `y` of the EC curve\\n    uint256 public constant GY = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8;\\n    // Constant `a` of EC equation\\n    uint256 public constant AA = 0;\\n    // Constant `b` of EC equation\\n    uint256 public constant BB = 7;\\n    // Prime number of the curve\\n    uint256 public constant PP = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\\n    // Order of the curve\\n    uint256 public constant NN = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\\n\\n    /// @dev Public key derivation from private key.\\n    /// Warning: this function should not be used to derive your public key as it would expose the private key.\\n    /// @param _d The scalar\\n    /// @param _x The coordinate x\\n    /// @param _y The coordinate y\\n    /// @return (qx, qy) The derived point\\n    function derivePoint(uint256 _d, uint256 _x, uint256 _y) internal pure returns (uint256, uint256) {\\n        return EllipticCurve.ecMul(\\n            _d,\\n            _x,\\n            _y,\\n            AA,\\n            PP\\n        );\\n    }\\n\\n    /// @dev Function to derive the `y` coordinate given the `x` coordinate and the parity byte (`0x03` for odd `y` and `0x04` for even `y`).\\n    /// @param _yByte The parity byte following the ec point compressed format\\n    /// @param _x The coordinate `x` of the point\\n    /// @return The coordinate `y` of the point\\n    function deriveY(uint8 _yByte, uint256 _x) internal pure returns (uint256) {\\n        return EllipticCurve.deriveY(\\n            _yByte,\\n            _x,\\n            AA,\\n            BB,\\n            PP);\\n    }\\n\\n    /// @dev Computes the VRF hash output as result of the digest of a ciphersuite-dependent prefix\\n    /// concatenated with the gamma point\\n    /// @param _gammaX The x-coordinate of the gamma EC point\\n    /// @param _gammaY The y-coordinate of the gamma EC point\\n    /// @return The VRF hash ouput as shas256 digest\\n    function gammaToHash(uint256 _gammaX, uint256 _gammaY) internal pure returns (bytes32) {\\n        bytes memory c = abi.encodePacked(\\n        // Cipher suite code (SECP256K1-SHA256-TAI is 0xFE)\\n            uint8(0xFE),\\n            // 0x03\\n            uint8(0x03),\\n            // Compressed Gamma Point\\n            encodePoint(_gammaX, _gammaY));\\n\\n        return sha256(c);\\n    }\\n\\n    /// @dev VRF verification by providing the public key, the message and the VRF proof.\\n    /// This function computes several elliptic curve operations which may lead to extensive gas consumption.\\n    /// @param _publicKey The public key as an array composed of `[pubKey-x, pubKey-y]`\\n    /// @param _proof The VRF proof as an array composed of `[gamma-x, gamma-y, c, s]`\\n    /// @param _message The message (in bytes) used for computing the VRF\\n    /// @return true, if VRF proof is valid\\n    function verify(uint256[2] memory _publicKey, uint256[4] memory _proof, bytes memory _message) internal pure returns (bool) {\\n        // Step 2: Hash to try and increment (outputs a hashed value, a finite EC point in G)\\n        (uint256 hPointX, uint256 hPointY) = hashToTryAndIncrement(_publicKey, _message);\\n\\n        // Step 3: U = s*B - c*Y (where B is the generator)\\n        (uint256 uPointX, uint256 uPointY) = ecMulSubMul(\\n            _proof[3],\\n            GX,\\n            GY,\\n            _proof[2],\\n            _publicKey[0],\\n            _publicKey[1]);\\n\\n        // Step 4: V = s*H - c*Gamma\\n        (uint256 vPointX, uint256 vPointY) = ecMulSubMul(\\n            _proof[3],\\n            hPointX,\\n            hPointY,\\n            _proof[2],\\n            _proof[0],_proof[1]);\\n\\n        // Step 5: derived c from hash points(...)\\n        bytes16 derivedC = hashPoints(\\n            hPointX,\\n            hPointY,\\n            _proof[0],\\n            _proof[1],\\n            uPointX,\\n            uPointY,\\n            vPointX,\\n            vPointY);\\n\\n        // Step 6: Check validity c == c'\\n        return uint128(derivedC) == _proof[2];\\n    }\\n\\n    /// @dev VRF fast verification by providing the public key, the message, the VRF proof and several intermediate elliptic curve points that enable the verification shortcut.\\n    /// This function leverages the EVM's `ecrecover` precompile to verify elliptic curve multiplications by decreasing the security from 32 to 20 bytes.\\n    /// Based on the original idea of Vitalik Buterin: https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n    /// @param _publicKey The public key as an array composed of `[pubKey-x, pubKey-y]`\\n    /// @param _proof The VRF proof as an array composed of `[gamma-x, gamma-y, c, s]`\\n    /// @param _message The message (in bytes) used for computing the VRF\\n    /// @param _uPoint The `u` EC point defined as `U = s*B - c*Y`\\n    /// @param _vComponents The components required to compute `v` as `V = s*H - c*Gamma`\\n    /// @return true, if VRF proof is valid\\n    function fastVerify(\\n        uint256[2] memory _publicKey,\\n        uint256[4] memory _proof,\\n        bytes memory _message,\\n        uint256[2] memory _uPoint,\\n        uint256[4] memory _vComponents)\\n    internal pure returns (bool)\\n    {\\n        // Step 2: Hash to try and increment -> hashed value, a finite EC point in G\\n        (uint256 hPointX, uint256 hPointY) = hashToTryAndIncrement(_publicKey, _message);\\n\\n        // Step 3 & Step 4:\\n        // U = s*B - c*Y (where B is the generator)\\n        // V = s*H - c*Gamma\\n        if (!ecMulSubMulVerify(\\n            _proof[3],\\n            _proof[2],\\n            _publicKey[0],\\n            _publicKey[1],\\n            _uPoint[0],\\n            _uPoint[1]) ||\\n        !ecMulVerify(\\n            _proof[3],\\n            hPointX,\\n            hPointY,\\n            _vComponents[0],\\n            _vComponents[1]) ||\\n        !ecMulVerify(\\n            _proof[2],\\n            _proof[0],\\n            _proof[1],\\n            _vComponents[2],\\n            _vComponents[3])\\n        )\\n        {\\n            return false;\\n        }\\n        (uint256 vPointX, uint256 vPointY) = EllipticCurve.ecSub(\\n            _vComponents[0],\\n            _vComponents[1],\\n            _vComponents[2],\\n            _vComponents[3],\\n            AA,\\n            PP);\\n\\n        // Step 5: derived c from hash points(...)\\n        bytes16 derivedC = hashPoints(\\n            hPointX,\\n            hPointY,\\n            _proof[0],\\n            _proof[1],\\n            _uPoint[0],\\n            _uPoint[1],\\n            vPointX,\\n            vPointY);\\n\\n        // Step 6: Check validity c == c'\\n        return uint128(derivedC) == _proof[2];\\n    }\\n\\n    /// @dev Decode VRF proof from bytes\\n    /// @param _proof The VRF proof as bytes\\n    /// @return The VRF proof as an array composed of `[gamma-x, gamma-y, c, s]`\\n    function decodeProof(bytes memory _proof) internal pure returns (uint[4] memory) {\\n        require(_proof.length == 81, \\\"Malformed VRF proof\\\");\\n        uint8 gammaSign;\\n        uint256 gammaX;\\n        uint128 c;\\n        uint256 s;\\n        assembly {\\n            gammaSign := mload(add(_proof, 1))\\n            gammaX := mload(add(_proof, 33))\\n            c := mload(add(_proof, 49))\\n            s := mload(add(_proof, 81))\\n        }\\n        uint256 gammaY = deriveY(gammaSign, gammaX);\\n\\n        return [\\n            gammaX,\\n            gammaY,\\n            c,\\n            s];\\n    }\\n\\n    /// @dev Decode EC point from bytes\\n    /// @param _point The EC point as bytes\\n    /// @return The point as `[point-x, point-y]`\\n    function decodePoint(bytes memory _point) internal pure returns (uint[2] memory) {\\n        require(_point.length == 33, \\\"Malformed compressed EC point\\\");\\n        uint8 sign;\\n        uint256 x;\\n        assembly {\\n            sign := mload(add(_point, 1))\\n            x := mload(add(_point, 33))\\n        }\\n        uint256 y = deriveY(sign, x);\\n\\n        return [x, y];\\n    }\\n\\n    /// @dev Compute the parameters (EC points) required for the VRF fast verification function.\\n    /// @param _publicKey The public key as an array composed of `[pubKey-x, pubKey-y]`\\n    /// @param _proof The VRF proof as an array composed of `[gamma-x, gamma-y, c, s]`\\n    /// @param _message The message (in bytes) used for computing the VRF\\n    /// @return The fast verify required parameters as the tuple `([uPointX, uPointY], [sHX, sHY, cGammaX, cGammaY])`\\n    function computeFastVerifyParams(uint256[2] memory _publicKey, uint256[4] memory _proof, bytes memory _message)\\n    internal pure returns (uint256[2] memory, uint256[4] memory)\\n    {\\n        // Requirements for Step 3: U = s*B - c*Y (where B is the generator)\\n        (uint256 hPointX, uint256 hPointY) = hashToTryAndIncrement(_publicKey, _message);\\n        (uint256 uPointX, uint256 uPointY) = ecMulSubMul(\\n            _proof[3],\\n            GX,\\n            GY,\\n            _proof[2],\\n            _publicKey[0],\\n            _publicKey[1]);\\n        // Requirements for Step 4: V = s*H - c*Gamma\\n        (uint256 sHX, uint256 sHY) = derivePoint(_proof[3], hPointX, hPointY);\\n        (uint256 cGammaX, uint256 cGammaY) = derivePoint(_proof[2], _proof[0], _proof[1]);\\n\\n        return (\\n            [uPointX, uPointY],\\n            [\\n            sHX,\\n            sHY,\\n            cGammaX,\\n            cGammaY\\n            ]);\\n    }\\n\\n    /// @dev Function to convert a `Hash(PK|DATA)` to a point in the curve as defined in [VRF-draft-04](https://tools.ietf.org/pdf/draft-irtf-cfrg-vrf-04).\\n    /// Used in Step 2 of VRF verification function.\\n    /// @param _publicKey The public key as an array composed of `[pubKey-x, pubKey-y]`\\n    /// @param _message The message used for computing the VRF\\n    /// @return The hash point in affine cooridnates\\n    function hashToTryAndIncrement(uint256[2] memory _publicKey, bytes memory _message) internal pure returns (uint, uint) {\\n        // Step 1: public key to bytes\\n        // Step 2: V = cipher_suite | 0x01 | public_key_bytes | message | ctr\\n        bytes memory c = abi.encodePacked(\\n        // Cipher suite code (SECP256K1-SHA256-TAI is 0xFE)\\n            uint8(254),\\n            // 0x01\\n            uint8(1),\\n            // Public Key\\n            encodePoint(_publicKey[0], _publicKey[1]),\\n            // Message\\n            _message);\\n\\n        // Step 3: find a valid EC point\\n        // Loop over counter ctr starting at 0x00 and do hash\\n        for (uint8 ctr = 0; ctr < 256; ctr++) {\\n            // Counter update\\n            // c[cLength-1] = byte(ctr);\\n            bytes32 sha = sha256(abi.encodePacked(c, ctr));\\n            // Step 4: arbitraty string to point and check if it is on curve\\n            uint hPointX = uint256(sha);\\n            uint hPointY = deriveY(2, hPointX);\\n            if (EllipticCurve.isOnCurve(\\n                hPointX,\\n                hPointY,\\n                AA,\\n                BB,\\n                PP))\\n            {\\n                // Step 5 (omitted): calculate H (cofactor is 1 on secp256k1)\\n                // If H is not \\\"INVALID\\\" and cofactor > 1, set H = cofactor * H\\n                return (hPointX, hPointY);\\n            }\\n        }\\n        revert(\\\"No valid point was found\\\");\\n    }\\n\\n    /// @dev Function to hash a certain set of points as specified in [VRF-draft-04](https://tools.ietf.org/pdf/draft-irtf-cfrg-vrf-04).\\n    /// Used in Step 5 of VRF verification function.\\n    /// @param _hPointX The coordinate `x` of point `H`\\n    /// @param _hPointY The coordinate `y` of point `H`\\n    /// @param _gammaX The coordinate `x` of the point `Gamma`\\n    /// @param _gammaX The coordinate `y` of the point `Gamma`\\n    /// @param _uPointX The coordinate `x` of point `U`\\n    /// @param _uPointY The coordinate `y` of point `U`\\n    /// @param _vPointX The coordinate `x` of point `V`\\n    /// @param _vPointY The coordinate `y` of point `V`\\n    /// @return The first half of the digest of the points using SHA256\\n    function hashPoints(\\n        uint256 _hPointX,\\n        uint256 _hPointY,\\n        uint256 _gammaX,\\n        uint256 _gammaY,\\n        uint256 _uPointX,\\n        uint256 _uPointY,\\n        uint256 _vPointX,\\n        uint256 _vPointY)\\n    internal pure returns (bytes16)\\n    {\\n        bytes memory c = abi.encodePacked(\\n        // Ciphersuite 0xFE\\n            uint8(254),\\n            // Prefix 0x02\\n            uint8(2),\\n            // Points to Bytes\\n            encodePoint(_hPointX, _hPointY),\\n            encodePoint(_gammaX, _gammaY),\\n            encodePoint(_uPointX, _uPointY),\\n            encodePoint(_vPointX, _vPointY)\\n        );\\n        // Hash bytes and truncate\\n        bytes32 sha = sha256(c);\\n        bytes16 half1;\\n        assembly {\\n            let freemem_pointer := mload(0x40)\\n            mstore(add(freemem_pointer,0x00), sha)\\n            half1 := mload(add(freemem_pointer,0x00))\\n        }\\n\\n        return half1;\\n    }\\n\\n    /// @dev Encode an EC point to bytes\\n    /// @param _x The coordinate `x` of the point\\n    /// @param _y The coordinate `y` of the point\\n    /// @return The point coordinates as bytes\\n    function encodePoint(uint256 _x, uint256 _y) internal pure returns (bytes memory) {\\n        uint8 prefix = uint8(2 + (_y % 2));\\n\\n        return abi.encodePacked(prefix, _x);\\n    }\\n\\n    /// @dev Substracts two key derivation functionsas `s1*A - s2*B`.\\n    /// @param _scalar1 The scalar `s1`\\n    /// @param _a1 The `x` coordinate of point `A`\\n    /// @param _a2 The `y` coordinate of point `A`\\n    /// @param _scalar2 The scalar `s2`\\n    /// @param _b1 The `x` coordinate of point `B`\\n    /// @param _b2 The `y` coordinate of point `B`\\n    /// @return The derived point in affine cooridnates\\n    function ecMulSubMul(\\n        uint256 _scalar1,\\n        uint256 _a1,\\n        uint256 _a2,\\n        uint256 _scalar2,\\n        uint256 _b1,\\n        uint256 _b2)\\n    internal pure returns (uint256, uint256)\\n    {\\n        (uint256 m1, uint256 m2) = derivePoint(_scalar1, _a1, _a2);\\n        (uint256 n1, uint256 n2) = derivePoint(_scalar2, _b1, _b2);\\n        (uint256 r1, uint256 r2) = EllipticCurve.ecSub(\\n            m1,\\n            m2,\\n            n1,\\n            n2,\\n            AA,\\n            PP);\\n\\n        return (r1, r2);\\n    }\\n\\n    /// @dev Verify an Elliptic Curve multiplication of the form `(qx,qy) = scalar*(x,y)` by using the precompiled `ecrecover` function.\\n    /// The usage of the precompiled `ecrecover` function decreases the security from 32 to 20 bytes.\\n    /// Based on the original idea of Vitalik Buterin: https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n    /// @param _scalar The scalar of the point multiplication\\n    /// @param _x The coordinate `x` of the point\\n    /// @param _y The coordinate `y` of the point\\n    /// @param _qx The coordinate `x` of the multiplication result\\n    /// @param _qy The coordinate `y` of the multiplication result\\n    /// @return true, if first 20 bytes match\\n    function ecMulVerify(\\n        uint256 _scalar,\\n        uint256 _x,\\n        uint256 _y,\\n        uint256 _qx,\\n        uint256 _qy)\\n    internal pure returns(bool)\\n    {\\n        address result = ecrecover(\\n            0,\\n            _y % 2 != 0 ? 28 : 27,\\n            bytes32(_x),\\n            bytes32(mulmod(_scalar, _x, NN)));\\n\\n        return pointToAddress(_qx, _qy) == result;\\n    }\\n\\n    /// @dev Verify an Elliptic Curve operation of the form `Q = scalar1*(gx,gy) - scalar2*(x,y)` by using the precompiled `ecrecover` function, where `(gx,gy)` is the generator of the EC.\\n    /// The usage of the precompiled `ecrecover` function decreases the security from 32 to 20 bytes.\\n    /// Based on SolCrypto library: https://github.com/HarryR/solcrypto\\n    /// @param _scalar1 The scalar of the multiplication of `(gx,gy)`\\n    /// @param _scalar2 The scalar of the multiplication of `(x,y)`\\n    /// @param _x The coordinate `x` of the point to be mutiply by `scalar2`\\n    /// @param _y The coordinate `y` of the point to be mutiply by `scalar2`\\n    /// @param _qx The coordinate `x` of the equation result\\n    /// @param _qy The coordinate `y` of the equation result\\n    /// @return true, if first 20 bytes match\\n    function ecMulSubMulVerify(\\n        uint256 _scalar1,\\n        uint256 _scalar2,\\n        uint256 _x,\\n        uint256 _y,\\n        uint256 _qx,\\n        uint256 _qy)\\n    internal pure returns(bool)\\n    {\\n        uint256 scalar1 = (NN - _scalar1) % NN;\\n        scalar1 = mulmod(scalar1, _x, NN);\\n        uint256 scalar2 = (NN - _scalar2) % NN;\\n\\n        address result = ecrecover(\\n            bytes32(scalar1),\\n            _y % 2 != 0 ? 28 : 27,\\n            bytes32(_x),\\n            bytes32(mulmod(scalar2, _x, NN)));\\n\\n        return pointToAddress(_qx, _qy) == result;\\n    }\\n\\n    /// @dev Gets the address corresponding to the EC point digest (keccak256), i.e. the first 20 bytes of the digest.\\n    /// This function is used for performing a fast EC multiplication verification.\\n    /// @param _x The coordinate `x` of the point\\n    /// @param _y The coordinate `y` of the point\\n    /// @return The address of the EC point digest (keccak256)\\n    function pointToAddress(uint256 _x, uint256 _y)\\n    internal pure returns(address)\\n    {\\n        return address(uint160(uint256(keccak256(abi.encodePacked(_x, _y))) & 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\n    }\\n}\",\"keccak256\":\"0xe643c99c92449624f2be0f6185525ba217611321112949ab74c3af370c48aef3\",\"license\":\"MIT\"},\"contracts/WinnerSelection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./LaunchpadStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./LaunchStage.sol\\\";\\n\\nabstract contract WinnerSelection is LaunchpadStorage, Ownable, LaunchStageModule  {\\n\\n    event WinnersSelected(uint256 progress, uint256 total);\\n    event TicketsFiltered(uint256 progress, uint256 total);\\n\\n    function selectWinners(uint256 batchSize) public onlyOwner {\\n        require(getLaunchStage() == LaunchStage.WinnerSelection, \\\"Not in winner selection stage\\\");\\n        require(state.flags.wereTicketsFiltered, \\\"Must filter tickets first\\\");\\n        require(!state.flags.winnersSelected, \\\"Winners already selected\\\");\\n        require(state.proof != 0, \\\"Shuffler not initialized\\\");\\n\\n        uint256 totalWinningTickets = state.configuration.numberOfWinningTickets.value;\\n        uint256 shufflableWinningTickets = totalWinningTickets - (state.confirmedGuaranteedTickets);\\n        uint256 lastTicketPosition = state.lastTicketId;\\n\\n        if (state.selectWinnersProgress == 0) {\\n            state.selectWinnersProgress = 1;\\n        }\\n\\n        for (uint256 i = 0; i < batchSize && state.selectWinnersProgress <= shufflableWinningTickets && state.selectWinnersProgress <= lastTicketPosition; i++){\\n            shuffleSingleTicket(state.selectWinnersProgress, lastTicketPosition);\\n            state.selectWinnersProgress = state.selectWinnersProgress + 1;\\n        }\\n\\n        if (state.selectWinnersProgress >= shufflableWinningTickets || state.selectWinnersProgress >= lastTicketPosition) {\\n            state.flags.winnersSelected = true;\\n            uint256 claimableTicketPayment = state.configuration.ticketPrice * (totalWinningTickets);\\n            state.configuration.claimableTicketPayment = claimableTicketPayment;\\n        }\\n\\n        emit WinnersSelected(state.selectWinnersProgress, shufflableWinningTickets);\\n    }\\n\\n     function shuffleSingleTicket(uint256 currentTicketPosition, uint256 lastTicketPosition) private {\\n        uint256 randPos = uint256(keccak256(abi.encodePacked(state.proof, currentTicketPosition))) % (lastTicketPosition - currentTicketPosition + 1) + currentTicketPosition;\\n\\n        uint256 winningTicketId = getTicketIdFromPos(randPos);\\n        uint256 currentTicketId = getTicketIdFromPos(currentTicketPosition);\\n\\n        setTicketPosToId(randPos, currentTicketId);\\n        setTicketPosToId(currentTicketPosition, winningTicketId);\\n        setWinningTicket(winningTicketId);\\n    }\\n\\n    function filterTickets(uint256 batchSize) public onlyOwner {\\n        require(getLaunchStage() == LaunchStage.WinnerSelection, \\\"Not in winner selection stage\\\");\\n        require(!state.flags.wereTicketsFiltered, \\\"Tickets already filtered\\\");\\n\\n        if (state.filterTicketsProgressStart == 0) {\\n            state.filterTicketsProgressStart = 1;\\n        }\\n\\n        uint256 maxTicketId = state.lastTicketId;\\n        uint256 updatedMaxTicketId = maxTicketId + 1;\\n\\n        for (uint256 i = 0; i < batchSize && state.filterTicketsProgressStart <= maxTicketId; i++) {\\n\\n            (address ticketOwner, uint256 ticketsInBatch) = getTicketBatchDetails(state.filterTicketsProgressStart);\\n        \\n            uint256 confirmedTicketCount = getNumberOfConfirmedTickets(ticketOwner);\\n\\n            if (isUserBlacklisted(ticketOwner) || confirmedTicketCount == 0) {\\n                clearTicketDataForAddress(ticketOwner, state.filterTicketsProgressStart);\\n            } else {\\n                uint256 guaranteedWinners = getGuaranteedWinnersForAddress(ticketOwner);\\n                uint256 ticketsToKeep = calculateTicketsToKeep(guaranteedWinners, confirmedTicketCount);\\n\\n                uint256 newFirstTicketId = state.filterTicketsProgressStart - (state.filterTicketsProgressEnd) - (state.confirmedGuaranteedTickets);\\n                uint256 newLastTicketId = newFirstTicketId + (ticketsToKeep) - 1;\\n                updatedMaxTicketId = newLastTicketId;\\n\\n                updateTicketRangeForAddress(ticketOwner, newFirstTicketId, newLastTicketId, guaranteedWinners, confirmedTicketCount);\\n                state.confirmedGuaranteedTickets = state.confirmedGuaranteedTickets + (getTicketRangeForAddress(ticketOwner).guaranteedWinners);\\n                updateTicketBatch(newFirstTicketId, ticketOwner, ticketsToKeep);\\n            }\\n\\n            uint256 removedTicketsInBatch = ticketsInBatch - (confirmedTicketCount);\\n            state.filterTicketsProgressEnd = state.filterTicketsProgressEnd + (removedTicketsInBatch);\\n\\n            state.filterTicketsProgressStart = state.filterTicketsProgressStart + (ticketsInBatch);\\n        }\\n\\n        emit TicketsFiltered(state.filterTicketsProgressStart - 1, maxTicketId);\\n\\n        if (state.filterTicketsProgressStart > maxTicketId) {\\n            updateNumberOfWinningTickets( updatedMaxTicketId + (state.confirmedGuaranteedTickets));\\n            state.lastTicketId = updatedMaxTicketId;\\n            state.flags.wereTicketsFiltered = true;\\n            delete state.filterTicketsProgressStart;\\n            delete state.filterTicketsProgressEnd;\\n        }\\n    }\\n\\n    function getTicketIdFromPos(uint256 ticketPos) public view returns (uint256) {\\n        return state.ticketPositionForTicketId[ticketPos] == 0 ? ticketPos : state.ticketPositionForTicketId[ticketPos];\\n    }\\n\\n    function setTicketPosToId(uint256 ticketPos, uint256 id) internal {\\n        state.ticketPositionForTicketId[ticketPos] = id;\\n    }\\n\\n    function setWinningTicket(uint256 ticketId) internal {\\n        state.winningTickets[ticketId] = true;\\n    }\\n\\n    function getTicketBatchDetails(uint256 batchStartId) private view returns (address, uint256) {\\n        TicketBatch memory batch = state.ticketBatch[batchStartId];\\n        return (batch.addr, batch.nrTickets);\\n    }\\n\\n    function getNumberOfConfirmedTickets(address addr) public view returns (uint256) {\\n        return state.confirmedTicketsForAddress[addr];\\n    }\\n\\n    function isUserBlacklisted(address user) public view returns (bool) {\\n        return state.blacklist[user];\\n    }\\n\\n    function clearTicketDataForAddress(address user, uint256 batchStartId) private {\\n        delete state.ticketRangeForAddress[user];\\n        delete state.ticketBatch[batchStartId];\\n    }\\n\\n    function getGuaranteedWinnersForAddress(address user) private view returns (uint256) {\\n        return state.ticketRangeForAddress[user].guaranteedWinners;\\n    }\\n\\n    function calculateTicketsToKeep(uint256 guaranteedWinners, uint256 confirmedTickets) private pure returns (uint256) {\\n        return guaranteedWinners >= confirmedTickets ? 0 : confirmedTickets - (guaranteedWinners);\\n    }\\n\\n    function updateTicketRangeForAddress(\\n        address user,\\n        uint256 firstId,\\n        uint256 lastId,\\n        uint256 guaranteedWinners,\\n        uint256 totalConfirmedTickets\\n    ) private {\\n        state.ticketRangeForAddress[user] = TicketRange({\\n            firstId: firstId,\\n            lastId: lastId,\\n            guaranteedWinners: guaranteedWinners < totalConfirmedTickets ? guaranteedWinners : totalConfirmedTickets\\n        });\\n    }\\n\\n    function getTicketRangeForAddress(address addr) public view returns (TicketRange memory) {\\n        TicketRange memory range = state.ticketRangeForAddress[addr];\\n        require(range.lastId != 0, \\\"Ticket range not found\\\");\\n        return range;\\n    }\\n\\n    function getNumberOfWinningTicketsForAddress(address user) public view returns (uint256) {\\n        require(state.flags.winnersSelected, \\\"Winners not selected yet\\\");\\n        TicketRange memory range = getTicketRangeForAddress(user);\\n        uint256 winningCount = 0;\\n        for (uint256 ticketId = range.firstId; ticketId <= range.lastId; ticketId++) {\\n            if (isWinningTicket(ticketId)) {\\n                winningCount++;\\n            }\\n        }\\n        return winningCount;\\n    }\\n\\n    function isWinningTicket(uint256 ticketId) public view returns (bool) {\\n        return state.winningTickets[ticketId];\\n    }\\n\\n    function updateTicketBatch(\\n        uint256 batchStartId,\\n        address user,\\n        uint256 nrTickets\\n    ) private {\\n        delete state.ticketBatch[batchStartId];\\n        state.ticketBatch[batchStartId] = TicketBatch({\\n            addr: user,\\n            nrTickets: nrTickets\\n        });\\n    }\\n\\n    function updateNumberOfWinningTickets(uint256 updatedMaxTicketId) private {\\n        uint256 currentWinningTicketCount = state.configuration.numberOfWinningTickets.value;\\n\\n        if (currentWinningTicketCount > updatedMaxTicketId) {\\n            state.configuration.numberOfWinningTickets = NumberOfWinningTickets({\\n                ticketType: NumberOfWinningTicketsType.AfterFiltering,\\n                value: updatedMaxTicketId\\n            });\\n        } else {\\n            state.configuration.numberOfWinningTickets = NumberOfWinningTickets({\\n                ticketType: NumberOfWinningTicketsType.AfterFiltering,\\n                value: currentWinningTicketCount\\n            });\\n        }\\n    }\\n\\n    function getWinningTicketIdsForAddress(address user) public view returns (uint256[] memory) {\\n        require(state.flags.winnersSelected, \\\"Winners not selected yet\\\");\\n\\n        TicketRange memory range = state.ticketRangeForAddress[user];\\n        uint256[] memory winningTickets = new uint256[](range.lastId - range.firstId + 1);\\n        uint256 winningCount = 0;\\n\\n        for (uint256 ticketId = range.firstId; ticketId <= range.lastId; ticketId++) {\\n            if (isWinningTicket(ticketId)) {\\n                winningTickets[winningCount] = ticketId;\\n                winningCount++;\\n            }\\n        }\\n\\n        uint256[] memory filteredWinningTickets = new uint256[](winningCount);\\n        for (uint256 i = 0; i < winningCount; i++) {\\n            filteredWinningTickets[i] = winningTickets[i];\\n        }\\n\\n        return filteredWinningTickets;\\n    }\\n\\n    function getNumberOfWinningPerUser(address addr) public view returns (uint256) {\\n        return state.numberOfWinningTicketsPerUser[addr];\\n    }\\n}\",\"keccak256\":\"0x60a21f77fa3743d2c80abc65d8b1e23549de71186c5896a8cc7531972e143021\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200790338038062007903833981016040819052620000349162001672565b336040518060400160405280600d81526020016c13185d5b98da1c185908139195609a1b815250604051806040016040528060048152602001631313919560e21b8152508160009081620000899190620017cc565b506001620000988282620017cc565b5050506001600160a01b038116620000cb57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b620000d681620003a5565b50600060275583620001515760405162461bcd60e51b815260206004820152603360248201527f4e756d626572206f662077696e6e696e67207469636b657473206d757374206260448201527f652067726561746572207468616e207a65726f000000000000000000000000006064820152608401620000c2565b60006200015e8a620003f7565b90506200016f6022826002620014f2565b506200019e81620001808d62000486565b6040805180820190915260018152600360fc1b602082015262000539565b620001dc5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401620000c2565b604080516101608101825261010081018681526101208201869052610140820185905281526001600160a01b0389811660208084019182528d8316848601908152606085018e8152608086018d81528751808901895260008082528186018f905260a0890182905260c0890181905260e089015287518051600790815595810151600855909801516009559351600a80549187166001600160a01b03199283161790559151600b8054919096169216919091179093559151600c5551600d558251600e805493949293909190829060ff191660018381811115620002c457620002c462001898565b02179055506020918201516001919091015560c083015160098301805460ff191691151591909117905560e090920151600a909101556040805160808101825260008082529281018390529081018290526060018190526006805463ffffffff1916905560125582841080156200033a57508183105b80156200034657504284115b620003945760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642074696d6520706572696f64730000000000000000000000006044820152606401620000c2565b505050505050505050505062001abc565b602680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200040162001535565b8151602114620004545760405162461bcd60e51b815260206004820152601d60248201527f4d616c666f726d656420636f6d7072657373656420454320706f696e740000006044820152606401620000c2565b6001820151602183015160006200046c838362000626565b604080518082019091529283526020830152509392505050565b6200049062001553565b8151605114620004e35760405162461bcd60e51b815260206004820152601360248201527f4d616c666f726d6564205652462070726f6f66000000000000000000000000006044820152606401620000c2565b6001820151602183015160318401516051850151600062000505858562000626565b6040805160808101825295865260208601919091526001600160801b03909316928401929092526060830152509392505050565b6000808062000549868562000647565b6060870151604088015189519395509193506000928392620005b992917f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798917f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8918d60015b6020020151620007c2565b606089015160408a01518a519395509193506000928392620005e39291899189918e6001620005ae565b909250905060006200060987878c8460200201518d60016020020151898989896200081e565b60408b015160809190911c149750505050505050505b9392505050565b60006200063e83838360076401000003d019620008e9565b90505b92915050565b6000808060fe60016200066887846020020151886001602002015162000a3d565b866040516020016200067e9493929190620018ae565b604051602081830303815290604052905060005b6101008160ff1610156200077157600060028383604051602001620006b992919062001905565b60408051601f1981840301815290829052620006d59162001939565b602060405180830381855afa158015620006f3573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062000718919062001957565b90508060006200072a60028362000626565b9050620007438282600060076401000003d01962000a97565b1562000758579095509350620007bb92505050565b5050508080620007689062001987565b91505062000692565b5060405162461bcd60e51b815260206004820152601860248201527f4e6f2076616c696420706f696e742077617320666f756e6400000000000000006044820152606401620000c2565b9250929050565b6000808080620007d48a8a8a62000b69565b9092509050600080620007e989898962000b69565b90925090506000806200080786868686856401000003d01962000b8d565b90985096505050505050505b965096945050505050565b60008060fe6002620008318c8c62000a3d565b6200083d8b8b62000a3d565b620008498a8a62000a3d565b62000855898962000a3d565b6040516020016200086c96959493929190620019a9565b6040516020818303038152906040529050600060028260405162000891919062001939565b602060405180830381855afa158015620008af573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620008d4919062001957565b6040518190529b9a5050505050505050505050565b60008560ff16600214806200090157508560ff166003145b620009695760405162461bcd60e51b815260206004820152603160248201527f456c6c697074696343757276653a696e6e76616c696420636f6d7072657373656044820152700c8408a8640e0ded2dce840e0e4caccd2f607b1b6064820152608401620000c2565b600082806200097c576200097c62001a32565b83806200098d576200098d62001a32565b8585806200099f576200099f62001a32565b888a09088480620009b457620009b462001a32565b8580620009c557620009c562001a32565b898a098909089050620009f4816004620009e186600162001a48565b620009ed919062001a5e565b8562000bc5565b90506000600262000a0960ff8a168462001a48565b62000a15919062001a75565b1562000a2d5762000a27828562001a8c565b62000a2f565b815b925050505b95945050505050565b6060600062000a4e60028462001a75565b62000a5b90600262001a48565b6040516001600160f81b031960f883901b1660208201526021810186905290915060410160405160208183030381529060405291505092915050565b600085158062000aa75750818610155b8062000ab1575084155b8062000abd5750818510155b1562000acc5750600062000a34565b6000828062000adf5762000adf62001a32565b86870990506000838062000af75762000af762001a32565b88858062000b095762000b0962001a32565b8a8b09099050851562000b4057838062000b275762000b2762001a32565b848062000b385762000b3862001a32565b878a09820890505b841562000b5e57838062000b585762000b5862001a32565b85820890505b149695505050505050565b60008062000b81858585846401000003d01962000ca4565b91509150935093915050565b600080808062000b9f88888762000ce1565b909250905062000bb48a8a84848a8a62000cfe565b935093505050965096945050505050565b60008160000362000c195760405162461bcd60e51b815260206004820152601e60248201527f456c6c697074696343757276653a206d6f64756c7573206973207a65726f00006044820152606401620000c2565b8360000362000c2b575060006200061f565b8260000362000c3d575060016200061f565b6001600160ff1b5b801562000c9b57838186161515870a85848509099150836002820486161515870a85848509099150836004820486161515870a85848509099150836008820486161515870a858485090991506010900462000c45565b50949350505050565b60008080808062000cbb8a8a8a60018b8b62000d91565b9194509250905062000cd08383838962000e1e565b945094505050509550959350505050565b600080848362000cf2868262001a8c565b62000b81919062001a75565b6000806000806000888b0362000d5757858062000d1f5762000d1f62001a32565b888b0860000362000d3a576000809450945050505062000813565b62000d4a8b8b60018a8a62000e9a565b9194509250905062000d71565b62000d698b8b60018c8c828c6200107e565b919450925090505b62000d7f8383838962000e1e565b94509450505050965096945050505050565b60008060008860000362000dad57508691508590508462000e12565b8860008060015b831562000e0957600184161562000dde5762000dd68383838f8f8f8e6200107e565b919450925090505b62000deb60028562001a5e565b935062000dfc8c8c8c8c8c62000e9a565b919d509b50995062000db4565b91955093509150505b96509650969350505050565b6000808062000e2e858562001412565b90506000848062000e435762000e4362001a32565b82830990506000858062000e5b5762000e5b62001a32565b828a0990506000868062000e735762000e7362001a32565b878062000e845762000e8462001a32565b8486098a09919a91995090975050505050505050565b60008060008560000362000eb657508691508590508462001073565b6000848062000ec95762000ec962001a32565b898a0990506000858062000ee15762000ee162001a32565b898a0990506000868062000ef95762000ef962001a32565b898a0990506000878062000f115762000f1162001a32565b888062000f225762000f2262001a32565b848e0960040990506000888062000f3d5762000f3d62001a32565b898062000f4e5762000f4e62001a32565b8a8062000f5f5762000f5f62001a32565b8586098c098a8062000f755762000f7562001a32565b87600309089050888062000f8d5762000f8d62001a32565b898062000f9e5762000f9e62001a32565b83840862000fad908b62001a8c565b8a8062000fbe5762000fbe62001a32565b838409089450888062000fd55762000fd562001a32565b898062000fe65762000fe662001a32565b8a8062000ff75762000ff762001a32565b86870960080962001009908b62001a8c565b8a806200101a576200101a62001a32565b8b806200102b576200102b62001a32565b62001037898e62001a8c565b8608840908935088806200104f576200104f62001a32565b898062001060576200106062001a32565b8c8e096002099497509295509293505050505b955095509592505050565b60008080891580156200108f575088155b15620010a357508591508490508362001405565b86158015620010b0575085155b15620010c457508891508790508662001405565b620010ce62001553565b8480620010df57620010df62001a32565b898a0981528480620010f557620010f562001a32565b81518a09602082015284806200110f576200110f62001a32565b8687096040820152848062001128576200112862001a32565b604082015187096060820152604080516080810190915280868062001151576200115162001a32565b60408401518e09815260200186806200116e576200116e62001a32565b60608401518d09815260200186806200118b576200118b62001a32565b83518b0981526020018680620011a557620011a562001a32565b60208401518a09905260408101518151919250141580620011ce57506060810151602082015114155b6200121c5760405162461bcd60e51b815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e737465616400006044820152606401620000c2565b6200122662001553565b858062001237576200123762001a32565b825162001245908862001a8c565b604084015108815285806200125e576200125e62001a32565b60208301516200126f908862001a8c565b606084015108602082015285806200128b576200128b62001a32565b8151800960408201528580620012a557620012a562001a32565b8151604083015109606082015260008680620012c557620012c562001a32565b6060830151620012d6908962001a8c565b8880620012e757620012e762001a32565b60208501518009089050868062001302576200130262001a32565b878062001313576200131362001a32565b888062001324576200132462001a32565b60408501518651096002096200133b908962001a8c565b820890506000878062001352576200135262001a32565b888062001363576200136362001a32565b6200136f848b62001a8c565b8a8062001380576200138062001a32565b60408701518851090860208501510990508780620013a257620013a262001a32565b8880620013b357620013b362001a32565b6060850151602087015109620013ca908a62001a8c565b8208905060008880620013e157620013e162001a32565b8980620013f257620013f262001a32565b8b8f098551099297509095509093505050505b9750975097945050505050565b60008215801590620014245750818314155b80156200143057508115155b6200146f5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210373ab6b132b960911b6044820152606401620000c2565b6000600183825b8615620014e75762001489878362001a5e565b90508286806200149d576200149d62001a32565b8780620014ae57620014ae62001a32565b858409620014bd908962001a8c565b8608909450925086620014d1818362001aa2565b620014dd908462001a8c565b9750915062001476565b509195945050505050565b826002810192821562001523579160200282015b828111156200152357825182559160200191906001019062001506565b506200153192915062001571565b5090565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b5b8082111562001531576000815560010162001572565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620015bb578181015183820152602001620015a1565b50506000910152565b600082601f830112620015d657600080fd5b81516001600160401b0380821115620015f357620015f362001588565b604051601f8301601f19908116603f011681019082821181831017156200161e576200161e62001588565b816040528381528660208588010111156200163857600080fd5b6200164b8460208301602089016200159e565b9695505050505050565b80516001600160a01b03811681146200166d57600080fd5b919050565b6000806000806000806000806000806101408b8d0312156200169357600080fd5b8a516001600160401b0380821115620016ab57600080fd5b620016b98e838f01620015c4565b9b5060208d0151915080821115620016d057600080fd5b50620016df8d828e01620015c4565b995050620016f060408c0162001655565b975060608b015196506200170760808c0162001655565b955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015190509295989b9194979a5092959850565b600181811c908216806200175257607f821691505b6020821081036200177357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620017c757600081815260208120601f850160051c81016020861015620017a25750805b601f850160051c820191505b81811015620017c357828155600101620017ae565b5050505b505050565b81516001600160401b03811115620017e857620017e862001588565b6200180081620017f984546200173d565b8462001779565b602080601f8311600181146200183857600084156200181f5750858301515b600019600386901b1c1916600185901b178555620017c3565b600085815260208120601f198616915b82811015620018695788860151825594840194600190910190840162001848565b5085821015620018885787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052602160045260246000fd5b600060ff60f81b808760f81b168352808660f81b166001840152508351620018de8160028501602088016200159e565b835190830190620018f78160028401602088016200159e565b016002019695505050505050565b60008351620019198184602088016200159e565b60f89390931b6001600160f81b0319169190920190815260010192915050565b600082516200194d8184602087016200159e565b9190910192915050565b6000602082840312156200196a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8103620019a057620019a062001971565b60010192915050565b600060ff60f81b808960f81b168352808860f81b166001840152508551620019d9816002850160208a016200159e565b855190830190620019f2816002840160208a016200159e565b855191019062001a0a8160028401602089016200159e565b845191019062001a228160028401602088016200159e565b0160020198975050505050505050565b634e487b7160e01b600052601260045260246000fd5b8082018082111562000641576200064162001971565b60008262001a705762001a7062001a32565b500490565b60008262001a875762001a8762001a32565b500690565b8181038181111562000641576200064162001971565b808202811582820484141762000641576200064162001971565b615e378062001acc6000396000f3fe6080604052600436106103c35760003560e01c80636ee7f70b116101f2578063a84927e81161010d578063cb580080116100a0578063ebbba9171161006f578063ebbba91714610bdb578063f2fde38b14610bfb578063f8b3df2314610c1b578063fa7c2d6614610c3b57600080fd5b8063cb58008014610b56578063ce8f6e2114610b76578063d84e29ea14610b8b578063e985e9c514610bbb57600080fd5b8063c66cfe1f116100dc578063c66cfe1f14610ac0578063c7fdc35814610ae0578063c87b56dd14610b16578063c9df5e6614610b3657600080fd5b8063a84927e814610a01578063b4a768d614610a23578063b7fc83f814610a8b578063b88d4fde14610aa057600080fd5b80638da5cb5b11610185578063a195b69c11610154578063a195b69c146108ba578063a22cb465146108f2578063a323f7fe14610912578063a5594ae51461094857600080fd5b80638da5cb5b1461086957806395d89b411461088757806397bf7c0b1461089c578063a10f60de1461068c57600080fd5b80637d3d6ee5116101c15780637d3d6ee5146107fd578063812083211461081257806382781aba1461082757806387bb7ae01461085457600080fd5b80636ee7f70b1461079e57806370a08231146107b3578063715018a6146107d357806372e67df3146107e857600080fd5b80633cfad83d116102e25780634c14b770116102755780635de38ce1116102445780635de38ce1146107345780636352211e146107545780636be7410b146107745780636e02007d1461078957600080fd5b80634c14b770146106a1578063503b8e81146106b957806358ddfca9146106f25780635ae2afa41461071f57600080fd5b806342842e0e116102b157806342842e0e1461064c578063450e9dec1461066c57806347503d6b1461068c5780634b7938991461068c57600080fd5b80633cfad83d146105d55780633dc060de146105ea5780633fa1e1291461060a57806340bb2fee1461062a57600080fd5b806322b692de1161035a57806325bf76ca1161032957806325bf76ca146105605780632dec60ce1461058057806331cb1304146105a057806339a2eb2a146105b557600080fd5b806322b692de146104eb5780632325cc721461050b57806323b872dd146105205780632533a5f61461054057600080fd5b8063095ea7b311610396578063095ea7b31461047957806315981650146104995780631739a7b0146104b95780631ad280d3146104d857600080fd5b806301ffc9a7146103c857806305659ac6146103fd57806306fdde031461041f578063081812fc14610441575b600080fd5b3480156103d457600080fd5b506103e86103e33660046153d8565b610c5b565b60405190151581526020015b60405180910390f35b34801561040957600080fd5b5061041d610418366004615549565b610cad565b005b34801561042b57600080fd5b50610434610feb565b6040516103f49190615621565b34801561044d57600080fd5b5061046161045c366004615634565b61107d565b6040516001600160a01b0390911681526020016103f4565b34801561048557600080fd5b5061041d61049436600461564d565b6110a6565b3480156104a557600080fd5b5061041d6104b4366004615634565b6110b5565b3480156104c557600080fd5b506011545b6040519081526020016103f4565b61041d6104e6366004615634565b6111a4565b3480156104f757600080fd5b5061041d610506366004615634565b6114b0565b34801561051757600080fd5b5061041d611821565b34801561052c57600080fd5b5061041d61053b366004615677565b611b9b565b34801561054c57600080fd5b5061041d61055b366004615634565b611c26565b34801561056c57600080fd5b5061041d61057b3660046156b3565b611cda565b34801561058c57600080fd5b5061041d61059b366004615634565b611dfe565b3480156105ac57600080fd5b506008546104ca565b3480156105c157600080fd5b5061041d6105d0366004615634565b611f06565b3480156105e157600080fd5b5061043461217b565b3480156105f657600080fd5b5061041d6106053660046156b3565b61218f565b34801561061657600080fd5b5061041d610625366004615634565b6122aa565b34801561063657600080fd5b5061063f61239a565b6040516103f491906156fe565b34801561065857600080fd5b5061041d610667366004615677565b6123f6565b34801561067857600080fd5b5061041d610687366004615729565b612411565b34801561069857600080fd5b506012546104ca565b3480156106ad57600080fd5b5060105460ff166103e8565b3480156106c557600080fd5b506103e86106d4366004615729565b6001600160a01b03166000908152601b602052604090205460ff1690565b3480156106fe57600080fd5b5061071261070d366004615729565b6124f2565b6040516103f49190615744565b34801561072b57600080fd5b5061041d61259c565b34801561074057600080fd5b5061041d61074f366004615729565b61273f565b34801561076057600080fd5b5061046161076f366004615634565b612820565b34801561078057600080fd5b5061041d61282b565b34801561079557600080fd5b506027546104ca565b3480156107aa57600080fd5b5061041d612cfe565b3480156107bf57600080fd5b506104ca6107ce366004615729565b612d1b565b3480156107df57600080fd5b5061041d612d63565b3480156107f457600080fd5b506009546104ca565b34801561080957600080fd5b50610712612d77565b34801561081e57600080fd5b50600c546104ca565b34801561083357600080fd5b50610847610842366004615729565b612dc0565b6040516103f49190615765565b34801561086057600080fd5b506104ca612f94565b34801561087557600080fd5b506026546001600160a01b0316610461565b34801561089357600080fd5b50610434612fe6565b3480156108a857600080fd5b50600b546001600160a01b0316610461565b3480156108c657600080fd5b506103e86108d5366004615729565b6001600160a01b0316600090815260208052604090205460ff1690565b3480156108fe57600080fd5b5061041d61090d3660046157b7565b612ff5565b34801561091e57600080fd5b506104ca61092d366004615729565b6001600160a01b031660009081526019602052604090205490565b34801561095457600080fd5b506109c6604080516080810182526000808252602082018190529181018290526060810191909152506040805160808101825260065460ff8082161515835261010082048116151560208401526201000082048116151593830193909352630100000090049091161515606082015290565b6040516103f4919081511515815260208083015115159082015260408083015115159082015260609182015115159181019190915260800190565b348015610a0d57600080fd5b50610a16613000565b6040516103f491906157ee565b348015610a2f57600080fd5b50610a7c610a3e366004615729565b60408051602080820183526000918290526001600160a01b039390931681526029835281812054815260288352819020815192830190915254815290565b604051905181526020016103f4565b348015610a9757600080fd5b506007546104ca565b348015610aac57600080fd5b5061041d610abb366004615878565b61306b565b348015610acc57600080fd5b506104ca610adb366004615634565b613082565b348015610aec57600080fd5b506104ca610afb366004615729565b6001600160a01b031660009081526021602052604090205490565b348015610b2257600080fd5b50610434610b31366004615634565b6130ae565b348015610b4257600080fd5b5061041d610b51366004615634565b613123565b348015610b6257600080fd5b5061041d610b71366004615634565b613171565b348015610b8257600080fd5b5061041d61321e565b348015610b9757600080fd5b506103e8610ba6366004615634565b60009081526014602052604090205460ff1690565b348015610bc757600080fd5b506103e8610bd63660046158e0565b61326c565b348015610be757600080fd5b5061041d610bf6366004615913565b61329a565b348015610c0757600080fd5b5061041d610c16366004615729565b6133b4565b348015610c2757600080fd5b506104ca610c36366004615729565b6133ef565b348015610c4757600080fd5b506104ca610c56366004615729565b61345a565b60006001600160e01b031982166380ac58cd60e01b1480610c8c57506001600160e01b03198216635b5e139f60e01b145b80610ca757506301ffc9a760e01b6001600160e01b03198316145b92915050565b610cb56134e3565b6000610cbf613000565b90506002816003811115610cd557610cd56156e8565b10610cfb5760405162461bcd60e51b8152600401610cf290615948565b60405180910390fd5b82518451148015610d0d575081518451145b610d685760405162461bcd60e51b815260206004820152602660248201527f496e70757420617272617973206d7573742068617665207468652073616d65206044820152650d8cadccee8d60d31b6064820152608401610cf2565b601c54600f5460009190825b8751811015610f3357610dd3888281518110610d9257610d9261597f565b6020026020010151888381518110610dac57610dac61597f565b6020026020010151888481518110610dc657610dc661597f565b6020026020010151613510565b15610f2157858181518110610dea57610dea61597f565b6020026020010151878281518110610e0457610e0461597f565b60200260200101511015610e805760405162461bcd60e51b815260206004820152603a60248201527f43616e277420616464206d6f72652067756172616e746565642077696e6e696e60448201527f67207468616e20636f6e6669726d61626c65207469636b6574730000000000006064820152608401610cf2565b83610e8a816159ab565b945050858181518110610e9f57610e9f61597f565b602002602001015183610eb291906159c4565b925081831115610f215760405162461bcd60e51b815260206004820152603460248201527f417474656d7074656420746f2061646420746f6f206d616e792067756172616e604482015273746565642077696e6e696e67207469636b65747360601b6064820152608401610cf2565b80610f2b816159ab565b915050610d74565b5060008311610faa5760405162461bcd60e51b815260206004820152603c60248201527f416c6c20696e70757420616464726573736573206861766520616c726561647960448201527f206265656e20616464656420746f20746865206c61756e6368706164000000006064820152608401610cf2565b601c8290556040518381527fa96c43b66e9035fa672b1b5d01047f92e890df0425b9727356d569ec2a36dd2d9060200160405180910390a150505050505050565b606060008054610ffa906159d7565b80601f0160208091040260200160405190810160405280929190818152602001828054611026906159d7565b80156110735780601f1061104857610100808354040283529160200191611073565b820191906000526020600020905b81548152906001019060200180831161105657829003601f168201915b5050505050905090565b6000611088826135f4565b506000828152600460205260409020546001600160a01b0316610ca7565b6110b182823361362d565b5050565b6110bd6134e3565b60006110c7613000565b905060008160038111156110dd576110dd6156e8565b146110fa5760405162461bcd60e51b8152600401610cf290615948565b600082116111555760405162461bcd60e51b815260206004820152602260248201527f5469636b6574207072696365206d75737420626520686967686572207468616e604482015261020360f41b6064820152608401610cf2565b600d829055600a54604080518481526001600160a01b0390921660208301527f357db995b6ab6dd8d40e6f99176fe1e58b28e0bd44a18fa17da37762b360dab791015b60405180910390a15050565b60006111ae613000565b905060018160038111156111c4576111c46156e8565b146112115760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420696e20636f6e6669726d6174696f6e20706572696f640000000000006044820152606401610cf2565b60105460ff1661126e5760405162461bcd60e51b815260206004820152602260248201527f4c61756e636870616420746f6b656e73206e6f74206465706f73697465642079604482015261195d60f21b6064820152608401610cf2565b6112773361363a565b6000611282336133ef565b3360009081526019602052604081205491925061129f85836159c4565b9050828111156112fc5760405162461bcd60e51b815260206004820152602260248201527f547279696e6720746f20636f6e6669726d20746f6f206d616e79207469636b65604482015261747360f01b6064820152608401610cf2565b600d54600061130b8783615a11565b600a549091506001600160a01b031661138d578034146113885760405162461bcd60e51b815260206004820152603260248201527f46756e647320696e206d6573736167652073686f756c64206d6174636820746f60448201527174616c20726571756972656420707269636560701b6064820152608401610cf2565b61140a565b600a546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156113e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114089190615a28565b505b3360009081526019602052604090208390556024546040805160208101869052016040516020818303038152906040528051906020012060405160200161145b929190918252602082015260400190565b60408051808303601f1901815290829052805160209182012060245588825233917f63fd54a53d90b47a3d21890ce80385ea5c8f4d19e14828194fea1c7b98ccd411910160405180910390a250505050505050565b6114b86134e3565b60026114c2613000565b60038111156114d3576114d36156e8565b146115205760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420696e2077696e6e65722073656c656374696f6e2073746167650000006044820152606401610cf2565b600654610100900460ff16156115785760405162461bcd60e51b815260206004820152601860248201527f5469636b65747320616c72656164792066696c746572656400000000000000006044820152606401610cf2565b601e54600003611588576001601e555b60125460006115988260016159c4565b905060005b83811080156115ae5750601e548310155b1561179457601e5460009081526017602090815260408083208151808301835281546001600160a01b03168082526001909201549084018190528185526019845282852054601b909452919093205490919060ff168061160c575080155b1561166357601e546001600160a01b0384166000908152601860209081526040808320838155600180820185905560029091018490559383526017909152812080546001600160a01b03191681559091015561174a565b6001600160a01b0383166000908152601860205260408120600201549061168a82846136bb565b601554601f54601e549293506000926116a39190615a45565b6116ad9190615a45565b9050600060016116bd84846159c4565b6116c79190615a45565b90508098506116d987838387896136dd565b6116e2876124f2565b604001516015546116f391906159c4565b601555506000818152601760208181526040808420805482518084019093526001600160a01b038c811684528385019889529690955292909152519092166001600160a01b03199091161781559051600190910155505b60006117568284615a45565b601f549091506117679082906159c4565b601f55601e546117789084906159c4565b601e555083925061178c91508290506159ab565b91505061159d565b50601e547f43083f57768127ccb9784144c4a44c74633323c3671de57a9cdb0f0caee6f760906117c690600190615a45565b60408051918252602082018590520160405180910390a1601e5482101561181c576015546117fd906117f890836159c4565b613741565b60128190556006805461ff0019166101001790556000601e819055601f555b505050565b6118296134e3565b6000611833613000565b90506003816003811115611849576118496156e8565b146118665760405162461bcd60e51b8152600401610cf290615a58565b60065462010000900460ff1661188e5760405162461bcd60e51b8152600401610cf290615a85565b60165460ff161561191a5760405162461bcd60e51b815260206004820152604a60248201527f5469636b6574207061796d656e74202b206c6566746f766572206c61756e636860448201527f70616420746f6b656e20726566756e6420666f72206f776e657220616c726561606482015269191e4818db185a5b595960b21b608482015260a401610cf2565b6016805460ff1916600117905560115460008115801590611943575060065462010000900460ff165b15611a7857600a546001600160a01b03166119e257600061196c6026546001600160a01b031690565b6001600160a01b03168360405160006040518083038185875af1925050503d80600081146119b6576040519150601f19603f3d011682016040523d82523d6000602084013e6119bb565b606091505b50509050806119dc5760405162461bcd60e51b8152600401610cf290615abc565b50611a78565b600a546001600160a01b031663a9059cbb611a056026546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015611a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a769190615a28565b505b60135460065460009062010000900460ff16611a95576000611a99565b600f545b600c54909150600090611aad908390615a11565b905080831115611b5a57611ac18184615a45565b600b549094506001600160a01b031663a9059cbb611ae76026546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018790526044016020604051808303816000875af1158015611b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b589190615a28565b505b60408051868152602081018690527f56401aa3ba50e689e155123b2cb3f3874d522f85bb6313d489eacd59b45ba257910160405180910390a1505050505050565b6001600160a01b038216611bc557604051633250574960e11b815260006004820152602401610cf2565b6000611bd28383336137b2565b9050836001600160a01b0316816001600160a01b031614611c20576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610cf2565b50505050565b611c2e6134e3565b428111611c4d5760405162461bcd60e51b8152600401610cf290615af3565b6008548111611c9e5760405162461bcd60e51b815260206004820152601e60248201527f4d7573742062652061667465722077696e6e65722073656c656374696f6e00006044820152606401610cf2565b60098190556040518181527f9a117d50db495b8e5b6defa7f392b1b49b14632c64e0187edc7d487038007b6a906020015b60405180910390a150565b611ce26134e3565b6002611cec613000565b6003811115611cfd57611cfd6156e8565b10611d1a5760405162461bcd60e51b8152600401610cf290615b37565b6000815111611d675760405162461bcd60e51b815260206004820152601960248201527855736572206c6973742063616e6e6f7420626520656d70747960381b6044820152606401610cf2565b60005b8151811015611dce576000828281518110611d8757611d8761597f565b60200260200101519050611d9a816138ab565b6001600160a01b03166000908152601b60205260409020805460ff1916600117905580611dc6816159ab565b915050611d6a565b507fb0acc561764f1521c892494310b184e20cafc08c4d047edaeeed1b55af37fe3081604051611ccf9190615b7b565b611e066134e3565b428111611e255760405162461bcd60e51b8152600401610cf290615af3565b6007548111611e805760405162461bcd60e51b815260206004820152602160248201527f4d75737420626520616674657220636f6e6669726d6174696f6e20706572696f6044820152601960fa1b6064820152608401610cf2565b6009548110611ed15760405162461bcd60e51b815260206004820152601b60248201527f4d757374206265206265666f726520636c61696d20706572696f6400000000006044820152606401610cf2565b60088190556040518181527fc69fad2af0fd3e7e6beeca22b6f052bebe69572031465b2dadd31dba59688b3d90602001611ccf565b611f0e6134e3565b6002611f18613000565b6003811115611f2957611f296156e8565b14611f765760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420696e2077696e6e65722073656c656374696f6e2073746167650000006044820152606401610cf2565b600654610100900460ff16611fcd5760405162461bcd60e51b815260206004820152601960248201527f4d7573742066696c746572207469636b657473206669727374000000000000006044820152606401610cf2565b60065462010000900460ff16156120265760405162461bcd60e51b815260206004820152601860248201527f57696e6e65727320616c72656164792073656c656374656400000000000000006044820152606401610cf2565b6025546000036120785760405162461bcd60e51b815260206004820152601860248201527f53687566666c6572206e6f7420696e697469616c697a656400000000000000006044820152606401610cf2565b600f5460155460009061208b9083615a45565b601254601d54919250906000036120a2576001601d555b60005b84811080156120b65750601d548310155b80156120c45750601d548210155b156120f957601d546120d690836139e9565b601d546120e49060016159c4565b601d55806120f1816159ab565b9150506120a5565b50601d548211158061210d5750601d548111155b15612139576006805462ff0000191662010000179055600d54600090612134908590615a11565b601155505b601d5460408051918252602082018490527f207af04099d653c834032f132e688b489f38f79daeb66bb678ecfa801ea5d046910160405180910390a150505050565b60245460609061218a90613a9b565b905090565b6121976134e3565b60026121a1613000565b60038111156121b2576121b26156e8565b106121cf5760405162461bcd60e51b8152600401610cf290615b37565b600081511161221c5760405162461bcd60e51b815260206004820152601960248201527855736572206c6973742063616e6e6f7420626520656d70747960381b6044820152606401610cf2565b60005b815181101561227a57600082828151811061223c5761223c61597f565b6020908102919091018101516001600160a01b03166000908152601b90915260409020805460ff191690555080612272816159ab565b91505061221f565b507f0d90ea9b5e05e27044df05bdbc6e16c9e075b7c9aa2e82b3f164909fce0aa96f81604051611ccf9190615b7b565b6122b26134e3565b60006122bc613000565b905060008160038111156122d2576122d26156e8565b146122ef5760405162461bcd60e51b8152600401610cf290615948565b600082116123655760405162461bcd60e51b815260206004820152603960248201527f4c61756e636870616420746f6b656e73207065722077696e6e696e672074696360448201527f6b65742063616e6e6f742062652073657420746f207a65726f000000000000006064820152608401610cf2565b600c8290556040518281527f71a23193f99964042d171de9a10b99aa086546ce2b80f3613d18ea27f09554cf90602001611198565b604080518082019091526000808252602082015260408051808201909152600e8054829060ff1660018111156123d2576123d26156e8565b60018111156123e3576123e36156e8565b8152602001600182015481525050905090565b61181c8383836040518060200160405280600081525061306b565b6124196134e3565b6000612423613000565b90506000816003811115612439576124396156e8565b146124565760405162461bcd60e51b8152600401610cf290615948565b6001600160a01b0382166124a45760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606401610cf2565b600a80546001600160a01b0319166001600160a01b0384169081179091556040519081527f4f920c46ca85a648f9179bdcbe4a821d507a0d03946e947c70fb47e943b66df090602001611198565b61251660405180606001604052806000815260200160008152602001600081525090565b6001600160a01b03821660009081526018602090815260408083208151606081018352815481526001820154938101849052600290910154918101919091529103610ca75760405162461bcd60e51b8152602060048201526016602482015275151a58dad95d081c985b99d9481b9bdd08199bdd5b9960521b6044820152606401610cf2565b60006125a6613000565b905060038160038111156125bc576125bc6156e8565b146125d95760405162461bcd60e51b8152600401610cf290615a58565b60065462010000900460ff166126015760405162461bcd60e51b8152600401610cf290615a85565b6006546301000000900460ff1661265a5760405162461bcd60e51b815260206004820152601c60248201527f4e4654206c61756e6368706164206973206e6f7420656e61626c6564000000006044820152606401610cf2565b33600090815260208052604090205460ff166126b15760405162461bcd60e51b8152602060048201526016602482015275151bdad95b9cc81b9bdd0818db185a5b5959081e595d60521b6044820152606401610cf2565b6027546126be3382613b2e565b3360009081526021602090815260408083205481518084018352818152858552602890935290832091519091556027805491926126fa836159ab565b91905055507f72102923c3d44433bd725cb2c744a4c92a536ad249b665dec9853a16ed66552560275460405161273291815260200190565b60405180910390a1505050565b6127476134e3565b6000612751613000565b90506000816003811115612767576127676156e8565b146127845760405162461bcd60e51b8152600401610cf290615948565b6001600160a01b0382166127d25760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606401610cf2565b600b80546001600160a01b0319166001600160a01b0384169081179091556040519081527f4dad0a7d97f7c80daf6bb308fc186f377387cce7ce977504a4f4d83ce7afd1a990602001611198565b6000610ca7826135f4565b6000612835613000565b9050600381600381111561284b5761284b6156e8565b146128685760405162461bcd60e51b8152600401610cf290615a58565b60065462010000900460ff166128905760405162461bcd60e51b8152600401610cf290615a85565b33600090815260208052604090205460ff16156128e15760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b6044820152606401610cf2565b60006128ec336124f2565b6040808201513360009081526020805291909120805460ff1916600117905560065491925090819062010000900460ff16612a7d5733600090815260196020526040812054600d54909190612942908390615a11565b600a549091506001600160a01b03166129c357604051600090339083908381818185875af1925050503d8060008114612997576040519150601f19603f3d011682016040523d82523d6000602084013e61299c565b606091505b50509050806129bd5760405162461bcd60e51b8152600401610cf290615abc565b50612a3a565b600a5460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015612a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a389190615a28565b505b60408051600081526020810184905233917f9923b4306c6c030f2bdfbf156517d5983b87e15b96176da122cd4f2effa4ba7b910160405180910390a25050611c20565b82515b83602001518111612af557612a968360016159c4565b60008281526014602052604090205490935060ff1615612ad4576000818152601460205260409020805460ff19169055612ad18260016159c4565b91505b6000818152601a602052604081205580612aed816159ab565b915050612a80565b5033600090815260216020908152604080832084905560199091528120556000612b1f8284615a45565b600d54909150600090612b33908390615a11565b600a549091506001600160a01b0316612bb457604051600090339083908381818185875af1925050503d8060008114612b88576040519150601f19603f3d011682016040523d82523d6000602084013e612b8d565b606091505b5050905080612bae5760405162461bcd60e51b8152600401610cf290615abc565b50612c2b565b600a5460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015612c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c299190615a28565b505b600c546000612c3a8286615a11565b90508015612cb957600b5460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015612c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb79190615a28565b505b604080518681526020810186905233917f9923b4306c6c030f2bdfbf156517d5983b87e15b96176da122cd4f2effa4ba7b910160405180910390a25050505050505050565b612d066134e3565b6006805463ff00000019166301000000179055565b60006001600160a01b038216612d47576040516322718ad960e21b815260006004820152602401610cf2565b506001600160a01b031660009081526003602052604090205490565b612d6b6134e3565b612d756000613b48565b565b612d9b60405180606001604052806000815260200160008152602001600081525090565b5060408051606081018252600754815260085460208201526009549181019190915290565b60065460609062010000900460ff16612deb5760405162461bcd60e51b8152600401610cf290615a85565b6001600160a01b038216600090815260186020908152604080832081516060810183528154808252600183015494820185905260029092015492810192909252909291612e389190615a45565b612e439060016159c4565b67ffffffffffffffff811115612e5b57612e5b6153f5565b604051908082528060200260200182016040528015612e84578160200160208202803683370190505b5082519091506000905b83602001518111612eee5760008181526014602052604090205460ff1615612edc5780838381518110612ec357612ec361597f565b602090810291909101015281612ed8816159ab565b9250505b80612ee6816159ab565b915050612e8e565b5060008167ffffffffffffffff811115612f0a57612f0a6153f5565b604051908082528060200260200182016040528015612f33578160200160208202803683370190505b50905060005b82811015612f8a57838181518110612f5357612f5361597f565b6020026020010151828281518110612f6d57612f6d61597f565b602090810291909101015280612f82816159ab565b915050612f39565b5095945050505050565b600d546000908103612fdf5760405162461bcd60e51b8152602060048201526014602482015273151a58dad95d081c1c9a58d9481b9bdd081cd95d60621b6044820152606401610cf2565b50600d5490565b606060018054610ffa906159d7565b6110b1338383613b9a565b604080516060810182526007548082526008546020830152600954928201929092526000914291908210156130385760009250505090565b806020015182101561304d5760019250505090565b80604001518210156130625760029250505090565b60039250505090565b613076848484611b9b565b611c2084848484613c39565b6000818152601a6020526040812054156130aa576000828152601a6020526040902054610ca7565b5090565b60606130b9826135f4565b5060006130d160408051602081019091526000815290565b905060008151116130f1576040518060200160405280600081525061311c565b806130fb84613a9b565b60405160200161310c929190615bbc565b6040516020818303038152906040525b9392505050565b61312b6134e3565b6002613135613000565b6003811115613146576131466156e8565b106131635760405162461bcd60e51b8152600401610cf290615b37565b61316e816001613d5b565b50565b6131796134e3565b4281116131985760405162461bcd60e51b8152600401610cf290615af3565b60085481106131e95760405162461bcd60e51b815260206004820152601f60248201527f4d757374206265206265666f72652077696e6e65722073656c656374696f6e006044820152606401610cf2565b60078190556040518181527f9f4130f810db3f8b8c3d3e9f0a1c82df83c082f10c2149d3b531773cd911e12090602001611ccf565b6132266134e3565b6002613230613000565b6003811115613241576132416156e8565b1061325e5760405162461bcd60e51b8152600401610cf290615b37565b600f54612d75906000613d5b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b602254158015906132ac575060235415155b6132ed5760405162461bcd60e51b8152602060048201526012602482015271141d589b1a58c81ad95e481b9bdd081cd95d60721b6044820152606401610cf2565b60006132f88261412f565b604080518082019182905291925061333a919060229060029082845b8154815260200190600101908083116133145750505050508261333561217b565b6141db565b6133765760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401610cf2565b61337f82615beb565b60258190556040519081527f79e2b3d818dbe45c83b10f543904e32c0a1b22fdd62e203f3d026d2e6548351e90602001611198565b6133bc6134e3565b6001600160a01b0381166133e657604051631e4fbdf760e01b815260006004820152602401610cf2565b61316e81613b48565b6001600160a01b038116600090815260186020908152604080832081516060810183528154815260018201549381018490526002909101549181019190915290820361343e5750600092915050565b8051602082015161344f9190615a45565b61311c9060016159c4565b60065460009062010000900460ff166134855760405162461bcd60e51b8152600401610cf290615a85565b6000613490836124f2565b80519091506000905b826020015181116134db5760008181526014602052604090205460ff16156134c957816134c5816159ab565b9250505b806134d3816159ab565b915050613499565b509392505050565b6026546001600160a01b03163314612d755760405163118cdaa760e01b8152336004820152602401610cf2565b6001600160a01b038316600090815260186020526040812060010154156135395750600061311c565b60125460009061354a9060016159c4565b90506000600161355a86846159c4565b6135649190615a45565b6040805160608101825284815260208082018481528284018981526001600160a01b038c81166000818152601886528781209651875593516001808801919091559251600290960195909555855180870187529485528484018c81529883526017909352939020915182546001600160a01b03191691161781559351938101939093556012555090509392505050565b6000818152600260205260408120546001600160a01b031680610ca757604051637e27328960e01b815260048101849052602401610cf2565b61181c83838360016142c1565b6001600160a01b0381166000908152601b602052604090205460ff161561316e5760405162461bcd60e51b815260206004820152602f60248201527f5573657220697320626c61636b6c697374656420616e64206d6179206e6f742060448201526e636f6e6669726d207469636b65747360881b6064820152608401610cf2565b6000818310156136d4576136cf8383615a45565b61311c565b60009392505050565b60405180606001604052808581526020018481526020018284106137015782613703565b835b90526001600160a01b039095166000908152601860209081526040918290208751815590870151600182015595015160029095019490945550505050565b600f54818111156137885760408051808201909152600180825260208201849052600e8054909190829060ff191682805b0217905550602082015181600101559050505050565b60408051808201909152600180825260208201839052600e8054909190829060ff19168280613772565b6000828152600260205260408120546001600160a01b03908116908316156137df576137df8184866143c7565b6001600160a01b0381161561381d576137fc6000856000806142c1565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b0385161561384c576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6001600160a01b03811660009081526019602052604090205480156110b157600d546000906138da9083615a11565b6001600160a01b03808516600090815260196020526040812055600a5491925016613972576000836001600160a01b03168260405160006040518083038185875af1925050503d806000811461394c576040519150601f19603f3d011682016040523d82523d6000602084013e613951565b606091505b5050905080611c205760405162461bcd60e51b8152600401610cf290615abc565b600a5460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af11580156139c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c209190615a28565b6000826139f68184615a45565b613a019060016159c4565b60255460408051602081019290925281018690526060016040516020818303038152906040528051906020012060001c613a3b9190615c25565b613a4591906159c4565b90506000613a5282613082565b90506000613a5f85613082565b6000848152601a6020908152604080832084905588835280832086905585835260149091529020805460ff1916600117905590505b5050505050565b60606000613aa88361442b565b600101905060008167ffffffffffffffff811115613ac857613ac86153f5565b6040519080825280601f01601f191660200182016040528015613af2576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084613afc57509392505050565b6110b1828260405180602001604052806000815250614503565b602680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216613bcc57604051630b61174360e31b81526001600160a01b0383166004820152602401610cf2565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b15611c2057604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290613c7b903390889087908790600401615c39565b6020604051808303816000875af1925050508015613cb6575060408051601f3d908101601f19168201909252613cb391810190615c76565b60015b613d1f573d808015613ce4576040519150601f19603f3d011682016040523d82523d6000602084013e613ce9565b606091505b508051600003613d1757604051633250574960e11b81526001600160a01b0385166004820152602401610cf2565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14613a9457604051633250574960e11b81526001600160a01b0385166004820152602401610cf2565b613d636134e3565b6002613d6d613000565b6003811115613d7e57613d7e6156e8565b10613d9b5760405162461bcd60e51b8152600401610cf290615b37565b60105460ff161580613daa5750805b613df65760405162461bcd60e51b815260206004820152601860248201527f546f6b656e7320616c7265616479206465706f736974656400000000000000006044820152606401610cf2565b60105460ff1680613e05575080155b613e6e5760405162461bcd60e51b815260206004820152603460248201527f4465706f73697420696e697469616c206c61756e636870616420746f6b656e73604482015273206265666f726520616464696e6720657874726160601b6064820152608401610cf2565b80613ec457600f548214613ec45760405162461bcd60e51b815260206004820152601860248201527f496e636f7272656374206465706f73697420616d6f756e7400000000000000006044820152606401610cf2565b600c546000613ed38483615a11565b600b546040516370a0823160e01b81523060048201529192506001600160a01b03169060009082906370a0823190602401602060405180830381865afa158015613f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f459190615c93565b6040516323b872dd60e01b8152336004820152306024820152604481018590529091506001600160a01b038316906323b872dd906064016020604051808303816000875af1158015613f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fbf9190615a28565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015614007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061402b9190615c93565b905060006140398383615a45565b60135490915061404a9082906159c4565b60135586156140d75760408051808201909152600e80546140a2929190829060ff16600181111561407d5761407d6156e8565b600181111561408e5761408e6156e8565b81526020016001820154815250508961451a565b8051600e8054909190829060ff1916600183818111156140c4576140c46156e8565b0217905550602082015181600101559050505b6010805460ff19166001179055604080518281526001600160a01b03861660208201527f2bd28610c69548fc2f921bbf218bc4633b6f88169a1e36cd5f2da07c110fee60910160405180910390a15050505050505050565b6141376153a4565b815160511461417e5760405162461bcd60e51b815260206004820152601360248201527226b0b63337b936b2b2102b292310383937b7b360691b6044820152606401610cf2565b6001820151602183015160318401516051850151600061419e858561456d565b6040805160808101825295865260208601919091526fffffffffffffffffffffffffffffffff909316928401929092526060830152509392505050565b60008060006141ea8685614584565b606087015160408801518951939550919350600092839261425892917f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798917f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8918d60015b60200201516146e9565b606089015160408a01518a5193955091935060009283926142809291899189918e600161424e565b909250905060006142a487878c8460200201518d600160200201518989898961473f565b6040909a015160809a909a1c9099149a9950505050505050505050565b80806142d557506001600160a01b03821615155b156143975760006142e5846135f4565b90506001600160a01b038316158015906143115750826001600160a01b0316816001600160a01b031614155b80156143245750614322818461326c565b155b1561434d5760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610cf2565b81156143955783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6143d28383836147fb565b61181c576001600160a01b03831661440057604051637e27328960e01b815260048101829052602401610cf2565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610cf2565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061446a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310614496576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106144b457662386f26fc10000830492506010015b6305f5e10083106144cc576305f5e100830492506008015b61271083106144e057612710830492506004015b606483106144f2576064830492506002015b600a8310610ca75760010192915050565b61450d8383614861565b61181c6000848484613c39565b604080518082019091526000808252602082015260405180604001604052808460000151600181111561454f5761454f6156e8565b815260200183856020015161456491906159c4565b90529392505050565b600061311c8383600060076401000003d0196148c6565b6000808060fe60016145a38784602002015188600160200201516149fa565b866040516020016145b79493929190615cac565b604051602081830303815290604052905060005b6101008160ff161015614699576000600283836040516020016145ef929190615cff565b60408051601f198184030181529082905261460991615d31565b602060405180830381855afa158015614626573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906146499190615c93565b905080600061465960028361456d565b90506146708282600060076401000003d019614a50565b156146835790955093506146e292505050565b505050808061469190615d4d565b9150506145cb565b5060405162461bcd60e51b815260206004820152601860248201527f4e6f2076616c696420706f696e742077617320666f756e6400000000000000006044820152606401610cf2565b9250929050565b6000806000806146fa8a8a8a614b09565b9150915060008061470c898989614b09565b915091506000806147288686868660006401000003d019614b2c565b90985096505050505050505b965096945050505050565b60008060fe60026147508c8c6149fa565b61475a8b8b6149fa565b6147648a8a6149fa565b61476e89896149fa565b60405160200161478396959493929190615d6c565b604051602081830303815290604052905060006002826040516147a69190615d31565b602060405180830381855afa1580156147c3573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906147e69190615c93565b6040518190529b9a5050505050505050505050565b60006001600160a01b038316158015906148595750826001600160a01b0316846001600160a01b031614806148355750614835848461326c565b8061485957506000828152600460205260409020546001600160a01b038481169116145b949350505050565b6001600160a01b03821661488b57604051633250574960e11b815260006004820152602401610cf2565b6000614899838360006137b2565b90506001600160a01b0381161561181c576040516339e3563760e11b815260006004820152602401610cf2565b60008560ff16600214806148dd57508560ff166003145b6149435760405162461bcd60e51b815260206004820152603160248201527f456c6c697074696343757276653a696e6e76616c696420636f6d7072657373656044820152700c8408a8640e0ded2dce840e0e4caccd2f607b1b6064820152608401610cf2565b6000828061495357614953615c0f565b838061496157614961615c0f565b85858061497057614970615c0f565b888a0908848061498257614982615c0f565b858061499057614990615c0f565b898a0989090890506149b98160046149a98660016159c4565b6149b39190615ded565b85614b60565b9050600060026149cc60ff8a16846159c4565b6149d69190615c25565b156149ea576149e58285615a45565b6149ec565b815b925050505b95945050505050565b60606000614a09600284615c25565b614a149060026159c4565b6040516001600160f81b031960f883901b1660208201526021810186905290915060410160405160208183030381529060405291505092915050565b6000851580614a5f5750818610155b80614a68575084155b80614a735750818510155b15614a80575060006149f1565b60008280614a9057614a90615c0f565b868709905060008380614aa557614aa5615c0f565b888580614ab457614ab4615c0f565b8a8b090990508515614ae4578380614ace57614ace615c0f565b8480614adc57614adc615c0f565b878a09820890505b8415614afe578380614af857614af8615c0f565b85820890505b149695505050505050565b600080614b2085858560006401000003d019614c37565b91509150935093915050565b600080600080614b3d888887614c71565b91509150614b4f8a8a84848a8a614c8a565b935093505050965096945050505050565b600081600003614bb25760405162461bcd60e51b815260206004820152601e60248201527f456c6c697074696343757276653a206d6f64756c7573206973207a65726f00006044820152606401610cf2565b83600003614bc25750600061311c565b82600003614bd25750600161311c565b6001600160ff1b5b8015614c2e57838186161515870a85848509099150836002820486161515870a85848509099150836004820486161515870a85848509099150836008820486161515870a8584850909915060109004614bda565b50949350505050565b6000806000806000614c4e8a8a8a60018b8b614d11565b925092509250614c6083838389614d93565b945094505050509550959350505050565b6000808483614c808682615a45565b614b209190615c25565b6000806000806000888b03614cda578580614ca757614ca7615c0f565b888b08600003614cc05760008094509450505050614734565b614cce8b8b60018a8a614e02565b91945092509050614cf3565b614ceb8b8b60018c8c60018c614fa5565b919450925090505b614cff83838389614d93565b94509450505050965096945050505050565b600080600088600003614d2b575086915085905084614d87565b8860008060015b8315614d7e576001841615614d5857614d508383838f8f8f8e614fa5565b919450925090505b614d63600285615ded565b9350614d728c8c8c8c8c614e02565b919d509b509950614d32565b91955093509150505b96509650969350505050565b6000806000614da285856152d8565b905060008480614db457614db4615c0f565b828309905060008580614dc957614dc9615c0f565b828a09905060008680614dde57614dde615c0f565b8780614dec57614dec615c0f565b8486098a09919a91995090975050505050505050565b600080600085600003614e1c575086915085905084614f9a565b60008480614e2c57614e2c615c0f565b898a09905060008580614e4157614e41615c0f565b898a09905060008680614e5657614e56615c0f565b898a09905060008780614e6b57614e6b615c0f565b8880614e7957614e79615c0f565b848e09600409905060008880614e9157614e91615c0f565b8980614e9f57614e9f615c0f565b8a80614ead57614ead615c0f565b8586098c098a80614ec057614ec0615c0f565b876003090890508880614ed557614ed5615c0f565b8980614ee357614ee3615c0f565b838408614ef0908b615a45565b8a80614efe57614efe615c0f565b8384090894508880614f1257614f12615c0f565b8980614f2057614f20615c0f565b8a80614f2e57614f2e615c0f565b868709600809614f3e908b615a45565b8a80614f4c57614f4c615c0f565b8b80614f5a57614f5a615c0f565b614f64898e615a45565b860884090893508880614f7957614f79615c0f565b8980614f8757614f87615c0f565b8c8e096002099497509295509293505050505b955095509592505050565b6000808089158015614fb5575088155b15614fc75750859150849050836152cb565b86158015614fd3575085155b15614fe55750889150879050866152cb565b614fed6153a4565b8480614ffb57614ffb615c0f565b898a098152848061500e5761500e615c0f565b81518a096020820152848061502557615025615c0f565b8687096040820152848061503b5761503b615c0f565b604082015187096060820152604080516080810190915280868061506157615061615c0f565b60408401518e098152602001868061507b5761507b615c0f565b60608401518d098152602001868061509557615095615c0f565b83518b09815260200186806150ac576150ac615c0f565b60208401518a099052604081015181519192501415806150d457506060810151602082015114155b6151205760405162461bcd60e51b815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e737465616400006044820152606401610cf2565b6151286153a4565b858061513657615136615c0f565b82516151429088615a45565b6040840151088152858061515857615158615c0f565b60208301516151679088615a45565b6060840151086020820152858061518057615180615c0f565b815180096040820152858061519757615197615c0f565b81516040830151096060820152600086806151b4576151b4615c0f565b60608301516151c39089615a45565b88806151d1576151d1615c0f565b6020850151800908905086806151e9576151e9615c0f565b87806151f7576151f7615c0f565b888061520557615205615c0f565b604085015186510960020961521a9089615a45565b820890506000878061522e5761522e615c0f565b888061523c5761523c615c0f565b615246848b615a45565b8a8061525457615254615c0f565b6040870151885109086020850151099050878061527357615273615c0f565b888061528157615281615c0f565b6060850151602087015109615296908a615a45565b82089050600088806152aa576152aa615c0f565b89806152b8576152b8615c0f565b8b8f098551099297509095509093505050505b9750975097945050505050565b600082158015906152e95750818314155b80156152f457508115155b6153315760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210373ab6b132b960911b6044820152606401610cf2565b6000600183825b8615615399576153488783615ded565b905082868061535957615359615c0f565b878061536757615367615c0f565b8584096153749089615a45565b86089094509250866153868183615a11565b6153909084615a45565b97509150615338565b509195945050505050565b60405180608001604052806004906020820280368337509192915050565b6001600160e01b03198116811461316e57600080fd5b6000602082840312156153ea57600080fd5b813561311c816153c2565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715615434576154346153f5565b604052919050565b600067ffffffffffffffff821115615456576154566153f5565b5060051b60200190565b80356001600160a01b038116811461547757600080fd5b919050565b600082601f83011261548d57600080fd5b813560206154a261549d8361543c565b61540b565b82815260059290921b840181019181810190868411156154c157600080fd5b8286015b848110156154e3576154d681615460565b83529183019183016154c5565b509695505050505050565b600082601f8301126154ff57600080fd5b8135602061550f61549d8361543c565b82815260059290921b8401810191818101908684111561552e57600080fd5b8286015b848110156154e35780358352918301918301615532565b60008060006060848603121561555e57600080fd5b833567ffffffffffffffff8082111561557657600080fd5b6155828783880161547c565b9450602086013591508082111561559857600080fd5b6155a4878388016154ee565b935060408601359150808211156155ba57600080fd5b506155c7868287016154ee565b9150509250925092565b60005b838110156155ec5781810151838201526020016155d4565b50506000910152565b6000815180845261560d8160208601602086016155d1565b601f01601f19169290920160200192915050565b60208152600061311c60208301846155f5565b60006020828403121561564657600080fd5b5035919050565b6000806040838503121561566057600080fd5b61566983615460565b946020939093013593505050565b60008060006060848603121561568c57600080fd5b61569584615460565b92506156a360208501615460565b9150604084013590509250925092565b6000602082840312156156c557600080fd5b813567ffffffffffffffff8111156156dc57600080fd5b6148598482850161547c565b634e487b7160e01b600052602160045260246000fd5b8151604082019060028110615715576157156156e8565b808352506020830151602083015292915050565b60006020828403121561573b57600080fd5b61311c82615460565b81518152602080830151908201526040808301519082015260608101610ca7565b6020808252825182820181905260009190848201906040850190845b8181101561579d57835183529284019291840191600101615781565b50909695505050505050565b801515811461316e57600080fd5b600080604083850312156157ca57600080fd5b6157d383615460565b915060208301356157e3816157a9565b809150509250929050565b6020810160048310615802576158026156e8565b91905290565b600082601f83011261581957600080fd5b813567ffffffffffffffff811115615833576158336153f5565b615846601f8201601f191660200161540b565b81815284602083860101111561585b57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561588e57600080fd5b61589785615460565b93506158a560208601615460565b925060408501359150606085013567ffffffffffffffff8111156158c857600080fd5b6158d487828801615808565b91505092959194509250565b600080604083850312156158f357600080fd5b6158fc83615460565b915061590a60208401615460565b90509250929050565b60006020828403121561592557600080fd5b813567ffffffffffffffff81111561593c57600080fd5b61485984828501615808565b6020808252601d908201527f416464207469636b65747320706572696f642068617320706173736564000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016159bd576159bd615995565b5060010190565b80820180821115610ca757610ca7615995565b600181811c908216806159eb57607f821691505b602082108103615a0b57634e487b7160e01b600052602260045260246000fd5b50919050565b8082028115828204841417610ca757610ca7615995565b600060208284031215615a3a57600080fd5b815161311c816157a9565b81810381811115610ca757610ca7615995565b602080825260139082015272139bdd081a5b8818db185a5b481c195c9a5bd9606a1b604082015260600190565b60208082526018908201527f57696e6e657273206e6f742073656c6563746564207965740000000000000000604082015260600190565b6020808252601a908201527f4661696c656420746f2073656e64206e617469766520636f696e000000000000604082015260600190565b60208082526024908201527f4e65772073746172742074696d65206d75737420626520696e207468652066756040820152637475726560e01b606082015260800190565b60208082526024908201527f57696e6e65722073656c656374696f6e2068617320616c7265616479207374616040820152631c9d195960e21b606082015260800190565b6020808252825182820181905260009190848201906040850190845b8181101561579d5783516001600160a01b031683529284019291840191600101615b97565b60008351615bce8184602088016155d1565b835190830190615be28183602088016155d1565b01949350505050565b80516020808301519190811015615a0b5760001960209190910360031b1b16919050565b634e487b7160e01b600052601260045260246000fd5b600082615c3457615c34615c0f565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615c6c908301846155f5565b9695505050505050565b600060208284031215615c8857600080fd5b815161311c816153c2565b600060208284031215615ca557600080fd5b5051919050565b600060ff60f81b808760f81b168352808660f81b166001840152508351615cda8160028501602088016155d1565b835190830190615cf18160028401602088016155d1565b016002019695505050505050565b60008351615d118184602088016155d1565b60f89390931b6001600160f81b0319169190920190815260010192915050565b60008251615d438184602087016155d1565b9190910192915050565b600060ff821660ff8103615d6357615d63615995565b60010192915050565b600060ff60f81b808960f81b168352808860f81b166001840152508551615d9a816002850160208a016155d1565b855190830190615db1816002840160208a016155d1565b8551910190615dc78160028401602089016155d1565b8451910190615ddd8160028401602088016155d1565b0160020198975050505050505050565b600082615dfc57615dfc615c0f565b50049056fea26469706673582212202e8316ea70633b5296a95180fcc689f1bb5b47e40b74876bda974d434c51086a64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106103c35760003560e01c80636ee7f70b116101f2578063a84927e81161010d578063cb580080116100a0578063ebbba9171161006f578063ebbba91714610bdb578063f2fde38b14610bfb578063f8b3df2314610c1b578063fa7c2d6614610c3b57600080fd5b8063cb58008014610b56578063ce8f6e2114610b76578063d84e29ea14610b8b578063e985e9c514610bbb57600080fd5b8063c66cfe1f116100dc578063c66cfe1f14610ac0578063c7fdc35814610ae0578063c87b56dd14610b16578063c9df5e6614610b3657600080fd5b8063a84927e814610a01578063b4a768d614610a23578063b7fc83f814610a8b578063b88d4fde14610aa057600080fd5b80638da5cb5b11610185578063a195b69c11610154578063a195b69c146108ba578063a22cb465146108f2578063a323f7fe14610912578063a5594ae51461094857600080fd5b80638da5cb5b1461086957806395d89b411461088757806397bf7c0b1461089c578063a10f60de1461068c57600080fd5b80637d3d6ee5116101c15780637d3d6ee5146107fd578063812083211461081257806382781aba1461082757806387bb7ae01461085457600080fd5b80636ee7f70b1461079e57806370a08231146107b3578063715018a6146107d357806372e67df3146107e857600080fd5b80633cfad83d116102e25780634c14b770116102755780635de38ce1116102445780635de38ce1146107345780636352211e146107545780636be7410b146107745780636e02007d1461078957600080fd5b80634c14b770146106a1578063503b8e81146106b957806358ddfca9146106f25780635ae2afa41461071f57600080fd5b806342842e0e116102b157806342842e0e1461064c578063450e9dec1461066c57806347503d6b1461068c5780634b7938991461068c57600080fd5b80633cfad83d146105d55780633dc060de146105ea5780633fa1e1291461060a57806340bb2fee1461062a57600080fd5b806322b692de1161035a57806325bf76ca1161032957806325bf76ca146105605780632dec60ce1461058057806331cb1304146105a057806339a2eb2a146105b557600080fd5b806322b692de146104eb5780632325cc721461050b57806323b872dd146105205780632533a5f61461054057600080fd5b8063095ea7b311610396578063095ea7b31461047957806315981650146104995780631739a7b0146104b95780631ad280d3146104d857600080fd5b806301ffc9a7146103c857806305659ac6146103fd57806306fdde031461041f578063081812fc14610441575b600080fd5b3480156103d457600080fd5b506103e86103e33660046153d8565b610c5b565b60405190151581526020015b60405180910390f35b34801561040957600080fd5b5061041d610418366004615549565b610cad565b005b34801561042b57600080fd5b50610434610feb565b6040516103f49190615621565b34801561044d57600080fd5b5061046161045c366004615634565b61107d565b6040516001600160a01b0390911681526020016103f4565b34801561048557600080fd5b5061041d61049436600461564d565b6110a6565b3480156104a557600080fd5b5061041d6104b4366004615634565b6110b5565b3480156104c557600080fd5b506011545b6040519081526020016103f4565b61041d6104e6366004615634565b6111a4565b3480156104f757600080fd5b5061041d610506366004615634565b6114b0565b34801561051757600080fd5b5061041d611821565b34801561052c57600080fd5b5061041d61053b366004615677565b611b9b565b34801561054c57600080fd5b5061041d61055b366004615634565b611c26565b34801561056c57600080fd5b5061041d61057b3660046156b3565b611cda565b34801561058c57600080fd5b5061041d61059b366004615634565b611dfe565b3480156105ac57600080fd5b506008546104ca565b3480156105c157600080fd5b5061041d6105d0366004615634565b611f06565b3480156105e157600080fd5b5061043461217b565b3480156105f657600080fd5b5061041d6106053660046156b3565b61218f565b34801561061657600080fd5b5061041d610625366004615634565b6122aa565b34801561063657600080fd5b5061063f61239a565b6040516103f491906156fe565b34801561065857600080fd5b5061041d610667366004615677565b6123f6565b34801561067857600080fd5b5061041d610687366004615729565b612411565b34801561069857600080fd5b506012546104ca565b3480156106ad57600080fd5b5060105460ff166103e8565b3480156106c557600080fd5b506103e86106d4366004615729565b6001600160a01b03166000908152601b602052604090205460ff1690565b3480156106fe57600080fd5b5061071261070d366004615729565b6124f2565b6040516103f49190615744565b34801561072b57600080fd5b5061041d61259c565b34801561074057600080fd5b5061041d61074f366004615729565b61273f565b34801561076057600080fd5b5061046161076f366004615634565b612820565b34801561078057600080fd5b5061041d61282b565b34801561079557600080fd5b506027546104ca565b3480156107aa57600080fd5b5061041d612cfe565b3480156107bf57600080fd5b506104ca6107ce366004615729565b612d1b565b3480156107df57600080fd5b5061041d612d63565b3480156107f457600080fd5b506009546104ca565b34801561080957600080fd5b50610712612d77565b34801561081e57600080fd5b50600c546104ca565b34801561083357600080fd5b50610847610842366004615729565b612dc0565b6040516103f49190615765565b34801561086057600080fd5b506104ca612f94565b34801561087557600080fd5b506026546001600160a01b0316610461565b34801561089357600080fd5b50610434612fe6565b3480156108a857600080fd5b50600b546001600160a01b0316610461565b3480156108c657600080fd5b506103e86108d5366004615729565b6001600160a01b0316600090815260208052604090205460ff1690565b3480156108fe57600080fd5b5061041d61090d3660046157b7565b612ff5565b34801561091e57600080fd5b506104ca61092d366004615729565b6001600160a01b031660009081526019602052604090205490565b34801561095457600080fd5b506109c6604080516080810182526000808252602082018190529181018290526060810191909152506040805160808101825260065460ff8082161515835261010082048116151560208401526201000082048116151593830193909352630100000090049091161515606082015290565b6040516103f4919081511515815260208083015115159082015260408083015115159082015260609182015115159181019190915260800190565b348015610a0d57600080fd5b50610a16613000565b6040516103f491906157ee565b348015610a2f57600080fd5b50610a7c610a3e366004615729565b60408051602080820183526000918290526001600160a01b039390931681526029835281812054815260288352819020815192830190915254815290565b604051905181526020016103f4565b348015610a9757600080fd5b506007546104ca565b348015610aac57600080fd5b5061041d610abb366004615878565b61306b565b348015610acc57600080fd5b506104ca610adb366004615634565b613082565b348015610aec57600080fd5b506104ca610afb366004615729565b6001600160a01b031660009081526021602052604090205490565b348015610b2257600080fd5b50610434610b31366004615634565b6130ae565b348015610b4257600080fd5b5061041d610b51366004615634565b613123565b348015610b6257600080fd5b5061041d610b71366004615634565b613171565b348015610b8257600080fd5b5061041d61321e565b348015610b9757600080fd5b506103e8610ba6366004615634565b60009081526014602052604090205460ff1690565b348015610bc757600080fd5b506103e8610bd63660046158e0565b61326c565b348015610be757600080fd5b5061041d610bf6366004615913565b61329a565b348015610c0757600080fd5b5061041d610c16366004615729565b6133b4565b348015610c2757600080fd5b506104ca610c36366004615729565b6133ef565b348015610c4757600080fd5b506104ca610c56366004615729565b61345a565b60006001600160e01b031982166380ac58cd60e01b1480610c8c57506001600160e01b03198216635b5e139f60e01b145b80610ca757506301ffc9a760e01b6001600160e01b03198316145b92915050565b610cb56134e3565b6000610cbf613000565b90506002816003811115610cd557610cd56156e8565b10610cfb5760405162461bcd60e51b8152600401610cf290615948565b60405180910390fd5b82518451148015610d0d575081518451145b610d685760405162461bcd60e51b815260206004820152602660248201527f496e70757420617272617973206d7573742068617665207468652073616d65206044820152650d8cadccee8d60d31b6064820152608401610cf2565b601c54600f5460009190825b8751811015610f3357610dd3888281518110610d9257610d9261597f565b6020026020010151888381518110610dac57610dac61597f565b6020026020010151888481518110610dc657610dc661597f565b6020026020010151613510565b15610f2157858181518110610dea57610dea61597f565b6020026020010151878281518110610e0457610e0461597f565b60200260200101511015610e805760405162461bcd60e51b815260206004820152603a60248201527f43616e277420616464206d6f72652067756172616e746565642077696e6e696e60448201527f67207468616e20636f6e6669726d61626c65207469636b6574730000000000006064820152608401610cf2565b83610e8a816159ab565b945050858181518110610e9f57610e9f61597f565b602002602001015183610eb291906159c4565b925081831115610f215760405162461bcd60e51b815260206004820152603460248201527f417474656d7074656420746f2061646420746f6f206d616e792067756172616e604482015273746565642077696e6e696e67207469636b65747360601b6064820152608401610cf2565b80610f2b816159ab565b915050610d74565b5060008311610faa5760405162461bcd60e51b815260206004820152603c60248201527f416c6c20696e70757420616464726573736573206861766520616c726561647960448201527f206265656e20616464656420746f20746865206c61756e6368706164000000006064820152608401610cf2565b601c8290556040518381527fa96c43b66e9035fa672b1b5d01047f92e890df0425b9727356d569ec2a36dd2d9060200160405180910390a150505050505050565b606060008054610ffa906159d7565b80601f0160208091040260200160405190810160405280929190818152602001828054611026906159d7565b80156110735780601f1061104857610100808354040283529160200191611073565b820191906000526020600020905b81548152906001019060200180831161105657829003601f168201915b5050505050905090565b6000611088826135f4565b506000828152600460205260409020546001600160a01b0316610ca7565b6110b182823361362d565b5050565b6110bd6134e3565b60006110c7613000565b905060008160038111156110dd576110dd6156e8565b146110fa5760405162461bcd60e51b8152600401610cf290615948565b600082116111555760405162461bcd60e51b815260206004820152602260248201527f5469636b6574207072696365206d75737420626520686967686572207468616e604482015261020360f41b6064820152608401610cf2565b600d829055600a54604080518481526001600160a01b0390921660208301527f357db995b6ab6dd8d40e6f99176fe1e58b28e0bd44a18fa17da37762b360dab791015b60405180910390a15050565b60006111ae613000565b905060018160038111156111c4576111c46156e8565b146112115760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420696e20636f6e6669726d6174696f6e20706572696f640000000000006044820152606401610cf2565b60105460ff1661126e5760405162461bcd60e51b815260206004820152602260248201527f4c61756e636870616420746f6b656e73206e6f74206465706f73697465642079604482015261195d60f21b6064820152608401610cf2565b6112773361363a565b6000611282336133ef565b3360009081526019602052604081205491925061129f85836159c4565b9050828111156112fc5760405162461bcd60e51b815260206004820152602260248201527f547279696e6720746f20636f6e6669726d20746f6f206d616e79207469636b65604482015261747360f01b6064820152608401610cf2565b600d54600061130b8783615a11565b600a549091506001600160a01b031661138d578034146113885760405162461bcd60e51b815260206004820152603260248201527f46756e647320696e206d6573736167652073686f756c64206d6174636820746f60448201527174616c20726571756972656420707269636560701b6064820152608401610cf2565b61140a565b600a546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156113e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114089190615a28565b505b3360009081526019602052604090208390556024546040805160208101869052016040516020818303038152906040528051906020012060405160200161145b929190918252602082015260400190565b60408051808303601f1901815290829052805160209182012060245588825233917f63fd54a53d90b47a3d21890ce80385ea5c8f4d19e14828194fea1c7b98ccd411910160405180910390a250505050505050565b6114b86134e3565b60026114c2613000565b60038111156114d3576114d36156e8565b146115205760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420696e2077696e6e65722073656c656374696f6e2073746167650000006044820152606401610cf2565b600654610100900460ff16156115785760405162461bcd60e51b815260206004820152601860248201527f5469636b65747320616c72656164792066696c746572656400000000000000006044820152606401610cf2565b601e54600003611588576001601e555b60125460006115988260016159c4565b905060005b83811080156115ae5750601e548310155b1561179457601e5460009081526017602090815260408083208151808301835281546001600160a01b03168082526001909201549084018190528185526019845282852054601b909452919093205490919060ff168061160c575080155b1561166357601e546001600160a01b0384166000908152601860209081526040808320838155600180820185905560029091018490559383526017909152812080546001600160a01b03191681559091015561174a565b6001600160a01b0383166000908152601860205260408120600201549061168a82846136bb565b601554601f54601e549293506000926116a39190615a45565b6116ad9190615a45565b9050600060016116bd84846159c4565b6116c79190615a45565b90508098506116d987838387896136dd565b6116e2876124f2565b604001516015546116f391906159c4565b601555506000818152601760208181526040808420805482518084019093526001600160a01b038c811684528385019889529690955292909152519092166001600160a01b03199091161781559051600190910155505b60006117568284615a45565b601f549091506117679082906159c4565b601f55601e546117789084906159c4565b601e555083925061178c91508290506159ab565b91505061159d565b50601e547f43083f57768127ccb9784144c4a44c74633323c3671de57a9cdb0f0caee6f760906117c690600190615a45565b60408051918252602082018590520160405180910390a1601e5482101561181c576015546117fd906117f890836159c4565b613741565b60128190556006805461ff0019166101001790556000601e819055601f555b505050565b6118296134e3565b6000611833613000565b90506003816003811115611849576118496156e8565b146118665760405162461bcd60e51b8152600401610cf290615a58565b60065462010000900460ff1661188e5760405162461bcd60e51b8152600401610cf290615a85565b60165460ff161561191a5760405162461bcd60e51b815260206004820152604a60248201527f5469636b6574207061796d656e74202b206c6566746f766572206c61756e636860448201527f70616420746f6b656e20726566756e6420666f72206f776e657220616c726561606482015269191e4818db185a5b595960b21b608482015260a401610cf2565b6016805460ff1916600117905560115460008115801590611943575060065462010000900460ff165b15611a7857600a546001600160a01b03166119e257600061196c6026546001600160a01b031690565b6001600160a01b03168360405160006040518083038185875af1925050503d80600081146119b6576040519150601f19603f3d011682016040523d82523d6000602084013e6119bb565b606091505b50509050806119dc5760405162461bcd60e51b8152600401610cf290615abc565b50611a78565b600a546001600160a01b031663a9059cbb611a056026546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015611a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a769190615a28565b505b60135460065460009062010000900460ff16611a95576000611a99565b600f545b600c54909150600090611aad908390615a11565b905080831115611b5a57611ac18184615a45565b600b549094506001600160a01b031663a9059cbb611ae76026546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018790526044016020604051808303816000875af1158015611b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b589190615a28565b505b60408051868152602081018690527f56401aa3ba50e689e155123b2cb3f3874d522f85bb6313d489eacd59b45ba257910160405180910390a1505050505050565b6001600160a01b038216611bc557604051633250574960e11b815260006004820152602401610cf2565b6000611bd28383336137b2565b9050836001600160a01b0316816001600160a01b031614611c20576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610cf2565b50505050565b611c2e6134e3565b428111611c4d5760405162461bcd60e51b8152600401610cf290615af3565b6008548111611c9e5760405162461bcd60e51b815260206004820152601e60248201527f4d7573742062652061667465722077696e6e65722073656c656374696f6e00006044820152606401610cf2565b60098190556040518181527f9a117d50db495b8e5b6defa7f392b1b49b14632c64e0187edc7d487038007b6a906020015b60405180910390a150565b611ce26134e3565b6002611cec613000565b6003811115611cfd57611cfd6156e8565b10611d1a5760405162461bcd60e51b8152600401610cf290615b37565b6000815111611d675760405162461bcd60e51b815260206004820152601960248201527855736572206c6973742063616e6e6f7420626520656d70747960381b6044820152606401610cf2565b60005b8151811015611dce576000828281518110611d8757611d8761597f565b60200260200101519050611d9a816138ab565b6001600160a01b03166000908152601b60205260409020805460ff1916600117905580611dc6816159ab565b915050611d6a565b507fb0acc561764f1521c892494310b184e20cafc08c4d047edaeeed1b55af37fe3081604051611ccf9190615b7b565b611e066134e3565b428111611e255760405162461bcd60e51b8152600401610cf290615af3565b6007548111611e805760405162461bcd60e51b815260206004820152602160248201527f4d75737420626520616674657220636f6e6669726d6174696f6e20706572696f6044820152601960fa1b6064820152608401610cf2565b6009548110611ed15760405162461bcd60e51b815260206004820152601b60248201527f4d757374206265206265666f726520636c61696d20706572696f6400000000006044820152606401610cf2565b60088190556040518181527fc69fad2af0fd3e7e6beeca22b6f052bebe69572031465b2dadd31dba59688b3d90602001611ccf565b611f0e6134e3565b6002611f18613000565b6003811115611f2957611f296156e8565b14611f765760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420696e2077696e6e65722073656c656374696f6e2073746167650000006044820152606401610cf2565b600654610100900460ff16611fcd5760405162461bcd60e51b815260206004820152601960248201527f4d7573742066696c746572207469636b657473206669727374000000000000006044820152606401610cf2565b60065462010000900460ff16156120265760405162461bcd60e51b815260206004820152601860248201527f57696e6e65727320616c72656164792073656c656374656400000000000000006044820152606401610cf2565b6025546000036120785760405162461bcd60e51b815260206004820152601860248201527f53687566666c6572206e6f7420696e697469616c697a656400000000000000006044820152606401610cf2565b600f5460155460009061208b9083615a45565b601254601d54919250906000036120a2576001601d555b60005b84811080156120b65750601d548310155b80156120c45750601d548210155b156120f957601d546120d690836139e9565b601d546120e49060016159c4565b601d55806120f1816159ab565b9150506120a5565b50601d548211158061210d5750601d548111155b15612139576006805462ff0000191662010000179055600d54600090612134908590615a11565b601155505b601d5460408051918252602082018490527f207af04099d653c834032f132e688b489f38f79daeb66bb678ecfa801ea5d046910160405180910390a150505050565b60245460609061218a90613a9b565b905090565b6121976134e3565b60026121a1613000565b60038111156121b2576121b26156e8565b106121cf5760405162461bcd60e51b8152600401610cf290615b37565b600081511161221c5760405162461bcd60e51b815260206004820152601960248201527855736572206c6973742063616e6e6f7420626520656d70747960381b6044820152606401610cf2565b60005b815181101561227a57600082828151811061223c5761223c61597f565b6020908102919091018101516001600160a01b03166000908152601b90915260409020805460ff191690555080612272816159ab565b91505061221f565b507f0d90ea9b5e05e27044df05bdbc6e16c9e075b7c9aa2e82b3f164909fce0aa96f81604051611ccf9190615b7b565b6122b26134e3565b60006122bc613000565b905060008160038111156122d2576122d26156e8565b146122ef5760405162461bcd60e51b8152600401610cf290615948565b600082116123655760405162461bcd60e51b815260206004820152603960248201527f4c61756e636870616420746f6b656e73207065722077696e6e696e672074696360448201527f6b65742063616e6e6f742062652073657420746f207a65726f000000000000006064820152608401610cf2565b600c8290556040518281527f71a23193f99964042d171de9a10b99aa086546ce2b80f3613d18ea27f09554cf90602001611198565b604080518082019091526000808252602082015260408051808201909152600e8054829060ff1660018111156123d2576123d26156e8565b60018111156123e3576123e36156e8565b8152602001600182015481525050905090565b61181c8383836040518060200160405280600081525061306b565b6124196134e3565b6000612423613000565b90506000816003811115612439576124396156e8565b146124565760405162461bcd60e51b8152600401610cf290615948565b6001600160a01b0382166124a45760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606401610cf2565b600a80546001600160a01b0319166001600160a01b0384169081179091556040519081527f4f920c46ca85a648f9179bdcbe4a821d507a0d03946e947c70fb47e943b66df090602001611198565b61251660405180606001604052806000815260200160008152602001600081525090565b6001600160a01b03821660009081526018602090815260408083208151606081018352815481526001820154938101849052600290910154918101919091529103610ca75760405162461bcd60e51b8152602060048201526016602482015275151a58dad95d081c985b99d9481b9bdd08199bdd5b9960521b6044820152606401610cf2565b60006125a6613000565b905060038160038111156125bc576125bc6156e8565b146125d95760405162461bcd60e51b8152600401610cf290615a58565b60065462010000900460ff166126015760405162461bcd60e51b8152600401610cf290615a85565b6006546301000000900460ff1661265a5760405162461bcd60e51b815260206004820152601c60248201527f4e4654206c61756e6368706164206973206e6f7420656e61626c6564000000006044820152606401610cf2565b33600090815260208052604090205460ff166126b15760405162461bcd60e51b8152602060048201526016602482015275151bdad95b9cc81b9bdd0818db185a5b5959081e595d60521b6044820152606401610cf2565b6027546126be3382613b2e565b3360009081526021602090815260408083205481518084018352818152858552602890935290832091519091556027805491926126fa836159ab565b91905055507f72102923c3d44433bd725cb2c744a4c92a536ad249b665dec9853a16ed66552560275460405161273291815260200190565b60405180910390a1505050565b6127476134e3565b6000612751613000565b90506000816003811115612767576127676156e8565b146127845760405162461bcd60e51b8152600401610cf290615948565b6001600160a01b0382166127d25760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606401610cf2565b600b80546001600160a01b0319166001600160a01b0384169081179091556040519081527f4dad0a7d97f7c80daf6bb308fc186f377387cce7ce977504a4f4d83ce7afd1a990602001611198565b6000610ca7826135f4565b6000612835613000565b9050600381600381111561284b5761284b6156e8565b146128685760405162461bcd60e51b8152600401610cf290615a58565b60065462010000900460ff166128905760405162461bcd60e51b8152600401610cf290615a85565b33600090815260208052604090205460ff16156128e15760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b6044820152606401610cf2565b60006128ec336124f2565b6040808201513360009081526020805291909120805460ff1916600117905560065491925090819062010000900460ff16612a7d5733600090815260196020526040812054600d54909190612942908390615a11565b600a549091506001600160a01b03166129c357604051600090339083908381818185875af1925050503d8060008114612997576040519150601f19603f3d011682016040523d82523d6000602084013e61299c565b606091505b50509050806129bd5760405162461bcd60e51b8152600401610cf290615abc565b50612a3a565b600a5460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015612a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a389190615a28565b505b60408051600081526020810184905233917f9923b4306c6c030f2bdfbf156517d5983b87e15b96176da122cd4f2effa4ba7b910160405180910390a25050611c20565b82515b83602001518111612af557612a968360016159c4565b60008281526014602052604090205490935060ff1615612ad4576000818152601460205260409020805460ff19169055612ad18260016159c4565b91505b6000818152601a602052604081205580612aed816159ab565b915050612a80565b5033600090815260216020908152604080832084905560199091528120556000612b1f8284615a45565b600d54909150600090612b33908390615a11565b600a549091506001600160a01b0316612bb457604051600090339083908381818185875af1925050503d8060008114612b88576040519150601f19603f3d011682016040523d82523d6000602084013e612b8d565b606091505b5050905080612bae5760405162461bcd60e51b8152600401610cf290615abc565b50612c2b565b600a5460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015612c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c299190615a28565b505b600c546000612c3a8286615a11565b90508015612cb957600b5460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015612c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb79190615a28565b505b604080518681526020810186905233917f9923b4306c6c030f2bdfbf156517d5983b87e15b96176da122cd4f2effa4ba7b910160405180910390a25050505050505050565b612d066134e3565b6006805463ff00000019166301000000179055565b60006001600160a01b038216612d47576040516322718ad960e21b815260006004820152602401610cf2565b506001600160a01b031660009081526003602052604090205490565b612d6b6134e3565b612d756000613b48565b565b612d9b60405180606001604052806000815260200160008152602001600081525090565b5060408051606081018252600754815260085460208201526009549181019190915290565b60065460609062010000900460ff16612deb5760405162461bcd60e51b8152600401610cf290615a85565b6001600160a01b038216600090815260186020908152604080832081516060810183528154808252600183015494820185905260029092015492810192909252909291612e389190615a45565b612e439060016159c4565b67ffffffffffffffff811115612e5b57612e5b6153f5565b604051908082528060200260200182016040528015612e84578160200160208202803683370190505b5082519091506000905b83602001518111612eee5760008181526014602052604090205460ff1615612edc5780838381518110612ec357612ec361597f565b602090810291909101015281612ed8816159ab565b9250505b80612ee6816159ab565b915050612e8e565b5060008167ffffffffffffffff811115612f0a57612f0a6153f5565b604051908082528060200260200182016040528015612f33578160200160208202803683370190505b50905060005b82811015612f8a57838181518110612f5357612f5361597f565b6020026020010151828281518110612f6d57612f6d61597f565b602090810291909101015280612f82816159ab565b915050612f39565b5095945050505050565b600d546000908103612fdf5760405162461bcd60e51b8152602060048201526014602482015273151a58dad95d081c1c9a58d9481b9bdd081cd95d60621b6044820152606401610cf2565b50600d5490565b606060018054610ffa906159d7565b6110b1338383613b9a565b604080516060810182526007548082526008546020830152600954928201929092526000914291908210156130385760009250505090565b806020015182101561304d5760019250505090565b80604001518210156130625760029250505090565b60039250505090565b613076848484611b9b565b611c2084848484613c39565b6000818152601a6020526040812054156130aa576000828152601a6020526040902054610ca7565b5090565b60606130b9826135f4565b5060006130d160408051602081019091526000815290565b905060008151116130f1576040518060200160405280600081525061311c565b806130fb84613a9b565b60405160200161310c929190615bbc565b6040516020818303038152906040525b9392505050565b61312b6134e3565b6002613135613000565b6003811115613146576131466156e8565b106131635760405162461bcd60e51b8152600401610cf290615b37565b61316e816001613d5b565b50565b6131796134e3565b4281116131985760405162461bcd60e51b8152600401610cf290615af3565b60085481106131e95760405162461bcd60e51b815260206004820152601f60248201527f4d757374206265206265666f72652077696e6e65722073656c656374696f6e006044820152606401610cf2565b60078190556040518181527f9f4130f810db3f8b8c3d3e9f0a1c82df83c082f10c2149d3b531773cd911e12090602001611ccf565b6132266134e3565b6002613230613000565b6003811115613241576132416156e8565b1061325e5760405162461bcd60e51b8152600401610cf290615b37565b600f54612d75906000613d5b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b602254158015906132ac575060235415155b6132ed5760405162461bcd60e51b8152602060048201526012602482015271141d589b1a58c81ad95e481b9bdd081cd95d60721b6044820152606401610cf2565b60006132f88261412f565b604080518082019182905291925061333a919060229060029082845b8154815260200190600101908083116133145750505050508261333561217b565b6141db565b6133765760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401610cf2565b61337f82615beb565b60258190556040519081527f79e2b3d818dbe45c83b10f543904e32c0a1b22fdd62e203f3d026d2e6548351e90602001611198565b6133bc6134e3565b6001600160a01b0381166133e657604051631e4fbdf760e01b815260006004820152602401610cf2565b61316e81613b48565b6001600160a01b038116600090815260186020908152604080832081516060810183528154815260018201549381018490526002909101549181019190915290820361343e5750600092915050565b8051602082015161344f9190615a45565b61311c9060016159c4565b60065460009062010000900460ff166134855760405162461bcd60e51b8152600401610cf290615a85565b6000613490836124f2565b80519091506000905b826020015181116134db5760008181526014602052604090205460ff16156134c957816134c5816159ab565b9250505b806134d3816159ab565b915050613499565b509392505050565b6026546001600160a01b03163314612d755760405163118cdaa760e01b8152336004820152602401610cf2565b6001600160a01b038316600090815260186020526040812060010154156135395750600061311c565b60125460009061354a9060016159c4565b90506000600161355a86846159c4565b6135649190615a45565b6040805160608101825284815260208082018481528284018981526001600160a01b038c81166000818152601886528781209651875593516001808801919091559251600290960195909555855180870187529485528484018c81529883526017909352939020915182546001600160a01b03191691161781559351938101939093556012555090509392505050565b6000818152600260205260408120546001600160a01b031680610ca757604051637e27328960e01b815260048101849052602401610cf2565b61181c83838360016142c1565b6001600160a01b0381166000908152601b602052604090205460ff161561316e5760405162461bcd60e51b815260206004820152602f60248201527f5573657220697320626c61636b6c697374656420616e64206d6179206e6f742060448201526e636f6e6669726d207469636b65747360881b6064820152608401610cf2565b6000818310156136d4576136cf8383615a45565b61311c565b60009392505050565b60405180606001604052808581526020018481526020018284106137015782613703565b835b90526001600160a01b039095166000908152601860209081526040918290208751815590870151600182015595015160029095019490945550505050565b600f54818111156137885760408051808201909152600180825260208201849052600e8054909190829060ff191682805b0217905550602082015181600101559050505050565b60408051808201909152600180825260208201839052600e8054909190829060ff19168280613772565b6000828152600260205260408120546001600160a01b03908116908316156137df576137df8184866143c7565b6001600160a01b0381161561381d576137fc6000856000806142c1565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b0385161561384c576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6001600160a01b03811660009081526019602052604090205480156110b157600d546000906138da9083615a11565b6001600160a01b03808516600090815260196020526040812055600a5491925016613972576000836001600160a01b03168260405160006040518083038185875af1925050503d806000811461394c576040519150601f19603f3d011682016040523d82523d6000602084013e613951565b606091505b5050905080611c205760405162461bcd60e51b8152600401610cf290615abc565b600a5460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af11580156139c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c209190615a28565b6000826139f68184615a45565b613a019060016159c4565b60255460408051602081019290925281018690526060016040516020818303038152906040528051906020012060001c613a3b9190615c25565b613a4591906159c4565b90506000613a5282613082565b90506000613a5f85613082565b6000848152601a6020908152604080832084905588835280832086905585835260149091529020805460ff1916600117905590505b5050505050565b60606000613aa88361442b565b600101905060008167ffffffffffffffff811115613ac857613ac86153f5565b6040519080825280601f01601f191660200182016040528015613af2576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084613afc57509392505050565b6110b1828260405180602001604052806000815250614503565b602680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216613bcc57604051630b61174360e31b81526001600160a01b0383166004820152602401610cf2565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b15611c2057604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290613c7b903390889087908790600401615c39565b6020604051808303816000875af1925050508015613cb6575060408051601f3d908101601f19168201909252613cb391810190615c76565b60015b613d1f573d808015613ce4576040519150601f19603f3d011682016040523d82523d6000602084013e613ce9565b606091505b508051600003613d1757604051633250574960e11b81526001600160a01b0385166004820152602401610cf2565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14613a9457604051633250574960e11b81526001600160a01b0385166004820152602401610cf2565b613d636134e3565b6002613d6d613000565b6003811115613d7e57613d7e6156e8565b10613d9b5760405162461bcd60e51b8152600401610cf290615b37565b60105460ff161580613daa5750805b613df65760405162461bcd60e51b815260206004820152601860248201527f546f6b656e7320616c7265616479206465706f736974656400000000000000006044820152606401610cf2565b60105460ff1680613e05575080155b613e6e5760405162461bcd60e51b815260206004820152603460248201527f4465706f73697420696e697469616c206c61756e636870616420746f6b656e73604482015273206265666f726520616464696e6720657874726160601b6064820152608401610cf2565b80613ec457600f548214613ec45760405162461bcd60e51b815260206004820152601860248201527f496e636f7272656374206465706f73697420616d6f756e7400000000000000006044820152606401610cf2565b600c546000613ed38483615a11565b600b546040516370a0823160e01b81523060048201529192506001600160a01b03169060009082906370a0823190602401602060405180830381865afa158015613f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f459190615c93565b6040516323b872dd60e01b8152336004820152306024820152604481018590529091506001600160a01b038316906323b872dd906064016020604051808303816000875af1158015613f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fbf9190615a28565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015614007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061402b9190615c93565b905060006140398383615a45565b60135490915061404a9082906159c4565b60135586156140d75760408051808201909152600e80546140a2929190829060ff16600181111561407d5761407d6156e8565b600181111561408e5761408e6156e8565b81526020016001820154815250508961451a565b8051600e8054909190829060ff1916600183818111156140c4576140c46156e8565b0217905550602082015181600101559050505b6010805460ff19166001179055604080518281526001600160a01b03861660208201527f2bd28610c69548fc2f921bbf218bc4633b6f88169a1e36cd5f2da07c110fee60910160405180910390a15050505050505050565b6141376153a4565b815160511461417e5760405162461bcd60e51b815260206004820152601360248201527226b0b63337b936b2b2102b292310383937b7b360691b6044820152606401610cf2565b6001820151602183015160318401516051850151600061419e858561456d565b6040805160808101825295865260208601919091526fffffffffffffffffffffffffffffffff909316928401929092526060830152509392505050565b60008060006141ea8685614584565b606087015160408801518951939550919350600092839261425892917f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798917f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8918d60015b60200201516146e9565b606089015160408a01518a5193955091935060009283926142809291899189918e600161424e565b909250905060006142a487878c8460200201518d600160200201518989898961473f565b6040909a015160809a909a1c9099149a9950505050505050505050565b80806142d557506001600160a01b03821615155b156143975760006142e5846135f4565b90506001600160a01b038316158015906143115750826001600160a01b0316816001600160a01b031614155b80156143245750614322818461326c565b155b1561434d5760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610cf2565b81156143955783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6143d28383836147fb565b61181c576001600160a01b03831661440057604051637e27328960e01b815260048101829052602401610cf2565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610cf2565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061446a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310614496576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106144b457662386f26fc10000830492506010015b6305f5e10083106144cc576305f5e100830492506008015b61271083106144e057612710830492506004015b606483106144f2576064830492506002015b600a8310610ca75760010192915050565b61450d8383614861565b61181c6000848484613c39565b604080518082019091526000808252602082015260405180604001604052808460000151600181111561454f5761454f6156e8565b815260200183856020015161456491906159c4565b90529392505050565b600061311c8383600060076401000003d0196148c6565b6000808060fe60016145a38784602002015188600160200201516149fa565b866040516020016145b79493929190615cac565b604051602081830303815290604052905060005b6101008160ff161015614699576000600283836040516020016145ef929190615cff565b60408051601f198184030181529082905261460991615d31565b602060405180830381855afa158015614626573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906146499190615c93565b905080600061465960028361456d565b90506146708282600060076401000003d019614a50565b156146835790955093506146e292505050565b505050808061469190615d4d565b9150506145cb565b5060405162461bcd60e51b815260206004820152601860248201527f4e6f2076616c696420706f696e742077617320666f756e6400000000000000006044820152606401610cf2565b9250929050565b6000806000806146fa8a8a8a614b09565b9150915060008061470c898989614b09565b915091506000806147288686868660006401000003d019614b2c565b90985096505050505050505b965096945050505050565b60008060fe60026147508c8c6149fa565b61475a8b8b6149fa565b6147648a8a6149fa565b61476e89896149fa565b60405160200161478396959493929190615d6c565b604051602081830303815290604052905060006002826040516147a69190615d31565b602060405180830381855afa1580156147c3573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906147e69190615c93565b6040518190529b9a5050505050505050505050565b60006001600160a01b038316158015906148595750826001600160a01b0316846001600160a01b031614806148355750614835848461326c565b8061485957506000828152600460205260409020546001600160a01b038481169116145b949350505050565b6001600160a01b03821661488b57604051633250574960e11b815260006004820152602401610cf2565b6000614899838360006137b2565b90506001600160a01b0381161561181c576040516339e3563760e11b815260006004820152602401610cf2565b60008560ff16600214806148dd57508560ff166003145b6149435760405162461bcd60e51b815260206004820152603160248201527f456c6c697074696343757276653a696e6e76616c696420636f6d7072657373656044820152700c8408a8640e0ded2dce840e0e4caccd2f607b1b6064820152608401610cf2565b6000828061495357614953615c0f565b838061496157614961615c0f565b85858061497057614970615c0f565b888a0908848061498257614982615c0f565b858061499057614990615c0f565b898a0989090890506149b98160046149a98660016159c4565b6149b39190615ded565b85614b60565b9050600060026149cc60ff8a16846159c4565b6149d69190615c25565b156149ea576149e58285615a45565b6149ec565b815b925050505b95945050505050565b60606000614a09600284615c25565b614a149060026159c4565b6040516001600160f81b031960f883901b1660208201526021810186905290915060410160405160208183030381529060405291505092915050565b6000851580614a5f5750818610155b80614a68575084155b80614a735750818510155b15614a80575060006149f1565b60008280614a9057614a90615c0f565b868709905060008380614aa557614aa5615c0f565b888580614ab457614ab4615c0f565b8a8b090990508515614ae4578380614ace57614ace615c0f565b8480614adc57614adc615c0f565b878a09820890505b8415614afe578380614af857614af8615c0f565b85820890505b149695505050505050565b600080614b2085858560006401000003d019614c37565b91509150935093915050565b600080600080614b3d888887614c71565b91509150614b4f8a8a84848a8a614c8a565b935093505050965096945050505050565b600081600003614bb25760405162461bcd60e51b815260206004820152601e60248201527f456c6c697074696343757276653a206d6f64756c7573206973207a65726f00006044820152606401610cf2565b83600003614bc25750600061311c565b82600003614bd25750600161311c565b6001600160ff1b5b8015614c2e57838186161515870a85848509099150836002820486161515870a85848509099150836004820486161515870a85848509099150836008820486161515870a8584850909915060109004614bda565b50949350505050565b6000806000806000614c4e8a8a8a60018b8b614d11565b925092509250614c6083838389614d93565b945094505050509550959350505050565b6000808483614c808682615a45565b614b209190615c25565b6000806000806000888b03614cda578580614ca757614ca7615c0f565b888b08600003614cc05760008094509450505050614734565b614cce8b8b60018a8a614e02565b91945092509050614cf3565b614ceb8b8b60018c8c60018c614fa5565b919450925090505b614cff83838389614d93565b94509450505050965096945050505050565b600080600088600003614d2b575086915085905084614d87565b8860008060015b8315614d7e576001841615614d5857614d508383838f8f8f8e614fa5565b919450925090505b614d63600285615ded565b9350614d728c8c8c8c8c614e02565b919d509b509950614d32565b91955093509150505b96509650969350505050565b6000806000614da285856152d8565b905060008480614db457614db4615c0f565b828309905060008580614dc957614dc9615c0f565b828a09905060008680614dde57614dde615c0f565b8780614dec57614dec615c0f565b8486098a09919a91995090975050505050505050565b600080600085600003614e1c575086915085905084614f9a565b60008480614e2c57614e2c615c0f565b898a09905060008580614e4157614e41615c0f565b898a09905060008680614e5657614e56615c0f565b898a09905060008780614e6b57614e6b615c0f565b8880614e7957614e79615c0f565b848e09600409905060008880614e9157614e91615c0f565b8980614e9f57614e9f615c0f565b8a80614ead57614ead615c0f565b8586098c098a80614ec057614ec0615c0f565b876003090890508880614ed557614ed5615c0f565b8980614ee357614ee3615c0f565b838408614ef0908b615a45565b8a80614efe57614efe615c0f565b8384090894508880614f1257614f12615c0f565b8980614f2057614f20615c0f565b8a80614f2e57614f2e615c0f565b868709600809614f3e908b615a45565b8a80614f4c57614f4c615c0f565b8b80614f5a57614f5a615c0f565b614f64898e615a45565b860884090893508880614f7957614f79615c0f565b8980614f8757614f87615c0f565b8c8e096002099497509295509293505050505b955095509592505050565b6000808089158015614fb5575088155b15614fc75750859150849050836152cb565b86158015614fd3575085155b15614fe55750889150879050866152cb565b614fed6153a4565b8480614ffb57614ffb615c0f565b898a098152848061500e5761500e615c0f565b81518a096020820152848061502557615025615c0f565b8687096040820152848061503b5761503b615c0f565b604082015187096060820152604080516080810190915280868061506157615061615c0f565b60408401518e098152602001868061507b5761507b615c0f565b60608401518d098152602001868061509557615095615c0f565b83518b09815260200186806150ac576150ac615c0f565b60208401518a099052604081015181519192501415806150d457506060810151602082015114155b6151205760405162461bcd60e51b815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e737465616400006044820152606401610cf2565b6151286153a4565b858061513657615136615c0f565b82516151429088615a45565b6040840151088152858061515857615158615c0f565b60208301516151679088615a45565b6060840151086020820152858061518057615180615c0f565b815180096040820152858061519757615197615c0f565b81516040830151096060820152600086806151b4576151b4615c0f565b60608301516151c39089615a45565b88806151d1576151d1615c0f565b6020850151800908905086806151e9576151e9615c0f565b87806151f7576151f7615c0f565b888061520557615205615c0f565b604085015186510960020961521a9089615a45565b820890506000878061522e5761522e615c0f565b888061523c5761523c615c0f565b615246848b615a45565b8a8061525457615254615c0f565b6040870151885109086020850151099050878061527357615273615c0f565b888061528157615281615c0f565b6060850151602087015109615296908a615a45565b82089050600088806152aa576152aa615c0f565b89806152b8576152b8615c0f565b8b8f098551099297509095509093505050505b9750975097945050505050565b600082158015906152e95750818314155b80156152f457508115155b6153315760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210373ab6b132b960911b6044820152606401610cf2565b6000600183825b8615615399576153488783615ded565b905082868061535957615359615c0f565b878061536757615367615c0f565b8584096153749089615a45565b86089094509250866153868183615a11565b6153909084615a45565b97509150615338565b509195945050505050565b60405180608001604052806004906020820280368337509192915050565b6001600160e01b03198116811461316e57600080fd5b6000602082840312156153ea57600080fd5b813561311c816153c2565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715615434576154346153f5565b604052919050565b600067ffffffffffffffff821115615456576154566153f5565b5060051b60200190565b80356001600160a01b038116811461547757600080fd5b919050565b600082601f83011261548d57600080fd5b813560206154a261549d8361543c565b61540b565b82815260059290921b840181019181810190868411156154c157600080fd5b8286015b848110156154e3576154d681615460565b83529183019183016154c5565b509695505050505050565b600082601f8301126154ff57600080fd5b8135602061550f61549d8361543c565b82815260059290921b8401810191818101908684111561552e57600080fd5b8286015b848110156154e35780358352918301918301615532565b60008060006060848603121561555e57600080fd5b833567ffffffffffffffff8082111561557657600080fd5b6155828783880161547c565b9450602086013591508082111561559857600080fd5b6155a4878388016154ee565b935060408601359150808211156155ba57600080fd5b506155c7868287016154ee565b9150509250925092565b60005b838110156155ec5781810151838201526020016155d4565b50506000910152565b6000815180845261560d8160208601602086016155d1565b601f01601f19169290920160200192915050565b60208152600061311c60208301846155f5565b60006020828403121561564657600080fd5b5035919050565b6000806040838503121561566057600080fd5b61566983615460565b946020939093013593505050565b60008060006060848603121561568c57600080fd5b61569584615460565b92506156a360208501615460565b9150604084013590509250925092565b6000602082840312156156c557600080fd5b813567ffffffffffffffff8111156156dc57600080fd5b6148598482850161547c565b634e487b7160e01b600052602160045260246000fd5b8151604082019060028110615715576157156156e8565b808352506020830151602083015292915050565b60006020828403121561573b57600080fd5b61311c82615460565b81518152602080830151908201526040808301519082015260608101610ca7565b6020808252825182820181905260009190848201906040850190845b8181101561579d57835183529284019291840191600101615781565b50909695505050505050565b801515811461316e57600080fd5b600080604083850312156157ca57600080fd5b6157d383615460565b915060208301356157e3816157a9565b809150509250929050565b6020810160048310615802576158026156e8565b91905290565b600082601f83011261581957600080fd5b813567ffffffffffffffff811115615833576158336153f5565b615846601f8201601f191660200161540b565b81815284602083860101111561585b57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561588e57600080fd5b61589785615460565b93506158a560208601615460565b925060408501359150606085013567ffffffffffffffff8111156158c857600080fd5b6158d487828801615808565b91505092959194509250565b600080604083850312156158f357600080fd5b6158fc83615460565b915061590a60208401615460565b90509250929050565b60006020828403121561592557600080fd5b813567ffffffffffffffff81111561593c57600080fd5b61485984828501615808565b6020808252601d908201527f416464207469636b65747320706572696f642068617320706173736564000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016159bd576159bd615995565b5060010190565b80820180821115610ca757610ca7615995565b600181811c908216806159eb57607f821691505b602082108103615a0b57634e487b7160e01b600052602260045260246000fd5b50919050565b8082028115828204841417610ca757610ca7615995565b600060208284031215615a3a57600080fd5b815161311c816157a9565b81810381811115610ca757610ca7615995565b602080825260139082015272139bdd081a5b8818db185a5b481c195c9a5bd9606a1b604082015260600190565b60208082526018908201527f57696e6e657273206e6f742073656c6563746564207965740000000000000000604082015260600190565b6020808252601a908201527f4661696c656420746f2073656e64206e617469766520636f696e000000000000604082015260600190565b60208082526024908201527f4e65772073746172742074696d65206d75737420626520696e207468652066756040820152637475726560e01b606082015260800190565b60208082526024908201527f57696e6e65722073656c656374696f6e2068617320616c7265616479207374616040820152631c9d195960e21b606082015260800190565b6020808252825182820181905260009190848201906040850190845b8181101561579d5783516001600160a01b031683529284019291840191600101615b97565b60008351615bce8184602088016155d1565b835190830190615be28183602088016155d1565b01949350505050565b80516020808301519190811015615a0b5760001960209190910360031b1b16919050565b634e487b7160e01b600052601260045260246000fd5b600082615c3457615c34615c0f565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615c6c908301846155f5565b9695505050505050565b600060208284031215615c8857600080fd5b815161311c816153c2565b600060208284031215615ca557600080fd5b5051919050565b600060ff60f81b808760f81b168352808660f81b166001840152508351615cda8160028501602088016155d1565b835190830190615cf18160028401602088016155d1565b016002019695505050505050565b60008351615d118184602088016155d1565b60f89390931b6001600160f81b0319169190920190815260010192915050565b60008251615d438184602087016155d1565b9190910192915050565b600060ff821660ff8103615d6357615d63615995565b60010192915050565b600060ff60f81b808960f81b168352808860f81b166001840152508551615d9a816002850160208a016155d1565b855190830190615db1816002840160208a016155d1565b8551910190615dc78160028401602089016155d1565b8451910190615ddd8160028401602088016155d1565b0160020198975050505050505050565b600082615dfc57615dfc615c0f565b50049056fea26469706673582212202e8316ea70633b5296a95180fcc689f1bb5b47e40b74876bda974d434c51086a64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1262,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1264,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1268,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1272,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1276,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1282,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6120,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "state",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(LaunchpadState)6117_storage"
      },
      {
        "astId": 8,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "_owner",
        "offset": 0,
        "slot": "38",
        "type": "t_address"
      },
      {
        "astId": 6167,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "39",
        "type": "t_uint256"
      },
      {
        "astId": 6172,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "tokenIdToState",
        "offset": 0,
        "slot": "40",
        "type": "t_mapping(t_uint256,t_struct(LaunchpadNftMetadata)6165_storage)"
      },
      {
        "astId": 6176,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "addressToTokenId",
        "offset": 0,
        "slot": "41",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(NumberOfWinningTicketsType)6015": {
        "encoding": "inplace",
        "label": "enum LaunchpadStorage.NumberOfWinningTicketsType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(TicketRange)6052_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LaunchpadStorage.TicketRange)",
        "numberOfBytes": "32",
        "value": "t_struct(TicketRange)6052_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(LaunchpadNftMetadata)6165_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFT.LaunchpadNftMetadata)",
        "numberOfBytes": "32",
        "value": "t_struct(LaunchpadNftMetadata)6165_storage"
      },
      "t_mapping(t_uint256,t_struct(TicketBatch)6045_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LaunchpadStorage.TicketBatch)",
        "numberOfBytes": "32",
        "value": "t_struct(TicketBatch)6045_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ConfigModule)6040_storage": {
        "encoding": "inplace",
        "label": "struct LaunchpadStorage.ConfigModule",
        "members": [
          {
            "astId": 6024,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "timeline",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Timeline)6012_storage"
          },
          {
            "astId": 6026,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "ticketToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6028,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "launchpadToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 6030,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "launchpadTokensPerWinningTicket",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6032,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "ticketPrice",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6035,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "numberOfWinningTickets",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(NumberOfWinningTickets)6021_storage"
          },
          {
            "astId": 6037,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "launchpadTokensDeposited",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 6039,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "claimableTicketPayment",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Flags)6005_storage": {
        "encoding": "inplace",
        "label": "struct LaunchpadStorage.Flags",
        "members": [
          {
            "astId": 5998,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "hasWinnerSelectionProcessStarted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6000,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "wereTicketsFiltered",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6002,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "winnersSelected",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6004,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "launchpadNfts",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(LaunchpadNftMetadata)6165_storage": {
        "encoding": "inplace",
        "label": "struct NFT.LaunchpadNftMetadata",
        "members": [
          {
            "astId": 6164,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "numberOfWinningTickets",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(LaunchpadState)6117_storage": {
        "encoding": "inplace",
        "label": "struct LaunchpadStorage.LaunchpadState",
        "members": [
          {
            "astId": 6055,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "flags",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Flags)6005_storage"
          },
          {
            "astId": 6058,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "configuration",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(ConfigModule)6040_storage"
          },
          {
            "astId": 6060,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "lastTicketId",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 6062,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "totalLaunchpadTokens",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 6066,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "winningTickets",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 6068,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "confirmedGuaranteedTickets",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 6070,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "ownerPaymentClaimed",
            "offset": 0,
            "slot": "16",
            "type": "t_bool"
          },
          {
            "astId": 6075,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "ticketBatch",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(TicketBatch)6045_storage)"
          },
          {
            "astId": 6080,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "ticketRangeForAddress",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_struct(TicketRange)6052_storage)"
          },
          {
            "astId": 6084,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "confirmedTicketsForAddress",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 6088,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "ticketPositionForTicketId",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 6092,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "blacklist",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 6094,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "totalGuaranteedWinningTickets",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 6096,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "selectWinnersProgress",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 6098,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "filterTicketsProgressStart",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256"
          },
          {
            "astId": 6100,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "filterTicketsProgressEnd",
            "offset": 0,
            "slot": "25",
            "type": "t_uint256"
          },
          {
            "astId": 6104,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "claimList",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 6108,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "numberOfWinningTicketsPerUser",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 6112,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "publicKey",
            "offset": 0,
            "slot": "28",
            "type": "t_array(t_uint256)2_storage"
          },
          {
            "astId": 6114,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "seed",
            "offset": 0,
            "slot": "30",
            "type": "t_bytes32"
          },
          {
            "astId": 6116,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "proof",
            "offset": 0,
            "slot": "31",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "1024"
      },
      "t_struct(NumberOfWinningTickets)6021_storage": {
        "encoding": "inplace",
        "label": "struct LaunchpadStorage.NumberOfWinningTickets",
        "members": [
          {
            "astId": 6018,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "ticketType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(NumberOfWinningTicketsType)6015"
          },
          {
            "astId": 6020,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TicketBatch)6045_storage": {
        "encoding": "inplace",
        "label": "struct LaunchpadStorage.TicketBatch",
        "members": [
          {
            "astId": 6042,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6044,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "nrTickets",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TicketRange)6052_storage": {
        "encoding": "inplace",
        "label": "struct LaunchpadStorage.TicketRange",
        "members": [
          {
            "astId": 6047,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "firstId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6049,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "lastId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6051,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "guaranteedWinners",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Timeline)6012_storage": {
        "encoding": "inplace",
        "label": "struct LaunchpadStorage.Timeline",
        "members": [
          {
            "astId": 6007,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "confirmationPeriodStartTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6009,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "winnerSelectionStartTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6011,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "claimStartTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}