{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/Blacklist.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./LaunchpadStorage.sol\";\nimport \"./Setup.sol\";\nimport \"./WinnerSelection.sol\";\nimport \"./Tickets.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nabstract contract Blacklist is LaunchpadStorage, Ownable, SetupModule, WinnerSelection {\n    using SafeERC20 for IERC20;\n\n    event UsersBlacklisted(address[] users);\n    event UsersRemovedFromBlacklist(address[] users);\n\n    function addUsersToBlacklist(address[] memory usersList) public onlyOwner beforeWinnerSelection {\n\n        require(usersList.length > 0, \"User list cannot be empty\");\n\n        for (uint256 i = 0; i < usersList.length; i++) {\n            address user = usersList[i];\n            _processRefund(user);\n            state.blacklist[user] = true;\n        }\n\n        emit UsersBlacklisted(usersList);\n    }\n\n    function removeUsersFromBlacklist(address[] memory usersList) public onlyOwner beforeWinnerSelection {\n\n        require(usersList.length > 0, \"User list cannot be empty\");\n\n        for (uint256 i = 0; i < usersList.length; i++) {\n            address user = usersList[i];\n            delete state.blacklist[user];\n        }\n\n        emit UsersRemovedFromBlacklist(usersList);\n    }\n\n    function _processRefund(address user) internal {\n        uint256 confirmedTickets = getNumberOfConfirmedTickets(user);\n        if (confirmedTickets > 0) {\n            uint256 refundAmount = confirmedTickets * (state.configuration.ticketPrice);\n            delete state.confirmedTicketsForAddress[user];\n            if (state.configuration.ticketToken == address(0)) {\n                (bool sent,) = user.call{value: refundAmount}(\"\");\n                require(sent, \"Failed to send native coin\");\n            } else {\n                IERC20(state.configuration.ticketToken).transfer(user, refundAmount);\n            }\n        }\n    }\n}"
    },
    "contracts/Config.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./LaunchpadStorage.sol\";\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nabstract contract ConfigurationModule is LaunchpadStorage {\n\n    function getTimeline() public view returns (Timeline memory) {\n        return state.configuration.timeline;\n    }\n\n    function getShufflerSeed() public view returns (string memory) {\n        return Strings.toString(uint256(state.seed));\n    }\n\n    function wereLaunchpadTokensDeposited() public view returns (bool) {\n        return state.configuration.launchpadTokensDeposited;\n    }\n\n    function getLaunchpadTokenId() public view returns (address) {\n        return state.configuration.launchpadToken;\n    }\n\n    function getLaunchpadTokensPerWinningTicket() public view returns (uint256) {\n        return state.configuration.launchpadTokensPerWinningTicket;\n    }\n\n    function getTicketPrice() public view returns (uint256) {\n        require(state.configuration.ticketPrice != 0, \"Ticket price not set\");\n        return state.configuration.ticketPrice;\n    }\n\n    function getNumberOfWinningTickets() public view returns (NumberOfWinningTickets memory) {\n        return state.configuration.numberOfWinningTickets;\n    }\n\n    function setClaimableTicketPayment(uint256 ticketPayment) internal {\n        state.configuration.claimableTicketPayment = ticketPayment;\n    }\n\n    function getClaimableTicketPayment() public view returns (uint256) {\n        return state.configuration.claimableTicketPayment;\n    }\n}"
    },
    "contracts/EllipticCurve.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n ** @title Elliptic Curve Library\n ** @dev Library providing arithmetic operations over elliptic curves.\n ** This library does not check whether the inserted points belong to the curve\n ** `isOnCurve` function should be used by the library user to check the aforementioned statement.\n ** @author Witnet Foundation\n */\nlibrary EllipticCurve {\n    // Pre-computed constant for 2 ** 255\n    uint256 private constant U255_MAX_PLUS_1 =\n    57896044618658097711785492504343953926634992332820282019728792003956564819968;\n\n    /// @dev Modular euclidean inverse of a number (mod p).\n    /// @param _x The number\n    /// @param _pp The modulus\n    /// @return q such that x*q = 1 (mod _pp)\n    function invMod(uint256 _x, uint256 _pp) internal pure returns (uint256) {\n        require(_x != 0 && _x != _pp && _pp != 0, \"Invalid number\");\n        uint256 q = 0;\n        uint256 newT = 1;\n        uint256 r = _pp;\n        uint256 t;\n        while (_x != 0) {\n            t = r / _x;\n            (q, newT) = (newT, addmod(q, (_pp - mulmod(t, newT, _pp)), _pp));\n            (r, _x) = (_x, r - t * _x);\n        }\n\n        return q;\n    }\n\n    /// @dev Modular exponentiation, b^e % _pp.\n    /// Source: https://github.com/androlo/standard-contracts/blob/master/contracts/src/crypto/ECCMath.sol\n    /// @param _base base\n    /// @param _exp exponent\n    /// @param _pp modulus\n    /// @return r such that r = b**e (mod _pp)\n    function expMod(\n        uint256 _base,\n        uint256 _exp,\n        uint256 _pp\n    )\n    internal pure\n    returns (uint256)\n    {\n        require(_pp != 0, \"EllipticCurve: modulus is zero\");\n\n        if (_base == 0) return 0;\n        if (_exp == 0) return 1;\n\n        uint256 r = 1;\n        uint256 bit = U255_MAX_PLUS_1;\n        assembly {\n            for {\n\n            } gt(bit, 0) {\n\n            } {\n                r := mulmod(\n                    mulmod(r, r, _pp),\n                    exp(_base, iszero(iszero(and(_exp, bit)))),\n                    _pp\n                )\n                r := mulmod(\n                    mulmod(r, r, _pp),\n                    exp(_base, iszero(iszero(and(_exp, div(bit, 2))))),\n                    _pp\n                )\n                r := mulmod(\n                    mulmod(r, r, _pp),\n                    exp(_base, iszero(iszero(and(_exp, div(bit, 4))))),\n                    _pp\n                )\n                r := mulmod(\n                    mulmod(r, r, _pp),\n                    exp(_base, iszero(iszero(and(_exp, div(bit, 8))))),\n                    _pp\n                )\n                bit := div(bit, 16)\n            }\n        }\n\n        return r;\n    }\n\n    /// @dev Converts a point (x, y, z) expressed in Jacobian coordinates to affine coordinates (x', y', 1).\n    /// @param _x coordinate x\n    /// @param _y coordinate y\n    /// @param _z coordinate z\n    /// @param _pp the modulus\n    /// @return (x', y') affine coordinates\n    function toAffine(\n        uint256 _x,\n        uint256 _y,\n        uint256 _z,\n        uint256 _pp\n    )\n    internal pure\n    returns (uint256, uint256)\n    {\n        uint256 zInv = invMod(_z, _pp);\n        uint256 zInv2 = mulmod(zInv, zInv, _pp);\n        uint256 x2 = mulmod(_x, zInv2, _pp);\n        uint256 y2 = mulmod(_y, mulmod(zInv, zInv2, _pp), _pp);\n\n        return (x2, y2);\n    }\n\n    /// @dev Derives the y coordinate from a compressed-format point x [[SEC-1]](https://www.secg.org/SEC1-Ver-1.0.pdf).\n    /// @param _prefix parity byte (0x02 even, 0x03 odd)\n    /// @param _x coordinate x\n    /// @param _aa constant of curve\n    /// @param _bb constant of curve\n    /// @param _pp the modulus\n    /// @return y coordinate y\n    function deriveY(\n        uint8 _prefix,\n        uint256 _x,\n        uint256 _aa,\n        uint256 _bb,\n        uint256 _pp\n    )\n    internal pure\n    returns (uint256)\n    {\n        require(\n            _prefix == 0x02 || _prefix == 0x03,\n            \"EllipticCurve:innvalid compressed EC point prefix\"\n        );\n\n        // x^3 + ax + b\n        uint256 y2 = addmod(\n            mulmod(_x, mulmod(_x, _x, _pp), _pp),\n            addmod(mulmod(_x, _aa, _pp), _bb, _pp),\n            _pp\n        );\n        y2 = expMod(y2, (_pp + 1) / 4, _pp);\n        // uint256 cmp = yBit ^ y_ & 1;\n        uint256 y = (y2 + _prefix) % 2 == 0 ? y2 : _pp - y2;\n\n        return y;\n    }\n\n    /// @dev Check whether point (x,y) is on curve defined by a, b, and _pp.\n    /// @param _x coordinate x of P1\n    /// @param _y coordinate y of P1\n    /// @param _aa constant of curve\n    /// @param _bb constant of curve\n    /// @param _pp the modulus\n    /// @return true if x,y in the curve, false else\n    function isOnCurve(\n        uint _x,\n        uint _y,\n        uint _aa,\n        uint _bb,\n        uint _pp\n    )\n    internal pure\n    returns (bool)\n    {\n        if (0 == _x || _x >= _pp || 0 == _y || _y >= _pp) {\n            return false;\n        }\n        // y^2\n        uint lhs = mulmod(_y, _y, _pp);\n        // x^3\n        uint rhs = mulmod(mulmod(_x, _x, _pp), _x, _pp);\n        if (_aa != 0) {\n            // x^3 + a*x\n            rhs = addmod(rhs, mulmod(_x, _aa, _pp), _pp);\n        }\n        if (_bb != 0) {\n            // x^3 + a*x + b\n            rhs = addmod(rhs, _bb, _pp);\n        }\n\n        return lhs == rhs;\n    }\n\n    /// @dev Calculate inverse (x, -y) of point (x, y).\n    /// @param _x coordinate x of P1\n    /// @param _y coordinate y of P1\n    /// @param _pp the modulus\n    /// @return (x, -y)\n    function ecInv(\n        uint256 _x,\n        uint256 _y,\n        uint256 _pp\n    )\n    internal pure\n    returns (uint256, uint256)\n    {\n        return (_x, (_pp - _y) % _pp);\n    }\n\n    /// @dev Add two points (x1, y1) and (x2, y2) in affine coordinates.\n    /// @param _x1 coordinate x of P1\n    /// @param _y1 coordinate y of P1\n    /// @param _x2 coordinate x of P2\n    /// @param _y2 coordinate y of P2\n    /// @param _aa constant of the curve\n    /// @param _pp the modulus\n    /// @return (qx, qy) = P1+P2 in affine coordinates\n    function ecAdd(\n        uint256 _x1,\n        uint256 _y1,\n        uint256 _x2,\n        uint256 _y2,\n        uint256 _aa,\n        uint256 _pp\n    )\n    internal pure\n    returns (uint256, uint256)\n    {\n        uint x = 0;\n        uint y = 0;\n        uint z = 0;\n\n        // Double if x1==x2 else add\n        if (_x1 == _x2) {\n            // y1 = -y2 mod p\n            if (addmod(_y1, _y2, _pp) == 0) {\n                return (0, 0);\n            } else {\n                // P1 = P2\n                (x, y, z) = jacDouble(_x1, _y1, 1, _aa, _pp);\n            }\n        } else {\n            (x, y, z) = jacAdd(_x1, _y1, 1, _x2, _y2, 1, _pp);\n        }\n        // Get back to affine\n        return toAffine(x, y, z, _pp);\n    }\n\n    /// @dev Substract two points (x1, y1) and (x2, y2) in affine coordinates.\n    /// @param _x1 coordinate x of P1\n    /// @param _y1 coordinate y of P1\n    /// @param _x2 coordinate x of P2\n    /// @param _y2 coordinate y of P2\n    /// @param _aa constant of the curve\n    /// @param _pp the modulus\n    /// @return (qx, qy) = P1-P2 in affine coordinates\n    function ecSub(\n        uint256 _x1,\n        uint256 _y1,\n        uint256 _x2,\n        uint256 _y2,\n        uint256 _aa,\n        uint256 _pp\n    )\n    internal pure\n    returns (uint256, uint256)\n    {\n        // invert square\n        (uint256 x, uint256 y) = ecInv(_x2, _y2, _pp);\n        // P1-square\n        return ecAdd(_x1, _y1, x, y, _aa, _pp);\n    }\n\n    /// @dev Multiply point (x1, y1, z1) times d in affine coordinates.\n    /// @param _k scalar to multiply\n    /// @param _x coordinate x of P1\n    /// @param _y coordinate y of P1\n    /// @param _aa constant of the curve\n    /// @param _pp the modulus\n    /// @return (qx, qy) = d*P in affine coordinates\n    function ecMul(\n        uint256 _k,\n        uint256 _x,\n        uint256 _y,\n        uint256 _aa,\n        uint256 _pp\n    )\n    internal pure\n    returns (uint256, uint256)\n    {\n        // Jacobian multiplication\n        (uint256 x1, uint256 y1, uint256 z1) = jacMul(_k, _x, _y, 1, _aa, _pp);\n        // Get back to affine\n        return toAffine(x1, y1, z1, _pp);\n    }\n\n    /// @dev Adds two points (x1, y1, z1) and (x2 y2, z2).\n    /// @param _x1 coordinate x of P1\n    /// @param _y1 coordinate y of P1\n    /// @param _z1 coordinate z of P1\n    /// @param _x2 coordinate x of square\n    /// @param _y2 coordinate y of square\n    /// @param _z2 coordinate z of square\n    /// @param _pp the modulus\n    /// @return (qx, qy, qz) P1+square in Jacobian\n    function jacAdd(\n        uint256 _x1,\n        uint256 _y1,\n        uint256 _z1,\n        uint256 _x2,\n        uint256 _y2,\n        uint256 _z2,\n        uint256 _pp\n    )\n    internal pure\n    returns (uint256, uint256, uint256)\n    {\n        if (_x1 == 0 && _y1 == 0) return (_x2, _y2, _z2);\n        if (_x2 == 0 && _y2 == 0) return (_x1, _y1, _z1);\n\n        // We follow the equations described in https://pdfs.semanticscholar.org/5c64/29952e08025a9649c2b0ba32518e9a7fb5c2.pdf Section 5\n        uint[4] memory zs; // z1^2, z1^3, z2^2, z2^3\n        zs[0] = mulmod(_z1, _z1, _pp);\n        zs[1] = mulmod(_z1, zs[0], _pp);\n        zs[2] = mulmod(_z2, _z2, _pp);\n        zs[3] = mulmod(_z2, zs[2], _pp);\n\n        // u1, s1, u2, s2\n        zs = [\n                        mulmod(_x1, zs[2], _pp),\n                        mulmod(_y1, zs[3], _pp),\n                        mulmod(_x2, zs[0], _pp),\n                        mulmod(_y2, zs[1], _pp)\n            ];\n\n        // In case of zs[0] == zs[2] && zs[1] == zs[3], double function should be used\n        require(\n            zs[0] != zs[2] || zs[1] != zs[3],\n            \"Use jacDouble function instead\"\n        );\n\n        uint[4] memory hr;\n        //h\n        hr[0] = addmod(zs[2], _pp - zs[0], _pp);\n        //r\n        hr[1] = addmod(zs[3], _pp - zs[1], _pp);\n        //h^2\n        hr[2] = mulmod(hr[0], hr[0], _pp);\n        // h^3\n        hr[3] = mulmod(hr[2], hr[0], _pp);\n        // qx = -h^3  -2u1h^2+r^2\n        uint256 qx = addmod(mulmod(hr[1], hr[1], _pp), _pp - hr[3], _pp);\n        qx = addmod(qx, _pp - mulmod(2, mulmod(zs[0], hr[2], _pp), _pp), _pp);\n        // qy = -s1*z1*h^3+r(u1*h^2 -x^3)\n        uint256 qy = mulmod(\n            hr[1],\n            addmod(mulmod(zs[0], hr[2], _pp), _pp - qx, _pp),\n            _pp\n        );\n        qy = addmod(qy, _pp - mulmod(zs[1], hr[3], _pp), _pp);\n        // qz = h*z1*z2\n        uint256 qz = mulmod(hr[0], mulmod(_z1, _z2, _pp), _pp);\n        return (qx, qy, qz);\n    }\n\n    /// @dev Doubles a points (x, y, z).\n    /// @param _x coordinate x of P1\n    /// @param _y coordinate y of P1\n    /// @param _z coordinate z of P1\n    /// @param _aa the a scalar in the curve equation\n    /// @param _pp the modulus\n    /// @return (qx, qy, qz) 2P in Jacobian\n    function jacDouble(\n        uint256 _x,\n        uint256 _y,\n        uint256 _z,\n        uint256 _aa,\n        uint256 _pp\n    )\n    internal pure\n    returns (uint256, uint256, uint256)\n    {\n        if (_z == 0) return (_x, _y, _z);\n\n        // We follow the equations described in https://pdfs.semanticscholar.org/5c64/29952e08025a9649c2b0ba32518e9a7fb5c2.pdf Section 5\n        // Note: there is a bug in the paper regarding the m parameter, M=3*(x1^2)+a*(z1^4)\n        // x, y, z at this point represent the squares of _x, _y, _z\n        uint256 x = mulmod(_x, _x, _pp); //x1^2\n        uint256 y = mulmod(_y, _y, _pp); //y1^2\n        uint256 z = mulmod(_z, _z, _pp); //z1^2\n\n        // s\n        uint s = mulmod(4, mulmod(_x, y, _pp), _pp);\n        // m\n        uint m = addmod(\n            mulmod(3, x, _pp),\n            mulmod(_aa, mulmod(z, z, _pp), _pp),\n            _pp\n        );\n\n        // x, y, z at this point will be reassigned and rather represent qx, qy, qz from the paper\n        // This allows to reduce the gas cost and stack footprint of the algorithm\n        // qx\n        x = addmod(mulmod(m, m, _pp), _pp - addmod(s, s, _pp), _pp);\n        // qy = -8*y1^4 + M(S-T)\n        y = addmod(\n            mulmod(m, addmod(s, _pp - x, _pp), _pp),\n            _pp - mulmod(8, mulmod(y, y, _pp), _pp),\n            _pp\n        );\n        // qz = 2*y1*z1\n        z = mulmod(2, mulmod(_y, _z, _pp), _pp);\n\n        return (x, y, z);\n    }\n\n    /// @dev Multiply point (x, y, z) times d.\n    /// @param _d scalar to multiply\n    /// @param _x coordinate x of P1\n    /// @param _y coordinate y of P1\n    /// @param _z coordinate z of P1\n    /// @param _aa constant of curve\n    /// @param _pp the modulus\n    /// @return (qx, qy, qz) d*P1 in Jacobian\n    function jacMul(\n        uint256 _d,\n        uint256 _x,\n        uint256 _y,\n        uint256 _z,\n        uint256 _aa,\n        uint256 _pp\n    )\n    internal pure\n    returns (uint256, uint256, uint256)\n    {\n        // Early return in case that `_d == 0`\n        if (_d == 0) {\n            return (_x, _y, _z);\n        }\n\n        uint256 remaining = _d;\n        uint256 qx = 0;\n        uint256 qy = 0;\n        uint256 qz = 1;\n\n        // Double and add algorithm\n        while (remaining != 0) {\n            if ((remaining & 1) != 0) {\n                (qx, qy, qz) = jacAdd(qx, qy, qz, _x, _y, _z, _pp);\n            }\n            remaining = remaining / 2;\n            (_x, _y, _z) = jacDouble(_x, _y, _z, _aa, _pp);\n        }\n        return (qx, qy, qz);\n    }\n}"
    },
    "contracts/Launchpad.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./VRF.sol\";\n\n\nimport \"./LaunchpadStorage.sol\";\nimport \"./Config.sol\";\nimport \"./Tickets.sol\";\nimport \"./UserInteractions.sol\";\nimport \"./Blacklist.sol\";\nimport \"./Nfts.sol\";\n\ncontract Launchpad is LaunchpadStorage, Ownable, ConfigurationModule, Tickets, UserInteractions, Blacklist, NFT {\n    using SafeERC20 for IERC20;\n\n    uint32 constant callbackGasLimit = 40000;\n    uint16 constant requestConfirmations = 3;\n    uint32 constant numWords = 1;\n\n    uint256 constant FIRST_TICKET_ID = 1;\n    bool constant WINNING_TICKET = true;\n\n    event ShufflerInitialized(uint256 randomSeed);\n\n    function initShuffler(bytes memory proof_bytes) public {\n        require(state.publicKey[0] != 0 && state.publicKey[1] != 0, \"Public key not set\");\n        uint256[4] memory proof = VRF.decodeProof(proof_bytes);\n        require(VRF.verify(state.publicKey, proof, bytes(getShufflerSeed())), \"Invalid proof\");\n        state.proof = uint256(bytes32(proof_bytes));\n        emit ShufflerInitialized(state.proof);\n    }\n\n    constructor(\n        bytes memory proofZero,\n        bytes memory publicKeyBytes,\n        address launchpadTokenId,\n        uint256 launchpadTokensPerWinningTicket,\n        address ticketPaymentToken,\n        uint256 ticketPrice,\n        uint256 nrWinningTickets,\n        uint256 confirmationPeriodStartTime,\n        uint256 winnerSelectionStartTime,\n        uint256 claimStartTime\n    ) Ownable(msg.sender) NFT() {\n        require(nrWinningTickets > 0, \"Number of winning tickets must be greater than zero\");\n        uint256[2] memory publicKey = VRF.decodePoint(publicKeyBytes);\n        state.publicKey = publicKey;\n        require(VRF.verify(publicKey, VRF.decodeProof(proofZero), bytes(\"0\")), \"Invalid proof\");\n        state.configuration = ConfigModule({\n            timeline: Timeline({\n            confirmationPeriodStartTime: confirmationPeriodStartTime,\n            winnerSelectionStartTime: winnerSelectionStartTime,\n            claimStartTime: claimStartTime\n        }),\n            launchpadToken: launchpadTokenId,\n            launchpadTokensPerWinningTicket: launchpadTokensPerWinningTicket,\n            ticketToken: ticketPaymentToken,\n            ticketPrice: ticketPrice,\n            numberOfWinningTickets: NumberOfWinningTickets({\n            ticketType: NumberOfWinningTicketsType.BeforeFiltering,\n            value: nrWinningTickets\n        }),\n            launchpadTokensDeposited: false,\n            claimableTicketPayment: 0\n        });\n\n        state.flags = Flags({\n            hasWinnerSelectionProcessStarted: false,\n            wereTicketsFiltered: false,\n            winnersSelected: false,\n            launchpadNfts: false\n        });\n\n        state.lastTicketId = 0;\n\n        require(\n            confirmationPeriodStartTime < winnerSelectionStartTime &&\n            winnerSelectionStartTime < claimStartTime &&\n            confirmationPeriodStartTime > block.timestamp,\n            \"Invalid time periods\"\n        );\n    }\n}"
    },
    "contracts/LaunchpadStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract LaunchpadStorage {\n\n    struct Flags {\n        bool hasWinnerSelectionProcessStarted;\n        bool wereTicketsFiltered;\n        bool winnersSelected;\n        bool launchpadNfts;\n    }\n\n    struct Timeline {\n        uint256 confirmationPeriodStartTime;\n        uint256 winnerSelectionStartTime;\n        uint256 claimStartTime;\n    }\n\n    enum NumberOfWinningTicketsType {BeforeFiltering, AfterFiltering}\n\n    struct NumberOfWinningTickets {\n        NumberOfWinningTicketsType ticketType;\n        uint256 value;\n    }\n\n    struct ConfigModule {\n        Timeline timeline;\n        address ticketToken;\n        address launchpadToken;\n        uint256 launchpadTokensPerWinningTicket;\n        uint256 ticketPrice;\n        NumberOfWinningTickets numberOfWinningTickets;\n        bool launchpadTokensDeposited;\n        uint256 claimableTicketPayment;\n    }\n\n    struct TicketBatch {\n        address addr;\n        uint256 nrTickets;\n    }\n\n    struct TicketRange {\n        uint256 firstId;\n        uint256 lastId;\n        uint256 guaranteedWinners;\n    }\n\n    struct LaunchpadState {\n        Flags flags;\n        ConfigModule configuration;\n        uint256 lastTicketId;\n        uint256 totalLaunchpadTokens;\n        mapping(uint256 => bool) winningTickets;\n        uint256 confirmedGuaranteedTickets;\n        bool ownerPaymentClaimed;\n        mapping(uint256 => TicketBatch) ticketBatch;\n        mapping(address => TicketRange) ticketRangeForAddress;\n        mapping(address => uint256) confirmedTicketsForAddress;\n        mapping(uint256 => uint256) ticketPositionForTicketId;\n        mapping(address => bool) blacklist;\n        uint256 totalGuaranteedWinningTickets;\n        uint256 selectWinnersProgress;\n        uint256 filterTicketsProgressStart;\n        uint256 filterTicketsProgressEnd;\n        mapping(address => bool) claimList;\n        mapping(address => uint256) numberOfWinningTicketsPerUser;\n        uint256[2] publicKey;\n        bytes32 seed;\n        uint256 proof;\n    }\n\n    LaunchpadState internal state;\n}"
    },
    "contracts/LaunchStage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./LaunchpadStorage.sol\";\n\nabstract contract LaunchStageModule is LaunchpadStorage {\n\n     enum LaunchStage {\n        AddTickets,\n        Confirm,\n        WinnerSelection,\n        Claim\n    }\n\n    function getLaunchStage() public view returns (LaunchStage) {\n        uint256 currentTime = block.timestamp;\n        Timeline memory timeline = state.configuration.timeline;\n\n        // Determine the launch stage based on the current time and timeline\n        if (currentTime < timeline.confirmationPeriodStartTime) {\n            // Before confirmation period starts\n            return LaunchStage.AddTickets;\n        }\n\n        if (currentTime < timeline.winnerSelectionStartTime) {\n            // During confirmation period\n            return LaunchStage.Confirm;\n        }\n\n        if (currentTime < timeline.claimStartTime) {\n            // Before claim start time\n            return LaunchStage.WinnerSelection;\n        }\n\n        // After claim start time\n        return LaunchStage.Claim;\n    }\n\n    modifier requireAddTicketsPeriod() {\n        LaunchStage currentStage = getLaunchStage();\n        require(currentStage == LaunchStage.AddTickets, \"Add tickets period has passed\");\n        _;\n    }\n\n    modifier requireConfirmationPeriod() {\n        LaunchStage currentStage = getLaunchStage();\n        require(currentStage == LaunchStage.Confirm, \"Not in confirmation period\");\n        _;\n    }\n\n    modifier requireBeforeWinnerSelectionPeriod() {\n        LaunchStage currentStage = getLaunchStage();\n        require(currentStage < LaunchStage.WinnerSelection, \"Add tickets period has passed\");\n        _;\n    }\n\n    modifier requireWinnerSelectionPeriod() {\n        LaunchStage currentStage = getLaunchStage();\n        require(currentStage == LaunchStage.WinnerSelection, \"Not in winner selection period\");\n        _;\n    }\n\n    modifier requireClaimPeriod() {\n        LaunchStage currentStage = getLaunchStage();\n        require(currentStage == LaunchStage.Claim, \"Not in claim period\");\n        require(state.flags.winnersSelected, \"Winners not selected yet\");\n        _;\n    }\n\n    function getLaunchpadStageFlags() public view returns (Flags memory) {\n        return state.flags;\n    }\n}"
    },
    "contracts/MockToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockToken is ERC20 {\n    constructor() ERC20(\"USDC\", \"USC\") {}\n\n    function mint(address to, uint256 amount) public {\n        _mint(to, amount);\n    }\n}"
    },
    "contracts/Nfts.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./LaunchpadStorage.sol\";\nimport \"./WinnerSelection.sol\";\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract NFT is ERC721, LaunchStageModule, WinnerSelection{\n\n    struct LaunchpadNftMetadata {\n        uint256 numberOfWinningTickets;\n    }\n\n    uint256 private tokenCounter;\n    mapping(uint256 => LaunchpadNftMetadata) private tokenIdToState;\n    mapping(address => uint256) private addressToTokenId;\n\n    event CreatedNFT(uint256 tokenId);\n\n    constructor() ERC721(\"Launchpad NFT\", \"LNFT\") {\n        tokenCounter = 0;\n    }\n\n    function claimNft() public\n        requireClaimPeriod \n        requireNftLaunchpadEnabled\n        requireTokensClaimed \n    {\n   \n        uint256 tokenId = tokenCounter;\n        _safeMint(msg.sender, tokenId);\n\n        uint256 winningTicketsPerUser = getNumberOfWinningPerUser(msg.sender);\n\n        tokenIdToState[tokenId] = LaunchpadNftMetadata(winningTicketsPerUser);\n\n        tokenCounter ++;\n        emit CreatedNFT(tokenCounter);\n    }\n\n    function getTokenCounter() public view returns (uint256) {\n        return tokenCounter;\n    }\n\n    function setNftLaunchpad() public onlyOwner {\n         state.flags.launchpadNfts = true;\n    }\n\n    function getNftLaunchpadInfo(address owner) public view returns (LaunchpadNftMetadata memory) {\n        uint256 tokenId = addressToTokenId[owner];\n        return tokenIdToState[tokenId];\n    }\n\n    modifier requireNftLaunchpadEnabled() {\n        require(state.flags.launchpadNfts, \"NFT launchpad is not enabled\");\n        _;\n    }\n\n    modifier requireTokensClaimed() {\n        require(state.claimList[msg.sender], \"Tokens not claimed yet\");\n        _;\n    }\n}"
    },
    "contracts/OwnableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// import {Ownable} from \"../utils/Ownable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract OwnableMock is Ownable {\n    constructor(address newOwner)\n        Ownable(newOwner)\n    {}\n}"
    },
    "contracts/Setup.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./LaunchpadStorage.sol\";\nimport \"./LaunchStage.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nabstract contract SetupModule is LaunchpadStorage, Ownable, LaunchStageModule {\n    using SafeERC20 for IERC20;\n\n    event LaunchpadTokensDeposited(uint256 amount, address token);\n    event TicketPriceSet(uint256 amount, address token);\n    event LaunchpadTokensPerWinningTicketSet(uint256 amount);\n    event TicketTokenSet(address token);\n    event LaunchpadTokenSet(address token);\n    event ConfirmationPeriodStartTimeSet(uint256 startTime);\n    event WinnerSelectionStartTimeSet(uint256 startTime);\n    event ClaimStartTimeSet(uint256 startTime);\n\n    function depositInitialLaunchpadTokens() public onlyOwner beforeWinnerSelection {\n        depositLaunchpadTokens(state.configuration.numberOfWinningTickets.value, false);\n    }\n\n    function depositExtraLaunchpadTokens(uint256 extraWinningTickets) public onlyOwner beforeWinnerSelection {\n        depositLaunchpadTokens(extraWinningTickets, true);\n    }\n\n    function depositLaunchpadTokens(uint256 totalWinningTickets, bool extra) internal onlyOwner beforeWinnerSelection {\n        require(!state.configuration.launchpadTokensDeposited || extra, \"Tokens already deposited\");\n        require(state.configuration.launchpadTokensDeposited || !extra, \"Deposit initial launchpad tokens before adding extra\");\n\n        if (!extra) {\n            require(totalWinningTickets == state.configuration.numberOfWinningTickets.value, \"Incorrect deposit amount\");\n        }\n\n        uint256 amountPerTicket = state.configuration.launchpadTokensPerWinningTicket;\n        uint256 amountNeeded = amountPerTicket * totalWinningTickets;\n\n        IERC20 launchpadToken = IERC20(state.configuration.launchpadToken);\n        uint256 balanceBefore = launchpadToken.balanceOf(address(this));\n        launchpadToken.transferFrom(msg.sender, address(this), amountNeeded);\n        uint256 balanceAfter = launchpadToken.balanceOf(address(this));\n        uint256 amountDeposited = balanceAfter - balanceBefore;\n\n        state.totalLaunchpadTokens = state.totalLaunchpadTokens + amountDeposited;\n\n        if (extra) {\n            state.configuration.numberOfWinningTickets = addToNumberOfWinningTickets(\n                state.configuration.numberOfWinningTickets,\n                totalWinningTickets\n            );\n        }\n\n        state.configuration.launchpadTokensDeposited = true;\n\n        emit LaunchpadTokensDeposited(amountDeposited, address(launchpadToken));\n    }\n\n    function setTicketPrice(uint256 amount) public onlyOwner requireAddTicketsPeriod {\n        require(amount > 0, \"Ticket price must be higher than 0\");\n        state.configuration.ticketPrice = amount;\n        emit TicketPriceSet(amount, state.configuration.ticketToken);\n    }\n\n    function setLaunchpadTokensPerWinningTicket(uint256 amount) public onlyOwner requireAddTicketsPeriod {\n        require(amount > 0, \"Launchpad tokens per winning ticket cannot be set to zero\");\n        state.configuration.launchpadTokensPerWinningTicket = amount;\n        emit LaunchpadTokensPerWinningTicketSet(amount);\n    }\n\n    function setTicketToken(address newTicketToken) public onlyOwner requireAddTicketsPeriod {\n        require(newTicketToken != address(0), \"Invalid token address\");\n        state.configuration.ticketToken = newTicketToken;\n        emit TicketTokenSet(newTicketToken);\n    }\n\n    function setLaunchpadToken(address newLaunchpadToken) public onlyOwner requireAddTicketsPeriod {\n        require(newLaunchpadToken != address(0), \"Invalid token address\");\n        state.configuration.launchpadToken = newLaunchpadToken;\n        emit LaunchpadTokenSet(newLaunchpadToken);\n    }\n\n    function setConfirmationPeriodStartTime(uint256 newStartTime) public onlyOwner {\n        require(newStartTime > block.timestamp, \"New start time must be in the future\");\n        require(newStartTime < state.configuration.timeline.winnerSelectionStartTime, \"Must be before winner selection\");\n        state.configuration.timeline.confirmationPeriodStartTime = newStartTime;\n        emit ConfirmationPeriodStartTimeSet(newStartTime);\n    }\n\n    function setWinnerSelectionStartTime(uint256 newStartTime) public onlyOwner {\n        require(newStartTime > block.timestamp, \"New start time must be in the future\");\n        require(newStartTime > state.configuration.timeline.confirmationPeriodStartTime, \"Must be after confirmation period\");\n        require(newStartTime < state.configuration.timeline.claimStartTime, \"Must be before claim period\");\n        state.configuration.timeline.winnerSelectionStartTime = newStartTime;\n        emit WinnerSelectionStartTimeSet(newStartTime);\n    }\n\n    function setClaimStartTime(uint256 newStartTime) public onlyOwner {\n        require(newStartTime > block.timestamp, \"New start time must be in the future\");\n        require(newStartTime > state.configuration.timeline.winnerSelectionStartTime, \"Must be after winner selection\");\n        state.configuration.timeline.claimStartTime = newStartTime;\n        emit ClaimStartTimeSet(newStartTime);\n    }\n\n    modifier beforeWinnerSelection() {\n        require(getLaunchStage() < LaunchStage.WinnerSelection, \"Winner selection has already started\");\n        _;\n    }\n\n    function addToNumberOfWinningTickets(NumberOfWinningTickets memory nwt, uint256 value) internal pure returns (NumberOfWinningTickets memory) {\n        return NumberOfWinningTickets({\n            ticketType: nwt.ticketType,\n            value: nwt.value + value\n        });\n    }\n}"
    },
    "contracts/Tickets.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./LaunchpadStorage.sol\";\nimport \"./LaunchStage.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nabstract contract Tickets is LaunchpadStorage, Ownable, LaunchStageModule {\n    using SafeERC20 for IERC20;\n\n    event TicketsAdded(uint256 uniqueAddressesAddedCount);\n    event TicketPaymentClaimed(uint256 claimedTicketPayment, uint256 extraLaunchpadTokens);\n\n    function addTickets(address[] memory buyers, uint256[] memory confirmableTickets, uint256[] memory guaranteedWinning)\n    public onlyOwner requireBeforeWinnerSelectionPeriod\n    {\n        require(buyers.length == confirmableTickets.length && buyers.length == guaranteedWinning.length, \"Input arrays must have the same length\");\n\n        uint256 uniqueCount = 0;\n        uint256 totalWinning = state.totalGuaranteedWinningTickets;\n        uint256 maxWinning = state.configuration.numberOfWinningTickets.value;\n\n        for (uint256 i = 0; i < buyers.length; i++) {\n            if (tryCreateTickets(buyers[i], confirmableTickets[i], guaranteedWinning[i])) {\n                require(confirmableTickets[i] >= guaranteedWinning[i], \"Can't add more guaranteed winning than confirmable tickets\");\n                uniqueCount++;\n                totalWinning += guaranteedWinning[i];\n                require(totalWinning <= maxWinning, \"Attempted to add too many guaranteed winning tickets\");\n            }\n        }\n\n        require(uniqueCount > 0, \"All input addresses have already been added to the launchpad\");\n\n        state.totalGuaranteedWinningTickets = totalWinning;\n\n        emit TicketsAdded(uniqueCount);\n    }\n\n    function tryCreateTickets(address buyer, uint256 nrTickets, uint256 guaranteedWinners) internal returns (bool) {\n        if (state.ticketRangeForAddress[buyer].lastId != 0) {\n            return false;\n        }\n\n        uint256 firstTicketId = state.lastTicketId + 1;\n        uint256 lastTicketId = firstTicketId + nrTickets - 1;\n\n        state.ticketRangeForAddress[buyer] = TicketRange({\n            firstId: firstTicketId,\n            lastId: lastTicketId,\n            guaranteedWinners: guaranteedWinners\n        });\n\n        state.ticketBatch[firstTicketId] = TicketBatch({\n            addr: buyer,\n            nrTickets: nrTickets\n        });\n\n        state.lastTicketId = lastTicketId;\n\n        return true;\n    }\n\n    function claimTicketPayment() public onlyOwner requireClaimPeriod {\n        require(!state.ownerPaymentClaimed, \"Ticket payment + leftover launchpad token refund for owner already claimed\");\n        state.ownerPaymentClaimed = true;\n\n        uint256 claimableTicketPayment = state.configuration.claimableTicketPayment;\n        uint256 extraLaunchpadTokens = 0;\n\n        if (claimableTicketPayment > 0 && state.flags.winnersSelected) {\n            // Transfer ticket payment to owner\n            if (state.configuration.ticketToken == address(0)) {\n                (bool sent,) = owner().call{value: claimableTicketPayment}(\"\");\n                require(sent, \"Failed to send native coin\");\n            } else {\n                IERC20(state.configuration.ticketToken).transfer(owner(), claimableTicketPayment);\n            }\n        }\n\n        uint256 launchpadTokensBalance = state.totalLaunchpadTokens;\n        uint256 numberOfWinningTickets = state.flags.winnersSelected ?\n            state.configuration.numberOfWinningTickets.value : 0;\n        uint256 launchpadTokensNeeded = state.configuration.launchpadTokensPerWinningTicket * numberOfWinningTickets;\n\n        if (launchpadTokensBalance > launchpadTokensNeeded) {\n            extraLaunchpadTokens = launchpadTokensBalance - launchpadTokensNeeded;\n            // Transfer extra launchpad tokens to owner\n            // Assuming launchpadToken is an ERC20 token\n            IERC20(state.configuration.launchpadToken).transfer(owner(), extraLaunchpadTokens);\n        }\n\n        emit TicketPaymentClaimed(claimableTicketPayment, extraLaunchpadTokens);\n    }\n\n    function getTotalNumberOfTicketsForAddress(address addr) public view returns (uint256) {\n        TicketRange memory range = state.ticketRangeForAddress[addr];\n        if (range.lastId == 0) return 0;\n        return range.lastId - range.firstId + 1;\n    }\n\n    function getTotalNumberOfTickets() public view returns (uint256) {\n        return state.lastTicketId;\n    }\n\n    function clearTicketPos(uint256 ticketPos) internal {\n        delete state.ticketPositionForTicketId[ticketPos];\n    }\n\n    function getTotalConfirmedTickets() public view returns (uint256) {\n        return state.lastTicketId;\n    }\n\n    function removeWinningTicket(uint256 ticketId) internal {\n        delete state.winningTickets[ticketId];\n    }\n\n    function setNumberOfConfirmedTickets(address addr, uint256 tickets) internal {\n        state.confirmedTicketsForAddress[addr] = tickets;\n    }\n\n    function getLastTicketId() public view returns (uint256) {\n        return state.lastTicketId;\n    }\n\n    function getAddTicketsPeriodEndTime() public view returns (uint256) {\n        return state.configuration.timeline.confirmationPeriodStartTime;\n    }\n\n    function getWinnerSelectionStartTime() public view returns (uint256) {\n        return state.configuration.timeline.winnerSelectionStartTime;\n    }\n\n    function getClaimStartTime() public view returns (uint256) {\n        return state.configuration.timeline.claimStartTime;\n    }\n\n    function numberOfWinningTicketsToUint256(NumberOfWinningTickets memory nwt) internal pure returns (uint256) {\n        return nwt.value;\n    }\n\n    function clearTickets(address addr) internal {\n        delete state.confirmedTicketsForAddress[addr];\n    }\n}"
    },
    "contracts/UserInteractions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./LaunchpadStorage.sol\";\nimport \"./LaunchStage.sol\";\nimport \"./Tickets.sol\";\nimport \"./WinnerSelection.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nabstract contract UserInteractions is LaunchpadStorage, Ownable, LaunchStageModule, Tickets, WinnerSelection {\n    using SafeERC20 for IERC20;\n\n     event TicketsConfirmed(address indexed user, uint256 ticketsConfirmed);\n     event TokensClaimed(address indexed user, uint256 redeemableTickets, uint256 refundedTickets);\n\n    function confirmTickets(uint256 nrTicketsToConfirm) payable public requireConfirmationPeriod {\n        require(state.configuration.launchpadTokensDeposited, \"Launchpad tokens not deposited yet\");\n        requireUserIsNotBlacklisted(msg.sender);\n\n        uint256 totalTickets = getTotalNumberOfTicketsForAddress(msg.sender);\n        uint256 nrConfirmed = getNumberOfConfirmedTickets(msg.sender);\n        uint256 totalConfirmed = nrConfirmed + nrTicketsToConfirm;\n        require(totalConfirmed <= totalTickets, \"Trying to confirm too many tickets\");\n\n        uint256 ticketPrice = state.configuration.ticketPrice;\n        uint256 totalPrice = ticketPrice * nrTicketsToConfirm;\n\n        // Native token transfer\n        if (state.configuration.ticketToken == address(0)) {\n            require(msg.value == totalPrice, \"Funds in message should match total required price\");\n        } else {\n            IERC20(state.configuration.ticketToken).transferFrom(msg.sender, address(this), totalPrice);\n        }\n\n        setNumberOfConfirmedTickets(msg.sender, totalConfirmed);\n\n        state.seed = keccak256(bytes.concat(state.seed, keccak256(bytes.concat(bytes32(totalConfirmed)))));\n\n        emit TicketsConfirmed(msg.sender, nrTicketsToConfirm);\n    }\n\n    function requireUserIsNotBlacklisted(address user) internal view {\n        require(!state.blacklist[user], \"User is blacklisted and may not confirm tickets\");\n    }\n\n    function claimLaunchpadTokens() public requireClaimPeriod {\n        require(!state.claimList[msg.sender], \"Already claimed\");\n\n        TicketRange memory ticketRange = getTicketRangeForAddress(msg.sender);\n        uint256 nrConfirmedTickets = ticketRange.guaranteedWinners;\n        uint256 nrRedeemableTickets = ticketRange.guaranteedWinners;\n\n        state.claimList[msg.sender] = true;\n\n        if (!state.flags.winnersSelected) {\n            uint256 confirmed = getNumberOfConfirmedTickets(msg.sender);\n            uint256 refundAmount = state.configuration.ticketPrice * confirmed;\n            if (state.configuration.ticketToken == address(0)) {\n                (bool sent,) = msg.sender.call{value: refundAmount}(\"\");\n                require(sent, \"Failed to send native coin\");\n            } else {\n                IERC20(state.configuration.ticketToken).transfer(msg.sender, refundAmount);\n            }\n            emit TokensClaimed(msg.sender, 0, confirmed);\n        } else {\n            for (uint256 ticketId = ticketRange.firstId; ticketId <= ticketRange.lastId; ticketId++) {\n                nrConfirmedTickets = nrConfirmedTickets + 1;\n                if (isWinningTicket(ticketId)) {\n                    removeWinningTicket(ticketId);\n                    nrRedeemableTickets = nrRedeemableTickets + 1;\n                }\n                clearTicketPos(ticketId);\n            }\n\n            state.numberOfWinningTicketsPerUser[msg.sender] = nrRedeemableTickets;\n            clearTickets(msg.sender);\n\n            uint256 nrTicketsToRefund = nrConfirmedTickets - nrRedeemableTickets;\n            uint256 ticketPaymentRefundAmount = state.configuration.ticketPrice * nrTicketsToRefund;\n\n            if (state.configuration.ticketToken == address(0)) {\n                (bool sent,) = msg.sender.call{value: ticketPaymentRefundAmount}(\"\");\n                require(sent, \"Failed to send native coin\");\n            } else {\n                IERC20(state.configuration.ticketToken).transfer(msg.sender, ticketPaymentRefundAmount);\n            }\n\n            uint256 tokensPerWinningTicket = state.configuration.launchpadTokensPerWinningTicket;\n            uint256 launchpadTokensAmountToSend = nrRedeemableTickets * tokensPerWinningTicket;\n\n            if (launchpadTokensAmountToSend > 0) {\n                IERC20(state.configuration.launchpadToken).transfer(msg.sender, launchpadTokensAmountToSend);\n            }\n\n            emit TokensClaimed(msg.sender, nrRedeemableTickets, nrTicketsToRefund);\n        }\n    }\n\n    function hasUserClaimed(address user) public view returns (bool) {\n        return state.claimList[user];\n    }\n}"
    },
    "contracts/VRF.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.3;\n\nimport \"./EllipticCurve.sol\";\n\n\n/**\n * @title Verifiable Random Functions (VRF)\n * @notice Library verifying VRF proofs using the `Secp256k1` curve and the `SHA256` hash function.\n * @dev This library follows the algorithms described in [VRF-draft-04](https://tools.ietf.org/pdf/draft-irtf-cfrg-vrf-04) and [RFC6979](https://tools.ietf.org/html/rfc6979).\n * It supports the _SECP256K1_SHA256_TAI_ cipher suite, i.e. the aforementioned algorithms using `SHA256` and the `Secp256k1` curve.\n * @author Witnet Foundation\n */\nlibrary VRF {\n\n    /**\n     * Secp256k1 parameters\n     */\n\n    // Generator coordinate `x` of the EC curve\n    uint256 public constant GX = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798;\n    // Generator coordinate `y` of the EC curve\n    uint256 public constant GY = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8;\n    // Constant `a` of EC equation\n    uint256 public constant AA = 0;\n    // Constant `b` of EC equation\n    uint256 public constant BB = 7;\n    // Prime number of the curve\n    uint256 public constant PP = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\n    // Order of the curve\n    uint256 public constant NN = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\n\n    /// @dev Public key derivation from private key.\n    /// Warning: this function should not be used to derive your public key as it would expose the private key.\n    /// @param _d The scalar\n    /// @param _x The coordinate x\n    /// @param _y The coordinate y\n    /// @return (qx, qy) The derived point\n    function derivePoint(uint256 _d, uint256 _x, uint256 _y) internal pure returns (uint256, uint256) {\n        return EllipticCurve.ecMul(\n            _d,\n            _x,\n            _y,\n            AA,\n            PP\n        );\n    }\n\n    /// @dev Function to derive the `y` coordinate given the `x` coordinate and the parity byte (`0x03` for odd `y` and `0x04` for even `y`).\n    /// @param _yByte The parity byte following the ec point compressed format\n    /// @param _x The coordinate `x` of the point\n    /// @return The coordinate `y` of the point\n    function deriveY(uint8 _yByte, uint256 _x) internal pure returns (uint256) {\n        return EllipticCurve.deriveY(\n            _yByte,\n            _x,\n            AA,\n            BB,\n            PP);\n    }\n\n    /// @dev Computes the VRF hash output as result of the digest of a ciphersuite-dependent prefix\n    /// concatenated with the gamma point\n    /// @param _gammaX The x-coordinate of the gamma EC point\n    /// @param _gammaY The y-coordinate of the gamma EC point\n    /// @return The VRF hash ouput as shas256 digest\n    function gammaToHash(uint256 _gammaX, uint256 _gammaY) internal pure returns (bytes32) {\n        bytes memory c = abi.encodePacked(\n        // Cipher suite code (SECP256K1-SHA256-TAI is 0xFE)\n            uint8(0xFE),\n            // 0x03\n            uint8(0x03),\n            // Compressed Gamma Point\n            encodePoint(_gammaX, _gammaY));\n\n        return sha256(c);\n    }\n\n    /// @dev VRF verification by providing the public key, the message and the VRF proof.\n    /// This function computes several elliptic curve operations which may lead to extensive gas consumption.\n    /// @param _publicKey The public key as an array composed of `[pubKey-x, pubKey-y]`\n    /// @param _proof The VRF proof as an array composed of `[gamma-x, gamma-y, c, s]`\n    /// @param _message The message (in bytes) used for computing the VRF\n    /// @return true, if VRF proof is valid\n    function verify(uint256[2] memory _publicKey, uint256[4] memory _proof, bytes memory _message) internal pure returns (bool) {\n        // Step 2: Hash to try and increment (outputs a hashed value, a finite EC point in G)\n        (uint256 hPointX, uint256 hPointY) = hashToTryAndIncrement(_publicKey, _message);\n\n        // Step 3: U = s*B - c*Y (where B is the generator)\n        (uint256 uPointX, uint256 uPointY) = ecMulSubMul(\n            _proof[3],\n            GX,\n            GY,\n            _proof[2],\n            _publicKey[0],\n            _publicKey[1]);\n\n        // Step 4: V = s*H - c*Gamma\n        (uint256 vPointX, uint256 vPointY) = ecMulSubMul(\n            _proof[3],\n            hPointX,\n            hPointY,\n            _proof[2],\n            _proof[0],_proof[1]);\n\n        // Step 5: derived c from hash points(...)\n        bytes16 derivedC = hashPoints(\n            hPointX,\n            hPointY,\n            _proof[0],\n            _proof[1],\n            uPointX,\n            uPointY,\n            vPointX,\n            vPointY);\n\n        // Step 6: Check validity c == c'\n        return uint128(derivedC) == _proof[2];\n    }\n\n    /// @dev VRF fast verification by providing the public key, the message, the VRF proof and several intermediate elliptic curve points that enable the verification shortcut.\n    /// This function leverages the EVM's `ecrecover` precompile to verify elliptic curve multiplications by decreasing the security from 32 to 20 bytes.\n    /// Based on the original idea of Vitalik Buterin: https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\n    /// @param _publicKey The public key as an array composed of `[pubKey-x, pubKey-y]`\n    /// @param _proof The VRF proof as an array composed of `[gamma-x, gamma-y, c, s]`\n    /// @param _message The message (in bytes) used for computing the VRF\n    /// @param _uPoint The `u` EC point defined as `U = s*B - c*Y`\n    /// @param _vComponents The components required to compute `v` as `V = s*H - c*Gamma`\n    /// @return true, if VRF proof is valid\n    function fastVerify(\n        uint256[2] memory _publicKey,\n        uint256[4] memory _proof,\n        bytes memory _message,\n        uint256[2] memory _uPoint,\n        uint256[4] memory _vComponents)\n    internal pure returns (bool)\n    {\n        // Step 2: Hash to try and increment -> hashed value, a finite EC point in G\n        (uint256 hPointX, uint256 hPointY) = hashToTryAndIncrement(_publicKey, _message);\n\n        // Step 3 & Step 4:\n        // U = s*B - c*Y (where B is the generator)\n        // V = s*H - c*Gamma\n        if (!ecMulSubMulVerify(\n            _proof[3],\n            _proof[2],\n            _publicKey[0],\n            _publicKey[1],\n            _uPoint[0],\n            _uPoint[1]) ||\n        !ecMulVerify(\n            _proof[3],\n            hPointX,\n            hPointY,\n            _vComponents[0],\n            _vComponents[1]) ||\n        !ecMulVerify(\n            _proof[2],\n            _proof[0],\n            _proof[1],\n            _vComponents[2],\n            _vComponents[3])\n        )\n        {\n            return false;\n        }\n        (uint256 vPointX, uint256 vPointY) = EllipticCurve.ecSub(\n            _vComponents[0],\n            _vComponents[1],\n            _vComponents[2],\n            _vComponents[3],\n            AA,\n            PP);\n\n        // Step 5: derived c from hash points(...)\n        bytes16 derivedC = hashPoints(\n            hPointX,\n            hPointY,\n            _proof[0],\n            _proof[1],\n            _uPoint[0],\n            _uPoint[1],\n            vPointX,\n            vPointY);\n\n        // Step 6: Check validity c == c'\n        return uint128(derivedC) == _proof[2];\n    }\n\n    /// @dev Decode VRF proof from bytes\n    /// @param _proof The VRF proof as bytes\n    /// @return The VRF proof as an array composed of `[gamma-x, gamma-y, c, s]`\n    function decodeProof(bytes memory _proof) internal pure returns (uint[4] memory) {\n        require(_proof.length == 81, \"Malformed VRF proof\");\n        uint8 gammaSign;\n        uint256 gammaX;\n        uint128 c;\n        uint256 s;\n        assembly {\n            gammaSign := mload(add(_proof, 1))\n            gammaX := mload(add(_proof, 33))\n            c := mload(add(_proof, 49))\n            s := mload(add(_proof, 81))\n        }\n        uint256 gammaY = deriveY(gammaSign, gammaX);\n\n        return [\n            gammaX,\n            gammaY,\n            c,\n            s];\n    }\n\n    /// @dev Decode EC point from bytes\n    /// @param _point The EC point as bytes\n    /// @return The point as `[point-x, point-y]`\n    function decodePoint(bytes memory _point) internal pure returns (uint[2] memory) {\n        require(_point.length == 33, \"Malformed compressed EC point\");\n        uint8 sign;\n        uint256 x;\n        assembly {\n            sign := mload(add(_point, 1))\n            x := mload(add(_point, 33))\n        }\n        uint256 y = deriveY(sign, x);\n\n        return [x, y];\n    }\n\n    /// @dev Compute the parameters (EC points) required for the VRF fast verification function.\n    /// @param _publicKey The public key as an array composed of `[pubKey-x, pubKey-y]`\n    /// @param _proof The VRF proof as an array composed of `[gamma-x, gamma-y, c, s]`\n    /// @param _message The message (in bytes) used for computing the VRF\n    /// @return The fast verify required parameters as the tuple `([uPointX, uPointY], [sHX, sHY, cGammaX, cGammaY])`\n    function computeFastVerifyParams(uint256[2] memory _publicKey, uint256[4] memory _proof, bytes memory _message)\n    internal pure returns (uint256[2] memory, uint256[4] memory)\n    {\n        // Requirements for Step 3: U = s*B - c*Y (where B is the generator)\n        (uint256 hPointX, uint256 hPointY) = hashToTryAndIncrement(_publicKey, _message);\n        (uint256 uPointX, uint256 uPointY) = ecMulSubMul(\n            _proof[3],\n            GX,\n            GY,\n            _proof[2],\n            _publicKey[0],\n            _publicKey[1]);\n        // Requirements for Step 4: V = s*H - c*Gamma\n        (uint256 sHX, uint256 sHY) = derivePoint(_proof[3], hPointX, hPointY);\n        (uint256 cGammaX, uint256 cGammaY) = derivePoint(_proof[2], _proof[0], _proof[1]);\n\n        return (\n            [uPointX, uPointY],\n            [\n            sHX,\n            sHY,\n            cGammaX,\n            cGammaY\n            ]);\n    }\n\n    /// @dev Function to convert a `Hash(PK|DATA)` to a point in the curve as defined in [VRF-draft-04](https://tools.ietf.org/pdf/draft-irtf-cfrg-vrf-04).\n    /// Used in Step 2 of VRF verification function.\n    /// @param _publicKey The public key as an array composed of `[pubKey-x, pubKey-y]`\n    /// @param _message The message used for computing the VRF\n    /// @return The hash point in affine cooridnates\n    function hashToTryAndIncrement(uint256[2] memory _publicKey, bytes memory _message) internal pure returns (uint, uint) {\n        // Step 1: public key to bytes\n        // Step 2: V = cipher_suite | 0x01 | public_key_bytes | message | ctr\n        bytes memory c = abi.encodePacked(\n        // Cipher suite code (SECP256K1-SHA256-TAI is 0xFE)\n            uint8(254),\n            // 0x01\n            uint8(1),\n            // Public Key\n            encodePoint(_publicKey[0], _publicKey[1]),\n            // Message\n            _message);\n\n        // Step 3: find a valid EC point\n        // Loop over counter ctr starting at 0x00 and do hash\n        for (uint8 ctr = 0; ctr < 256; ctr++) {\n            // Counter update\n            // c[cLength-1] = byte(ctr);\n            bytes32 sha = sha256(abi.encodePacked(c, ctr));\n            // Step 4: arbitraty string to point and check if it is on curve\n            uint hPointX = uint256(sha);\n            uint hPointY = deriveY(2, hPointX);\n            if (EllipticCurve.isOnCurve(\n                hPointX,\n                hPointY,\n                AA,\n                BB,\n                PP))\n            {\n                // Step 5 (omitted): calculate H (cofactor is 1 on secp256k1)\n                // If H is not \"INVALID\" and cofactor > 1, set H = cofactor * H\n                return (hPointX, hPointY);\n            }\n        }\n        revert(\"No valid point was found\");\n    }\n\n    /// @dev Function to hash a certain set of points as specified in [VRF-draft-04](https://tools.ietf.org/pdf/draft-irtf-cfrg-vrf-04).\n    /// Used in Step 5 of VRF verification function.\n    /// @param _hPointX The coordinate `x` of point `H`\n    /// @param _hPointY The coordinate `y` of point `H`\n    /// @param _gammaX The coordinate `x` of the point `Gamma`\n    /// @param _gammaX The coordinate `y` of the point `Gamma`\n    /// @param _uPointX The coordinate `x` of point `U`\n    /// @param _uPointY The coordinate `y` of point `U`\n    /// @param _vPointX The coordinate `x` of point `V`\n    /// @param _vPointY The coordinate `y` of point `V`\n    /// @return The first half of the digest of the points using SHA256\n    function hashPoints(\n        uint256 _hPointX,\n        uint256 _hPointY,\n        uint256 _gammaX,\n        uint256 _gammaY,\n        uint256 _uPointX,\n        uint256 _uPointY,\n        uint256 _vPointX,\n        uint256 _vPointY)\n    internal pure returns (bytes16)\n    {\n        bytes memory c = abi.encodePacked(\n        // Ciphersuite 0xFE\n            uint8(254),\n            // Prefix 0x02\n            uint8(2),\n            // Points to Bytes\n            encodePoint(_hPointX, _hPointY),\n            encodePoint(_gammaX, _gammaY),\n            encodePoint(_uPointX, _uPointY),\n            encodePoint(_vPointX, _vPointY)\n        );\n        // Hash bytes and truncate\n        bytes32 sha = sha256(c);\n        bytes16 half1;\n        assembly {\n            let freemem_pointer := mload(0x40)\n            mstore(add(freemem_pointer,0x00), sha)\n            half1 := mload(add(freemem_pointer,0x00))\n        }\n\n        return half1;\n    }\n\n    /// @dev Encode an EC point to bytes\n    /// @param _x The coordinate `x` of the point\n    /// @param _y The coordinate `y` of the point\n    /// @return The point coordinates as bytes\n    function encodePoint(uint256 _x, uint256 _y) internal pure returns (bytes memory) {\n        uint8 prefix = uint8(2 + (_y % 2));\n\n        return abi.encodePacked(prefix, _x);\n    }\n\n    /// @dev Substracts two key derivation functionsas `s1*A - s2*B`.\n    /// @param _scalar1 The scalar `s1`\n    /// @param _a1 The `x` coordinate of point `A`\n    /// @param _a2 The `y` coordinate of point `A`\n    /// @param _scalar2 The scalar `s2`\n    /// @param _b1 The `x` coordinate of point `B`\n    /// @param _b2 The `y` coordinate of point `B`\n    /// @return The derived point in affine cooridnates\n    function ecMulSubMul(\n        uint256 _scalar1,\n        uint256 _a1,\n        uint256 _a2,\n        uint256 _scalar2,\n        uint256 _b1,\n        uint256 _b2)\n    internal pure returns (uint256, uint256)\n    {\n        (uint256 m1, uint256 m2) = derivePoint(_scalar1, _a1, _a2);\n        (uint256 n1, uint256 n2) = derivePoint(_scalar2, _b1, _b2);\n        (uint256 r1, uint256 r2) = EllipticCurve.ecSub(\n            m1,\n            m2,\n            n1,\n            n2,\n            AA,\n            PP);\n\n        return (r1, r2);\n    }\n\n    /// @dev Verify an Elliptic Curve multiplication of the form `(qx,qy) = scalar*(x,y)` by using the precompiled `ecrecover` function.\n    /// The usage of the precompiled `ecrecover` function decreases the security from 32 to 20 bytes.\n    /// Based on the original idea of Vitalik Buterin: https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\n    /// @param _scalar The scalar of the point multiplication\n    /// @param _x The coordinate `x` of the point\n    /// @param _y The coordinate `y` of the point\n    /// @param _qx The coordinate `x` of the multiplication result\n    /// @param _qy The coordinate `y` of the multiplication result\n    /// @return true, if first 20 bytes match\n    function ecMulVerify(\n        uint256 _scalar,\n        uint256 _x,\n        uint256 _y,\n        uint256 _qx,\n        uint256 _qy)\n    internal pure returns(bool)\n    {\n        address result = ecrecover(\n            0,\n            _y % 2 != 0 ? 28 : 27,\n            bytes32(_x),\n            bytes32(mulmod(_scalar, _x, NN)));\n\n        return pointToAddress(_qx, _qy) == result;\n    }\n\n    /// @dev Verify an Elliptic Curve operation of the form `Q = scalar1*(gx,gy) - scalar2*(x,y)` by using the precompiled `ecrecover` function, where `(gx,gy)` is the generator of the EC.\n    /// The usage of the precompiled `ecrecover` function decreases the security from 32 to 20 bytes.\n    /// Based on SolCrypto library: https://github.com/HarryR/solcrypto\n    /// @param _scalar1 The scalar of the multiplication of `(gx,gy)`\n    /// @param _scalar2 The scalar of the multiplication of `(x,y)`\n    /// @param _x The coordinate `x` of the point to be mutiply by `scalar2`\n    /// @param _y The coordinate `y` of the point to be mutiply by `scalar2`\n    /// @param _qx The coordinate `x` of the equation result\n    /// @param _qy The coordinate `y` of the equation result\n    /// @return true, if first 20 bytes match\n    function ecMulSubMulVerify(\n        uint256 _scalar1,\n        uint256 _scalar2,\n        uint256 _x,\n        uint256 _y,\n        uint256 _qx,\n        uint256 _qy)\n    internal pure returns(bool)\n    {\n        uint256 scalar1 = (NN - _scalar1) % NN;\n        scalar1 = mulmod(scalar1, _x, NN);\n        uint256 scalar2 = (NN - _scalar2) % NN;\n\n        address result = ecrecover(\n            bytes32(scalar1),\n            _y % 2 != 0 ? 28 : 27,\n            bytes32(_x),\n            bytes32(mulmod(scalar2, _x, NN)));\n\n        return pointToAddress(_qx, _qy) == result;\n    }\n\n    /// @dev Gets the address corresponding to the EC point digest (keccak256), i.e. the first 20 bytes of the digest.\n    /// This function is used for performing a fast EC multiplication verification.\n    /// @param _x The coordinate `x` of the point\n    /// @param _y The coordinate `y` of the point\n    /// @return The address of the EC point digest (keccak256)\n    function pointToAddress(uint256 _x, uint256 _y)\n    internal pure returns(address)\n    {\n        return address(uint160(uint256(keccak256(abi.encodePacked(_x, _y))) & 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\n    }\n}"
    },
    "contracts/WinnerSelection.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./LaunchpadStorage.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./LaunchStage.sol\";\n\nabstract contract WinnerSelection is LaunchpadStorage, Ownable, LaunchStageModule  {\n\n    event WinnersSelected(uint256 progress, uint256 total);\n    event TicketsFiltered(uint256 progress, uint256 total);\n\n    function selectWinners(uint256 batchSize) public onlyOwner {\n        require(getLaunchStage() == LaunchStage.WinnerSelection, \"Not in winner selection stage\");\n        require(state.flags.wereTicketsFiltered, \"Must filter tickets first\");\n        require(!state.flags.winnersSelected, \"Winners already selected\");\n        require(state.proof != 0, \"Shuffler not initialized\");\n\n        uint256 totalWinningTickets = state.configuration.numberOfWinningTickets.value;\n        uint256 shufflableWinningTickets = totalWinningTickets - (state.confirmedGuaranteedTickets);\n        uint256 lastTicketPosition = state.lastTicketId;\n\n        if (state.selectWinnersProgress == 0) {\n            state.selectWinnersProgress = 1;\n        }\n\n        for (uint256 i = 0; i < batchSize && state.selectWinnersProgress <= shufflableWinningTickets && state.selectWinnersProgress <= lastTicketPosition; i++){\n            shuffleSingleTicket(state.selectWinnersProgress, lastTicketPosition);\n            state.selectWinnersProgress = state.selectWinnersProgress + 1;\n        }\n\n        if (state.selectWinnersProgress >= shufflableWinningTickets || state.selectWinnersProgress >= lastTicketPosition) {\n            state.flags.winnersSelected = true;\n            uint256 claimableTicketPayment = state.configuration.ticketPrice * (totalWinningTickets);\n            state.configuration.claimableTicketPayment = claimableTicketPayment;\n        }\n\n        emit WinnersSelected(state.selectWinnersProgress, shufflableWinningTickets);\n    }\n\n     function shuffleSingleTicket(uint256 currentTicketPosition, uint256 lastTicketPosition) private {\n        uint256 randPos = uint256(keccak256(abi.encodePacked(state.proof, currentTicketPosition))) % (lastTicketPosition - currentTicketPosition + 1) + currentTicketPosition;\n\n        uint256 winningTicketId = getTicketIdFromPos(randPos);\n        uint256 currentTicketId = getTicketIdFromPos(currentTicketPosition);\n\n        setTicketPosToId(randPos, currentTicketId);\n        setTicketPosToId(currentTicketPosition, winningTicketId);\n        setWinningTicket(winningTicketId);\n    }\n\n    function filterTickets(uint256 batchSize) public onlyOwner {\n        require(getLaunchStage() == LaunchStage.WinnerSelection, \"Not in winner selection stage\");\n        require(!state.flags.wereTicketsFiltered, \"Tickets already filtered\");\n\n        if (state.filterTicketsProgressStart == 0) {\n            state.filterTicketsProgressStart = 1;\n        }\n\n        uint256 maxTicketId = state.lastTicketId;\n        uint256 updatedMaxTicketId = maxTicketId + 1;\n\n        for (uint256 i = 0; i < batchSize && state.filterTicketsProgressStart <= maxTicketId; i++) {\n\n            (address ticketOwner, uint256 ticketsInBatch) = getTicketBatchDetails(state.filterTicketsProgressStart);\n        \n            uint256 confirmedTicketCount = getNumberOfConfirmedTickets(ticketOwner);\n\n            if (isUserBlacklisted(ticketOwner) || confirmedTicketCount == 0) {\n                clearTicketDataForAddress(ticketOwner, state.filterTicketsProgressStart);\n            } else {\n                uint256 guaranteedWinners = getGuaranteedWinnersForAddress(ticketOwner);\n                uint256 ticketsToKeep = calculateTicketsToKeep(guaranteedWinners, confirmedTicketCount);\n\n                uint256 newFirstTicketId = state.filterTicketsProgressStart - (state.filterTicketsProgressEnd) - (state.confirmedGuaranteedTickets);\n                uint256 newLastTicketId = newFirstTicketId + (ticketsToKeep) - 1;\n                updatedMaxTicketId = newLastTicketId;\n\n                updateTicketRangeForAddress(ticketOwner, newFirstTicketId, newLastTicketId, guaranteedWinners, confirmedTicketCount);\n                state.confirmedGuaranteedTickets = state.confirmedGuaranteedTickets + (getTicketRangeForAddress(ticketOwner).guaranteedWinners);\n                updateTicketBatch(newFirstTicketId, ticketOwner, ticketsToKeep);\n            }\n\n            uint256 removedTicketsInBatch = ticketsInBatch - (confirmedTicketCount);\n            state.filterTicketsProgressEnd = state.filterTicketsProgressEnd + (removedTicketsInBatch);\n\n            state.filterTicketsProgressStart = state.filterTicketsProgressStart + (ticketsInBatch);\n        }\n\n        emit TicketsFiltered(state.filterTicketsProgressStart - 1, maxTicketId);\n\n        if (state.filterTicketsProgressStart > maxTicketId) {\n            updateNumberOfWinningTickets( updatedMaxTicketId + (state.confirmedGuaranteedTickets));\n            state.lastTicketId = updatedMaxTicketId;\n            state.flags.wereTicketsFiltered = true;\n            delete state.filterTicketsProgressStart;\n            delete state.filterTicketsProgressEnd;\n        }\n    }\n\n    function getTicketIdFromPos(uint256 ticketPos) public view returns (uint256) {\n        return state.ticketPositionForTicketId[ticketPos] == 0 ? ticketPos : state.ticketPositionForTicketId[ticketPos];\n    }\n\n    function setTicketPosToId(uint256 ticketPos, uint256 id) internal {\n        state.ticketPositionForTicketId[ticketPos] = id;\n    }\n\n    function setWinningTicket(uint256 ticketId) internal {\n        state.winningTickets[ticketId] = true;\n    }\n\n    function getTicketBatchDetails(uint256 batchStartId) private view returns (address, uint256) {\n        TicketBatch memory batch = state.ticketBatch[batchStartId];\n        return (batch.addr, batch.nrTickets);\n    }\n\n    function getNumberOfConfirmedTickets(address addr) public view returns (uint256) {\n        return state.confirmedTicketsForAddress[addr];\n    }\n\n    function isUserBlacklisted(address user) public view returns (bool) {\n        return state.blacklist[user];\n    }\n\n    function clearTicketDataForAddress(address user, uint256 batchStartId) private {\n        delete state.ticketRangeForAddress[user];\n        delete state.ticketBatch[batchStartId];\n    }\n\n    function getGuaranteedWinnersForAddress(address user) private view returns (uint256) {\n        return state.ticketRangeForAddress[user].guaranteedWinners;\n    }\n\n    function calculateTicketsToKeep(uint256 guaranteedWinners, uint256 confirmedTickets) private pure returns (uint256) {\n        return guaranteedWinners >= confirmedTickets ? 0 : confirmedTickets - (guaranteedWinners);\n    }\n\n    function updateTicketRangeForAddress(\n        address user,\n        uint256 firstId,\n        uint256 lastId,\n        uint256 guaranteedWinners,\n        uint256 totalConfirmedTickets\n    ) private {\n        state.ticketRangeForAddress[user] = TicketRange({\n            firstId: firstId,\n            lastId: lastId,\n            guaranteedWinners: guaranteedWinners < totalConfirmedTickets ? guaranteedWinners : totalConfirmedTickets\n        });\n    }\n\n    function getTicketRangeForAddress(address addr) public view returns (TicketRange memory) {\n        TicketRange memory range = state.ticketRangeForAddress[addr];\n        require(range.lastId != 0, \"Ticket range not found\");\n        return range;\n    }\n\n    function getNumberOfWinningTicketsForAddress(address user) public view returns (uint256) {\n        require(state.flags.winnersSelected, \"Winners not selected yet\");\n        TicketRange memory range = getTicketRangeForAddress(user);\n        uint256 winningCount = 0;\n        for (uint256 ticketId = range.firstId; ticketId <= range.lastId; ticketId++) {\n            if (isWinningTicket(ticketId)) {\n                winningCount++;\n            }\n        }\n        return winningCount;\n    }\n\n    function isWinningTicket(uint256 ticketId) public view returns (bool) {\n        return state.winningTickets[ticketId];\n    }\n\n    function updateTicketBatch(\n        uint256 batchStartId,\n        address user,\n        uint256 nrTickets\n    ) private {\n        delete state.ticketBatch[batchStartId];\n        state.ticketBatch[batchStartId] = TicketBatch({\n            addr: user,\n            nrTickets: nrTickets\n        });\n    }\n\n    function updateNumberOfWinningTickets(uint256 updatedMaxTicketId) private {\n        uint256 currentWinningTicketCount = state.configuration.numberOfWinningTickets.value;\n\n        if (currentWinningTicketCount > updatedMaxTicketId) {\n            state.configuration.numberOfWinningTickets = NumberOfWinningTickets({\n                ticketType: NumberOfWinningTicketsType.AfterFiltering,\n                value: updatedMaxTicketId\n            });\n        } else {\n            state.configuration.numberOfWinningTickets = NumberOfWinningTickets({\n                ticketType: NumberOfWinningTicketsType.AfterFiltering,\n                value: currentWinningTicketCount\n            });\n        }\n    }\n\n    function getWinningTicketIdsForAddress(address user) public view returns (uint256[] memory) {\n        require(state.flags.winnersSelected, \"Winners not selected yet\");\n\n        TicketRange memory range = state.ticketRangeForAddress[user];\n        uint256[] memory winningTickets = new uint256[](range.lastId - range.firstId + 1);\n        uint256 winningCount = 0;\n\n        for (uint256 ticketId = range.firstId; ticketId <= range.lastId; ticketId++) {\n            if (isWinningTicket(ticketId)) {\n                winningTickets[winningCount] = ticketId;\n                winningCount++;\n            }\n        }\n\n        uint256[] memory filteredWinningTickets = new uint256[](winningCount);\n        for (uint256 i = 0; i < winningCount; i++) {\n            filteredWinningTickets[i] = winningTickets[i];\n        }\n\n        return filteredWinningTickets;\n    }\n\n    function getNumberOfWinningPerUser(address addr) public view returns (uint256) {\n        return state.numberOfWinningTicketsPerUser[addr];\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}